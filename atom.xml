<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JC小站</title>
  
  <subtitle>与你共享生活和今日份的丧</subtitle>
  <link href="https://jcxiaozhan.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://jcxiaozhan.gitee.io/"/>
  <updated>2022-07-03T03:25:10.803Z</updated>
  <id>https://jcxiaozhan.gitee.io/</id>
  
  <author>
    <name>John Cena</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>写给五年后的自己的一封信</title>
    <link href="https://jcxiaozhan.gitee.io/2022/07/03/%E5%86%99%E7%BB%99%E4%BA%94%E5%B9%B4%E5%90%8E%E7%9A%84%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%80%E5%B0%81%E4%BF%A1/"/>
    <id>https://jcxiaozhan.gitee.io/2022/07/03/%E5%86%99%E7%BB%99%E4%BA%94%E5%B9%B4%E5%90%8E%E7%9A%84%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%80%E5%B0%81%E4%BF%A1/</id>
    <published>2022-07-02T16:00:00.000Z</published>
    <updated>2022-07-03T03:25:10.803Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="37e1331d5ae2368bc173174af7afc74b3a93a84f5b80470805b365727e085510">66b46b7b58be19db62a6a8f28aae2f8a9259bd66cb3800c0d05a08a177e1dd20dc7f2c6b600ebd348401af779e147ffc72d3564a182250a8afd2dc45f93cd1d80f4e4a18a9560ed2d0600d699589ca8858ab4948a343a4be1fae4f8426faf80f7d10abc8332dad0039c94249ea9d51b3448b77712ac8cf3dd60b4376a1a812d0e15ff12daf62da4b403940f389521c9e2ec7b62f77e89fa0e5d94a079084824001113c6aba2c70ece226f1d6d0d13cb37c26d2d3a0bc4e84387f4ca76618df97e83f8853eebce48de38e265b91da7c965ebd79396a1090ed0731d3c54589daf42487ba308a2c95b85fc76df9921710889474c34a9a24b1ba13a6936b795d5cbd6a9b0c98e97089156d65fce907e4d379cbf62e38d80c6d8274eea6b455cbe3b457082bcaf138e1e3be605f0a13901faddf79d6c1aa32f68184bf4e7ede07720bfb13cd02c63c0a5a50c4cbd57258c6026aeeb94b5b14b8e93a003b77c04d4a382eb5dcb9310acfffa080b31fc49b7e8203f9d7de22f4710675cb4781db72acf6c5e585285925c5526a240e48c32b408aa0d9f32bdac8d574caeb6cef5a37b446c1e3382f3a251afd3e4997e21a0d5a859234b404a4a1dfacf8c7203496c323ddb77c4ce030bac0ee1f211ab73cb6eaf0f900ee0d0bd1e30b6b4f6fa33de9ee7106f7f11effd8e091c2217df00e92b648bd7b990775a572006730d5a3952b111b0d0201cab0964b0c65dbf11d98db1182be0de50d03194a840d2d35fbc143325a3cfbccce9bea65f92e046a178fde21c521ef40497fcb44533c680237ce182ecba39604f19b0e2a4757f9a747cf85116532aff92d49934d34eff87136f59493040c9d3d29d6a635f427daaf7be36357d02f13a3399c2fe342d202c6dab20a071587e950df6a45684cb895e4c49d8a242d8eb8e32a417da510f08697b490e99395da31d6dc6f5d85bb53c7848cce90132e4a928d16887543750b9fa113ccc38166c33929719f0793a3ed15272cc588b54015782b058b8f3d78d7a7bce527c6b2b6457df8ffc32f3e3bc537a0fb828384d46b2f921ba46f4e631b2d56d03160800d8b5671472b0b2ff0d44c993086d2b506eca7c29cc13fb94e826924544981684d946b04c514b9418581c1cc853b18f53f9008b8be646300cd701397a8f8952336f26151c7603117e03e7f5d0a129918b17c25b7d57a3d427cb0d019f566d118f9b9554e3bac8be6eb35939c9a64bbfeab70e612f11dfa57fcd693488a45592d80aae3454f5378510d2f0fb6cb1b1dee4404bff98c010320897c7bd52d783dc007322744d9259309397faa43bac17675facab7ac399b32136d897e24221ee882f66d29731d766e2d5d8672c5ff2d30f292e7f201a4d5f739b1a41a37a355a8c270adbde018753b2f083aa2da7f1fa20079310e5b421a82a9d538e474e08e753196ee610535c9fc62dffd3306ead998a62e497589b7915022197db16c3c47ca9cf7f1df92b184c046fb3cf0bc8c43ccb9fa22ece0af2e9dbfb09864d193b3658e6809e13eaa5d769612f98ac0fa2404bf7405ecb393da3d64f3d79addafb271ad4eeed965e6f6de38235415b0fbf69a4609bd4bfe256fa5427e7335c2548bb58a4c851bfd913f8669b87fb33041a9c1927bbccc9d13a48f5c66503e14f00001b38e2d36a71ecf9eef001514f459408ce5603815670bc30e3e9a80432c748a25d49c5544a5d7c4688ea6157e0b88e1967d25f535caf6e830b8f52c2b19f5dc78804275a187713e33045516a11753eb278110b5dcec586eca07a590875a8a42556f5d2008e16d5ad470b06842e9d1c313bf8ec65708b899b32e97da7a1922e9fda623e1bd09e903207b0e9e4416e6af812356ae73b2de1f047053a5db1e85d7d206d600b1b216aac11dd1b9b00050d7de3a2cf0b0b92d6408bba0b2df98b42d3f17244c04b89ab9f14119b4d6a18d7990734aef12613b1152f9ce6e17d5bba67405fa7340f907b62b4bfad68816cc0e3a52ad9f345ff638adf907bea3a9a54235857d46dfe9b7973a4f8055ec3e8b2304f3db8b178b879ce957366357c56f9f75d3a72c201b05c22508684d9422058d7e11d8f902fa7dfca4742995376e43808be688bf7e89e68b7fdf81c770ce976b3ebbf4b624a4c40194b8cc32d6bcc959c7e37f9b09df31d1eb6102bcf319f118e7562a8a565dc36dcbaa907314552b7e5370c358ed31f55c27aac9f775c12f8b0c42944e81d14ad486d0291fc1ba1b71ca11361d9055b5881aa916568bf7cd3f120767f40d96accabd0304de74b3642073769b93bd4c8a8d43bb79254217719fbb280bd529b390f267c666177eabd22d280300e96066696cc9b4f5e21ac347e6d6a5d42200e07b5e99e506705c051f11e3367f19251556b665ccb1511cf1e176cdee17120f3b4d89b8965b5f2ae8cea3e1ff8dbe0c386576aebbd0525d65ffffbeaa9bafe936cd65a60d0103f2633103f51c9cda7a372d4e3a868a1da874de5a320288c3c2c09ce50d2d63c3b8e54b3e59884693b222a4aa95965a446e9b2968b7604b3c49c90a99b6107fb714380493b7e947e8c2fc395336ec827eaec2ca15a82581e673dae0b3217ed47b7d9ef8ab835f040ff03dbb871718e7b3c00a761d648f68216830cbbfecb2dad43499408823bb0ebc5e0a570382904e773734dc793850ce183760caab3602b88e3ed80304202e2d371493bf3471fc7cbb68fac164a1947504b19a136a89966e8fcb4d748116b3b84ab2209398c8b2a8b3661d0187ca87cd486ae10db70fff8383b50079ed36c8ca405e45de80097ba75e0a4cf6e36dd0a9e0a94a622b256631aa9745c82adb7ebe99f4c1563e2b0d580686c10eebfeee691f77caaa44312e9526c5d67c0904edc47fba4680b3cfc62e434f2fc23fe879a14e51c9f7e86d37583f61af44a204f799aa978671bac82b7200cc0db990092098f6222e1798c5a1786599a47a2ef3450356b2cdd23bf438ae9b42ee339dce11fbb79271978c109f6e22c8a5fee293f3286da74d0390afbf8361eaf08a79e103d921a1c43e70aded3ff9b17bbb7eacfb4ac7f9b4c4fe3a5606c0c65f111f47f97abe812aa3a2afb98024ce320f67dca9b77dd35cc517de3f7a9fb4a86088efca84e0bcad6910591580a8cf91dd24e3bc6b2d5e259525d5cfe9bdb5662112e3f76807f11a5f61055643ef65ab0782b2f3dab195787fab99679d5338fe2d033248479ff88a0f3081b3914a1ebee9f14e0bf9b3cc35c5abb436e85ed7cfe3a0f556aa4260570664ca36dc015a42014772e181d6a3f6718cce08663460ce73a6021e9e15efc31a3fe316ecae7ac9504b0a607b87f99314012b42f2420feb7aa4644966959fb9075b8e16e10b66beab61566c1c4c6fee0519e7c43037b4ed2ff2cb0e4a1aa1b44efc45d25fe267ff09bde246ca9d8a54a7195aa431e9994ddb72171f84ca23ef8dda8eacbbac715a9113eeef9fd4eedb92b56ddc138f16415382781c001267c0b9b920f8a0454e549a58e44de8e617bcaddea2b112a4a1039652526284e286d1ce5674244d5a19d108330bf3f57d5f033f66ddaca5f1f51be173804a4ee9061f9f3310dba59de695ae1d19583d570d63fdd108317b682df9aeb0b76737132a6b6b6fc30ff533d2f606ee3c65d12c3c9e449f1d8bd7e48277de87540afcba737a94dc8b8a1d0f4c802cd4f2e1459618b6f658be996a9783f6f89f86204b540551760992bf3f1b601029fc4e66d414afe308807923fc2c8335b5ac64a815450c2a19d5b738e8843ee67860343d65ec6a2c534f14490109dcd07569d5730b5334f276df2e55c937395ab65122fe96aa3f296deb4c5a093399110e0ab21fea090f6be17ae82f1b89ba0b0d063840e3ffb9b523420e6f9dbf4438702c8d6649aca5b6e24ee9c6eb5b68b2cdecb8fd608621588ea7e27c428cb7fa5a147a49b21542cecde1c7b105efee748e6cd3ae55621226bee7d50c507f20ea6e5fc7030b85ae01883a794ea464d96bc7db8e9d8463fe8911db45f363535abbaac795d9b4bdb7898a5d35bfd5c6f944cbdcab11cf23825f3ee8c44c5004eeecc441cc42e36c396ba7bcf43b9b82e51c3ce55685a153c5381a253618a5c00b79d8b68d9f150111fd10fd41d9d1241b8f98d7fd1f5c24dbb0941063c16cfa6dc749830de6ae5c333afc747ea6bd4e4d127a2de42082cd1d14b19e46bada533d917374c3e8d745e95639c533601978d69fbb59935ce27139aa614a0385c2f986db0bdd6b885a7f59f0d3db6e0ca0aa157bdef00c5238e6d3a5adfc4333d61fb855680507ad71d5ce810fb492f66fddf4c6146f25d19f25aed256bd64c20f98842bc2a86d565c503995ac9661ec6d724edc8f3707004293600a02a1b5dea8ff50f98751b4966590f9acdc202b0d89c5060b356c52ea59342fba4a7de0e0214102353a4a010a3b1271702fa560b028aae5809fccf028e2586145e93f4e93f752ec4e6db53928aba207111d9f5eee8067a74bf0a873eaec86f479ce58c164df10323e88711c0fd2beb0a07d3dac37d8e3a5e104362efab33c2f7458061e1c516886d5d81008e61f4b81133cec5d3bc887eac93013a76fc42564ede519e78a38c23e3ef153afd7b69d37220ad3f228af657b8d8f0326937fffcccda0fbea9cb93c9c3a93d7069bc41b318b711090585ca2c15818b6a8f5100531de038cb90f5956a71f10a3f9a103da6d0cbac5428f37295c30877ca8391b40f6e68dc4be5a9cb877092756e2d41f3d0f8a1f26387607df13bb20215d35426e70b179f0819ddad528156f0e507ff16e4d8be886a0cba067c3ab636520afc54dd74a4755bf7799c299c3eaef3484a38338bc40de80b31131b57b51f89997f13e5f31be5f009809ad991f3c0beb3b81420001176875b47fdead6b46a26a2eafe01701d058686556af491380e7abc98487dc18b9d1855298f4c849114dcf8e04d8ba7d5971cc2d2971cd2c943d6a2e281f8e6ca9293b44a337ba16b5304603b5883d3a8505e090d284079699f7dd8a3a2daace9122da692afd24abbe9cf4fe59dce65cbfabcb8a5da5fdaa27a3a9e45eeffde4cf60f82325137392275ac68614f8cc3a68cfc32ed172367c6435b994881bbcd89869b129867f7100830681f0734e81a6e0582e31ab65f7bfcb73e4fc0dc292b49fdb6e33be5434b647ddbbd9177a024374064ce5d958944f1272a902b96ada61d7390facb82e76e3e6dd99241e2416ed409ad5ceef5834b3871204434b5c2343b1bd8ccc14bc69565d93124902aed07cc3f30e397aaf7cf37a25f378acbd171ee980541a29dfeec3c3955143c08fb946b2a3902297a4b47281072fd418548f0c506b2716735ffe6d51ee5fa55b2d7e41c5832f9e04325f79a31bc105f23610a2046b096ec493a989b737321d6333f1f1d13afddfcacb9e6f0a6507a5e7b6c02dab3233f47ec8f5e9a4d88030d4241846b6996c2ea11345544459989a22426b3e11153c772d172a7edd9180b59f075ad6af445fce6a110ac4a4ea2cf41632e9ac2d59ea790c811547a01cc0c76420538f8b4b5df96fadbdeb4132298405</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章已被加密，请输入密码查看。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">文章已被加密</summary>
    
    
    
    <category term="生活琐碎" scheme="https://jcxiaozhan.gitee.io/categories/%E7%94%9F%E6%B4%BB%E7%90%90%E7%A2%8E/"/>
    
    
    <category term="人生规划" scheme="https://jcxiaozhan.gitee.io/tags/%E4%BA%BA%E7%94%9F%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>专升本经验分享</title>
    <link href="https://jcxiaozhan.gitee.io/2022/06/13/%E4%B8%93%E5%8D%87%E6%9C%AC%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    <id>https://jcxiaozhan.gitee.io/2022/06/13/%E4%B8%93%E5%8D%87%E6%9C%AC%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</id>
    <published>2022-06-12T16:00:00.000Z</published>
    <updated>2022-07-03T03:18:11.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>这篇文章是本人的专升本考试经验分享，我将会从我的角度出发尽可能详细地讲述我的专升本备考过程以及升本注意事项。这是对我人生经历的记录，同时也希望能帮助到后面有想要专升本的学弟学妹们，让你们少走一些弯路。</p></blockquote><ul><li>适用省份：四川省</li></ul><h2 id="个人简介"><a href="#个人简介" class="headerlink" title="个人简介"></a>个人简介</h2><p>四川信息职业技术学院2019级学生，高考调剂录取到新能源汽车专业，大一下期转专业到软件技术，在校期间专业成绩排名年级前二十的样子。</p><p>2022年参加专升本考试，考入成都工业学院软件工程专业，笔试总分195，总成绩70.75</p><img src="https://img.jcxiaozhan.top/%E4%B8%93%E5%8D%87%E6%9C%AC%E4%B8%80.jpg"><h2 id="关于备考"><a href="#关于备考" class="headerlink" title="关于备考"></a>关于备考</h2><p>关于专升本的备考，我觉得主要有以下几方面要注意：</p><h3 id="报班or不报班"><a href="#报班or不报班" class="headerlink" title="报班or不报班"></a>报班or不报班</h3><p>这是在有专升本的想法之后第一个就应该考虑的问题，这个取决于个人。如果你的家庭根本不缺钱，那么请你直接报vip班，跟着老师学就好了，你甚至不需要浪费时间来看我这篇文章了；如果你的家庭条件一般，能够支付起几千到一万多不等的培训费用，你可以考虑报个班，培训班的老师会带着你系统地进行学习，人家老师的工作就是研究专升本考试的，所以请你不要质疑他们的专业性，当然也不是说报个班就能高枕无忧了，专升本考试决定因素还是个人的努力程度，如果你只是每天去培训班吹吹空调，那么还是别浪费那个钱了，培训班最后没考上的人，也是有的；如果你因为家庭原因或是个人选择，没有报班，也是可以的，因为我就是自学的，这篇文章就是在分享我的自学经验的，希望给你们带来帮助。</p><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><p>我是从2021年11月1号开始备考的，到今年4月22号考试，差不多就是半年。当然这是我的备考时间，到最后我觉得时间是不太够用的，没有太多的时间练卷子，所以我建议用八到十个月的时间来备考，最好不要超过一年，因为战线拖太长的话学习效率其实是不太高的。</p><p>我们学校大三下半学期是校外实习的阶段，学校会安排校外培训和顶岗实习，这段时间都是不在学校的，同时在这段时间还要准备毕设和答辩，一定要好好准备，答辩情况关系到你能不能顺利毕业，而参加专升本的一个硬性条件就是能够顺利毕业。</p><p>专升本的考试时间一般是在每年的五月中下旬，有可能根据疫情的情况进行提前或推迟，具体考试时间关注一下教育部发表的通知就知道了。</p><h3 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h3><p>专升本考试其实没有那么难的，从我做过的历年真题以及今年的考卷来看，只要抓住了基础，就没问题了。只要记住，从备考开始不放弃，坚持到最后你就是赢家。我在备考阶段，因为加了各种各样的考试相关的群嘛，到最后差不多一个多月的样子，大家就喜欢在群里讨论，今年公办又缩招了、报考人数又增加了、培训班人均200+等等之类的，确实很搞心态，考前压力是拉满了的。但是我最后还是咬牙坚持了，虽然分数不高，但也顺利上岸。</p><h3 id="政策"><a href="#政策" class="headerlink" title="政策"></a>政策</h3><p>这几年专升本的政策制度一直在慢慢调整，所以要及时了解最新的制度政策，学校的老师也会通知到大家的，下面是省教育厅之前发布的专升本考试招生调整方案</p><img src="https://img.jcxiaozhan.top/%E4%B8%93%E5%8D%87%E6%9C%AC%E4%BA%8C.jpg"><ul><li>2021年：全省统一考试时间</li><li>2022年：统一报名和缴费，统一大学英语命题</li><li>2023年：统一报名、统一大学英语和计算机基础命题</li><li>2024年：完成统一报名、统一命题、统一考试、统一评卷、统一录取</li></ul><div class="note warning flat"><p>注：到2024年，对于专升本的报名也有了限制，专业排名必须是前40%，所以每学期的期末考试也很重要了，千万不要摆烂，不然到时候连报名资格都没有。</p></div><h3 id="加分政策"><a href="#加分政策" class="headerlink" title="加分政策"></a>加分政策</h3><p>专升本的考试总成绩是由笔试成绩、平时成绩、奖励分数这样三部分组成的，笔试成绩和平时成绩都是要折算的，笔试成绩取70％，平时成绩取30％，只有奖励分数是直接加到总分上的，所以建议大家一定花时间去拿到这个奖励加分，别跟我似的，一点奖励分数都没有，我就是因为当时不了解，所以没有加以重视。</p><p>计算机三级证书加三分、省优秀毕业生加三分，这两个大家都可以去争取一下，还有一些赛事加分，软著加分之类的，工作室的同学可能会有。这些分数都是直接加在总分上的，算下来差不多加一分就比别人多考了三分的样子，<a href="https://new.qq.com/omn/20220415/20220415A01T1U00.html">四川专升本加分政策参考</a>。</p><h2 id="各科学习"><a href="#各科学习" class="headerlink" title="各科学习"></a>各科学习</h2><h3 id="高数"><a href="#高数" class="headerlink" title="高数"></a>高数</h3><p>我把高数放到第一个来讲，它的重要性不言而喻。高数是我们专升本考试中的分数大头，因为它的题型比较固定，基本上勤加练习就能在考试中拿到高分。不会高数的同学，他的卷子可能是二三十分。你如果会做，那么高数考个八九十分，是比较常见的。</p><p>上面简单讲了一下高数的重要性，那么该怎么学呢。首先是考纲的学习，你需要掌握所有考纲上的知识，才能够拿到足够高的分数。推荐B站杰哥的视频，杰哥的视频是按照四川省专升本高等数学考纲来录制的，所以挨着看就行了，<a href="https://www.bilibili.com/video/BV1Up4y1Y76a?spm_id_from=333.851.header_right.fav_list.click">传送门</a>，线代部分的知识自己去杰哥的主页找一找，都是单个视频的。杰哥的视频我推荐二刷，笔记请尽量记详细，为后面复习节省时间，A4笔记本我记了70多页。我个人呢，是普高考到大专的，而且数学基础也不算差，所以我用了三个月的时间来刷视频，记笔记，直到掌握全部知识点，高数学习中会有一小部分知识点是高中的时候学习的，杰哥讲的时候也会一笔带过，所以请职高上来的同学，有一些小点不太理解的时候，花点时间去百度一下，补一补知识点，其实也不是太复杂。</p><p>当然，只是看了视频，做了笔记了，是完全不够的，数学最重要的是刷题，每一种题型都需要反复练习才能熟练掌握，推荐B站周老师的刷题课，<a href="https://www.bilibili.com/video/BV1nv4y1f7tM/?spm_id_from=333.788.recommend_more_video.2">传送门</a>。当然，周老师那1000道题也不太够，做完了就上b站自己搜吧，题是做不完的。真题卷建议在考前一个月开始做，所有的专升本资料我都会放在文章的末尾。</p><p>我所使用的教材是天一教育的库课，其实看完杰哥的视频，这本教材基本上是不用看的了，主要就是做做它每一个单元后面那个练习题，还有就是它配套的卷子，库课题目的比真题的难度要大一些，用来检验知识点是否掌握，我认为是很合适的。</p><img src="https://img.jcxiaozhan.top/%E4%B8%93%E5%8D%87%E6%9C%AC%E4%B8%89.jpg"><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>作为一个高考英语62分，这次考了43分的英语万年学渣，我实在给不了大家什么有价值的建议，毕竟语言学科，短期内是不好补救的。</p><p>如果有和我一样的英语学渣，实在是想要我分享一点经验的话。我建议去买一本阅读书来做，然后再去背一两个作文模板。整张英语卷子，只要把阅读和作文两部分抓住了，分数也不会太难看的。你要是有时间和精力的话可以背背单词，认识的单词多，是有助于我们做题的，推荐一个APP，叫《不背单词》，各大应用平台应该都能搜得到，直接选上面的专升本单词库跟着背就行了。</p><p>还有一点就是，放宽心，大家都是大专人，就算是英语比较好的同学，他也不会好得太离谱的，就比如我的两个同学，他们英语是比我好的，至少能够做做单选，分析分析句子成分啥的，这些都是我不会的，我考英语一直都是凭感觉蒙的。但是分数下来，他们的英语也就比我高个几分、十几分的样子。</p><h3 id="计算机综合"><a href="#计算机综合" class="headerlink" title="计算机综合"></a>计算机综合</h3><p>一般的专业考的是计算机基础，就是一些电脑的基本操作之类的，三大办公软件的基本使用。这些都是有题库的，上网搜来练呗，直接刷题库，十几年都不变的题库，年年考，在我看来就是白给。</p><p>计算机专业的同学们呢，我们考的是计算机综合，100分的卷子，由50分的c语言、30分的计网、20分的数据库组成。</p><p>计算机综合在网上找不到比较系统的课程，但是它考核的知识量又比较大，所以我建议提早准备。可以先根据考纲去B站搜一搜相关视频，去百度搜一搜，简单地整理一下笔记。我们学校一般会在大三下半学期三月份左右开设线上选修课，就是专门来讲计算机综合的，记得一定要去听，老师们都是对于考纲比较了解的，所以讲解的知识会比较到位。学习完之后，再结合我下面给出的资料去刷刷题基本上就问题不大了。考试的时候记得注意把控时间，三卷合一要合理地安排答卷时间，我就是因为时间安排不当，只留了35分钟给C语言，导致后面的程序题没时间思考，丢了不该丢的分。</p><p>C语言推荐先把翁凯老师的课刷两遍，然后直接开始练题就完事，<a href="https://www.bilibili.com/video/BV19W411B7w1?spm_id_from=333.851.header_right.fav_list.click&vd_source=d6cbedbb3e249eafa593fdc79241d0c5">传送门</a>。</p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><blockquote><p>「专升本相关资料」<a href="https://www.aliyundrive.com/s/tFVrX9JwCE5">https://www.aliyundrive.com/s/tFVrX9JwCE5</a> 提取码: 1n0d</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>专升本考试的难度远远不及高考，但是也并不是像网上说的有手就行，政策方面来看，现在的专升本主要是公办缩招、民办扩招，两者之间存在学费和教育资源的差距，所以说想要考上公办院校的同学，还请你自己多努努力。</p><p>先提前祝愿你们金榜题名，然后如果说最后真的努力了，还是没考上，也请你放平心态，学历不代表一切，作为当代年轻人，我们还有很多的事情要做，我们的人生还有很多种可能。很喜欢罗翔老师的一句话，也把它分享给你们：“人都是有限的，我们只能做我们认为对的事情，并且接受它的事与愿违”。</p><p>如果对于专升本方面还有任何的疑问的话，博客主页可以加到我的QQ，我愿意花时间给你们解答。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;这篇文章是本人的专升本考试经验分享，我将会从我的角度出发尽可能详细地讲述我的专升本备考过程以及升本注意事项。这是对</summary>
      
    
    
    
    <category term="生活琐碎" scheme="https://jcxiaozhan.gitee.io/categories/%E7%94%9F%E6%B4%BB%E7%90%90%E7%A2%8E/"/>
    
    
    <category term="专升本" scheme="https://jcxiaozhan.gitee.io/tags/%E4%B8%93%E5%8D%87%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>2021年终总结</title>
    <link href="https://jcxiaozhan.gitee.io/2021/12/31/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://jcxiaozhan.gitee.io/2021/12/31/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-30T16:00:00.000Z</published>
    <updated>2022-07-03T03:17:37.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2021走到年末，年终总结也就如约而至了，2021是短暂却又丰富多彩的一年，我呢，过得不算精彩，却也不赖。</p><p>今年参加了<code>2</code>次比赛，发表了<code>10</code>篇博客文章，<code>29</code>条博客说说，<code>13</code>条空间动态，<code>9</code>条朋友圈。</p><p>今年博客文章的数量和质量都不高，明年我一定会加倍努力，会用心地输出更加优质的博客文章。</p><p>空间动态明显减少，博客说说明显增加，渐渐学会了自己消化不良情绪。</p><h2 id="历程"><a href="#历程" class="headerlink" title="历程"></a>历程</h2><h3 id="第一名"><a href="#第一名" class="headerlink" title="第一名"></a>第一名</h3><blockquote><p>在寒假期间举办的一个小型比赛取得了第一名的成绩，这个首先感谢晖哥给了我参加这次比赛的机会，其次感谢自己半个月的努力付出，最终还是有所收获。虽是小比赛，但是也足以在我空荡荡的简历上添上浓墨重彩的一笔了。</p></blockquote><h3 id="驾照"><a href="#驾照" class="headerlink" title="驾照"></a>驾照</h3><blockquote><p>个人是挺不喜欢开车的，但是驾驶的确是当下每个年轻人都应该学习掌握的基础技能。磕磕绊绊、断断续续学了一个多学期，今年3月份终于把驾照拿到手了。</p></blockquote><h3 id="软件杯"><a href="#软件杯" class="headerlink" title="软件杯"></a>软件杯</h3><blockquote><p>4月底到6月底，停课两个月备赛“第十届中国软件杯”，遗憾的是，我们团队的能力欠缺太多，到最后也没有拿出一个像样的作品，这一仗，被打得稀碎。收获就是，提前接触、学习到了框架技术还有建模技术，培养了自学能力。</p></blockquote><h3 id="剑门关"><a href="#剑门关" class="headerlink" title="剑门关"></a>剑门关</h3><blockquote><p>在广元上学待了两年，周围全是景点，我都没去过，主要还是太懒了。期末考试那两周没啥课，就和朋友去剑门关逛了一圈，它的险峻并没有像高中课本上所描述的一样让我惊叹。只是平常的生活都过得太忙碌重复了，突然走进山间小道，反倒是得到了释放，我们一路走着、跑着、唱着，很是开心。在鸟道那里看蓝天白云、俯瞰山间竹林的那一刻，我甚至是不想离开了。</p></blockquote><h3 id="学无止境"><a href="#学无止境" class="headerlink" title="学无止境"></a>学无止境</h3><blockquote><p>9月开学，我们离开了学校，到企业进行最后一阶段的学习，因为企业老师上课所讲的框架技术都是我提前接触、学习过的东西了，所以这两个月，我没有听过课。我一边查漏补缺、稳固基础，一边学习新知识，完成了两三个小项目，虽然都不太拿得出手。这短短两个月的时间里，自己的开发能力得到了显著的提升。</p></blockquote><h3 id="实习"><a href="#实习" class="headerlink" title="实习"></a>实习</h3><blockquote><p>11月，我找到了我的实习单位并入职，我找的是实施岗，突发的疫情导致项目不能及时开展，所以有大量的时间是属于自己的，从入职到现在的两个月，我按照计划，不紧不慢地复习着，为明年4月的升本考试做准备。因为岗位的关系，在公司里，我没有学习到新的技术，完成了几次领导派遣的任务，都是吃老本、依靠以前学习到的知识。就在今天，12月31日，我办理离职，决定回家备考专升本。</p></blockquote><h2 id="2022计划"><a href="#2022计划" class="headerlink" title="2022计划"></a>2022计划</h2><p>回看<a href="https://jcxiaozhan.gitee.io/2020/12/31/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/">《2020年终总结》</a>，我发现我用成篇的文字记录了我一整年的生活，却忘记了为来年制定一个简短的目标或是计划，所以我打算给明年定一个学习计划，年末逐条核对。</p><ul><li>深入学习SSM，源码分析</li><li>深入学习SpringBoot，源码分析</li><li>学习Spring Cloud，接触微服务</li><li>学习JVM课程</li><li>学习Vue课程</li><li>系统学习计网知识</li><li>学习RabbitMQ</li></ul><p>考虑到要专升本，这些专业知识的学习基本都要5月份才能开始，就不给自己挖太多坑了，学习过程我会以博客文章的形式进行记录。</p><h2 id="祝福"><a href="#祝福" class="headerlink" title="祝福"></a>祝福</h2><blockquote><p>尽管年复一年的情节有些老套，尽管禁燃之后的春节已经渐渐失去了年味。<br>我依然在这里真心地祝福身边的亲朋好友以及屏幕前的你，新的一年，身体健康，工作顺利，心想事成！！！<br>也祝愿千千万万和我一样在备战专升本的同学们，升本顺利，明年一定上岸！！！</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;2021走到年末，年终总结也就如约而至了，2021是短暂却又丰富多彩的一年，我呢，过得不算精彩，却也不赖。&lt;/p&gt;
&lt;p&gt;今年参加了&lt;cod</summary>
      
    
    
    
    <category term="生活琐碎" scheme="https://jcxiaozhan.gitee.io/categories/%E7%94%9F%E6%B4%BB%E7%90%90%E7%A2%8E/"/>
    
    
    <category term="年终总结" scheme="https://jcxiaozhan.gitee.io/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>近况</title>
    <link href="https://jcxiaozhan.gitee.io/2021/11/10/%E8%BF%91%E5%86%B5/"/>
    <id>https://jcxiaozhan.gitee.io/2021/11/10/%E8%BF%91%E5%86%B5/</id>
    <published>2021-11-09T16:00:00.000Z</published>
    <updated>2022-07-03T03:20:01.065Z</updated>
    
    <content type="html"><![CDATA[<p>上个月20号那天我参加了人生的第二个面试，boos直聘上面找到的，招一个全栈开发实习生，因为在学校写过几个项目，前后端我都写得还可以，我觉得应该能够胜任。收到面试邀请之后，我就过去了，去之前还花了整整一天时间，巩固复习了我的前端技术，就是为了到时候能和面试官侃侃而谈。到之后，我人蒙了，老板下楼接的我，我们来到一个办公室，有一张办公桌上摆了文件和电脑，那是他的办公桌，除此之外，还有四张空桌子，老板拿过我的简历，简单看了不到1分钟，开始跟我聊他的宏图大志，大概意思就是，需要开发一个款软件，所以他现在要招4个员工，嗯，后面就不用多说了吧，这是一家还在创业阶段的公司。</p><p>我的第二次面试就这样草草结束了，说实话，两次面试，我认为自己没有太多的收获，但我至少清楚了一点，像软件开发这个技术性很强的岗位，只要你技术足够到位，面试就会很轻松。从20号回来之后，我开始卷起来了了，早上7点我就起床去教室，每天下课后，在教室学到8点左右才回宿舍吃饭，吃完饭又开始学，学到十一二点的样子睡觉，第二天又重复，周末也是如此。就这样卷了5天，这5天我学完了一套springboot的课程，还顺带把ssm框架的课程又复习了一遍。</p><p>25号就业部老师说我简历过了，通知26号上午去面试，我就去了，这一次是没有任何准备的，但是我面上了，公司的评价是我的沟通能力、学习态度、踏实的性格符合他们的预期，虽然这一次面试因为岗位的原因，基本上没有涉及到技术性的问答，但是这是第一次收到offer，心里还是激动的。我面试的岗位是项目实施工程师实习，说白了，就是帮人安装部署，教他们用，我觉得是个人就能做的活。其实完全不是我心中预期的职位，我的初心就是做一个技术人员，往架构师方向发展。但是这一次因为时间的关系，我还是选择了妥协，混个实习经验，正好事情少的话可以抓一抓的专升本复习。那两天为了确保1号能按时上岗，我忙着签各种协议，办理离校，同时还要抽出时间来准备30号那天的毕业答辩，属实给我人整麻了。</p><p>30号那天的毕业答辩很顺利，晖哥和刀哥都给予了我很高的评价，告诫我，只要不断学习，我是能在这个行业干出一点成绩的，他们俩都是我大学遇到的好老师，教学技能过硬，同时还时常为我们的未来出谋划策，能被他们认可，我也很高兴！</p><p>上了一个星期班了，由于没有给我分配任务，我每天就像个闲人一样，做做华迪最后安排的小组项目，本着交任务一切从简的原则，很快，这两天马上就要完工了。因为公司附近确诊了一例，前两天我黄码了，被拉去隔离了两天，还好两次检测正常，人没事，现在这几天安排居家办公，我觉得算是因祸得福吧，毕竟每天上下班，光在路上就要花3小时，属实难受。</p><p>昨晚逛B站，看见某大佬的评论，感觉说得很好，他说，现在很多人在学习的时候很浮躁，我们这些刚学完框架就急着工作的，面试自然是地狱难度的，一问三不知。何不好好跟着学习路线，稳步向前，看源码，专研底层，学优化，当你掌握的东西多了，自然就有底气了，面试自然就能够侃侃而谈。</p><p>总的来说呢，现在的每一天我都很充实，作为一个踏入但是没有完全踏入社会的小白，我是至少弄清楚了未来一到两年里我要做的事情，我的目标很清晰、很明确，首先就是我的专升本，在这剩下不到半年的复习时间里，我要沉下心来坚持复习，准备明年5月份的考试。其次就是技术上的提升，如果将大部分时间精力投入到专升本的复习中，那么之后很长一段时间里，我应该是不会学习到什么新的技术了，所以博客应该不会怎么更新了，我也愿意拿这半年的时间，来搏这一次改变命运的机会，但是如果有空闲时间，我还是会学习一点技术的，说实话，专研技术的过程我是有感受到快乐的，因为这些都是我所热爱的！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上个月20号那天我参加了人生的第二个面试，boos直聘上面找到的，招一个全栈开发实习生，因为在学校写过几个项目，前后端我都写得还可以，我觉得应该能够胜任。收到面试邀请之后，我就过去了，去之前还花了整整一天时间，巩固复习了我的前端技术，就是为了到时候能和面试官侃侃而谈。到之后</summary>
      
    
    
    
    <category term="生活琐碎" scheme="https://jcxiaozhan.gitee.io/categories/%E7%94%9F%E6%B4%BB%E7%90%90%E7%A2%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>PageHelper的简单使用</title>
    <link href="https://jcxiaozhan.gitee.io/2021/10/18/PageHelper%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://jcxiaozhan.gitee.io/2021/10/18/PageHelper%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2021-10-17T16:00:00.000Z</published>
    <updated>2022-06-13T10:15:59.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>PageHelper是一款好用的开源免费的Mybatis第三方分页插件，<a href="https://pagehelper.github.io/">点击访问</a></p></blockquote><img src="https://img.jcxiaozhan.top/PageHelper%E4%B8%80.jpg"><h2 id="后端-SSM项目"><a href="#后端-SSM项目" class="headerlink" title="后端(SSM项目)"></a>后端(SSM项目)</h2><div class="note warning flat"><p>注：这里只给出了关键部分代码，分页操作是通过对获取到的List集合进行二次封装实现的，具体请注意看Service层与Contoller层代码，其他代码未变动，按照业务逻辑正常编写即可</p></div><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--分页--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--分页插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;plugins&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;helperDialect&quot;</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String cls;</span><br><span class="line">    <span class="keyword">private</span> String num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mapper接口"><a href="#mapper接口" class="headerlink" title="mapper接口"></a>mapper接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="comment">//查询全部Student,返回list集合</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">findStudentList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="comment">//查询全部Student,返回list集合</span></span><br><span class="line">    PageInfo <span class="title function_">findStudentList</span><span class="params">(<span class="type">int</span> pageNum,<span class="type">int</span> pageSize)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> PageInfo <span class="title function_">findStudentList</span><span class="params">(<span class="type">int</span> pageNum,<span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">    <span class="comment">// 分页语句之后紧跟的第一次查询才会分页，所以此结构最合理</span></span><br><span class="line">    PageHelper.startPage(pageNum,pageSize);</span><br><span class="line">    List&lt;Student&gt; list = studentMapper.findStudentList();</span><br><span class="line">    <span class="type">PageInfo</span> <span class="variable">pageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageInfo</span>(list);</span><br><span class="line">    <span class="keyword">return</span> pageInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/list/&#123;pageNum&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">// 前台传递两个参数，第一个参数为页码，就是你要查询第几页的数据，第二个参数是，一页几条记录</span></span><br><span class="line"><span class="keyword">public</span> PageInfo <span class="title function_">list</span><span class="params">(Model model, <span class="meta">@PathVariable</span> <span class="type">int</span> pageNum, <span class="meta">@PathVariable</span> <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">    <span class="type">PageInfo</span> <span class="variable">pageInfo</span> <span class="operator">=</span> studentService.findStudentList(pageNum,pageSize);</span><br><span class="line">    <span class="comment">// 插件将处理好后的集合封装在了PageInfo对象里面，直接返回到前端即可</span></span><br><span class="line">    <span class="keyword">return</span> pageInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PageInfo类的常见属性"><a href="#PageInfo类的常见属性" class="headerlink" title="PageInfo类的常见属性"></a>PageInfo类的常见属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageInfo</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"><span class="comment">//当前页</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> pageNum;</span><br><span class="line"><span class="comment">//每页的数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> pageSize;</span><br><span class="line"><span class="comment">//当前页的数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"><span class="comment">//由于startRow 和endRow 不常用，这里说个具体的用法</span></span><br><span class="line"><span class="comment">//可以在页面中&quot;显示startRow 到endRow 共size 条数据&quot;</span></span><br><span class="line"><span class="comment">//当前页面第一个元素在数据库中的行号</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> startRow;</span><br><span class="line"><span class="comment">//当前页面最后一个元素在数据库中的行号</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> endRow;</span><br><span class="line"><span class="comment">//总记录数</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> total;</span><br><span class="line"><span class="comment">//总页数</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> pages;</span><br><span class="line"><span class="comment">//结果集</span></span><br><span class="line"><span class="keyword">private</span> List&lt;T&gt; list;</span><br><span class="line"><span class="comment">//前一页</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> prePage;</span><br><span class="line"><span class="comment">//下一页</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> nextPage;</span><br><span class="line"><span class="comment">//是否为第一页</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isFirstPage</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//是否为最后一页</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isLastPage</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//是否有前一页</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">hasPreviousPage</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//是否有下一页</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">hasNextPage</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//导航页码数</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> navigatePages;</span><br><span class="line"><span class="comment">//所有导航页号</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] navigatepageNums;</span><br><span class="line"><span class="comment">//导航条上的第一页</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> navigateFirstPage;</span><br><span class="line"><span class="comment">//导航条上的最后一页</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> navigateLastPage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="引入资源文件"><a href="#引入资源文件" class="headerlink" title="引入资源文件"></a>引入资源文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.usebootstrap.com/bootstrap/4.4.1/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 搭建基本表结构，固定表头 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-hover table-striped&quot;</span> <span class="attr">style</span>=<span class="string">&#x27;vertical-align: middle;text-align: center;&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>班级<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;tbody&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用nav搭建基本页码结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 offset-md-9 mt-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pageNum&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Javascript部分"><a href="#Javascript部分" class="headerlink" title="Javascript部分"></a>Javascript部分</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 页面加载时默认获取第一页数据，这里是一页5条记录的分法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">getPageList</span>(<span class="number">1</span>,<span class="number">5</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 首页</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> navigateFirstPage;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 末页</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> navigateLastPage;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 当前页</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> pageNum;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 下一页</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> nextPage;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 上一页</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> prePage;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 页码集</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> navigatepageNums;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">getPageList</span>(<span class="params">pageNum,pageSize</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;查询第&quot;</span> + pageNum + <span class="string">&quot;页数据，每页&quot;</span> + pageSize + <span class="string">&quot;条&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">get</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/student/list/&quot;</span> + pageNum + <span class="string">&quot;/&quot;</span> + pageSize,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">myTable</span>(data);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;失败&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 表格渲染</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">myTable</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取后台传递过来的一些重要的对象属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 首页</span></span></span><br><span class="line"><span class="language-javascript">        navigateFirstPage = data.<span class="property">navigateFirstPage</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 末页</span></span></span><br><span class="line"><span class="language-javascript">        navigateLastPage = data.<span class="property">navigateLastPage</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 当前页</span></span></span><br><span class="line"><span class="language-javascript">        pageNum = data.<span class="property">nowPage</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 下一页</span></span></span><br><span class="line"><span class="language-javascript">        nextPage = data.<span class="property">nextPage</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 上一页</span></span></span><br><span class="line"><span class="language-javascript">        prePage = data.<span class="property">prePage</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 页码集</span></span></span><br><span class="line"><span class="language-javascript">        navigatepageNums = data.<span class="property">navigatepageNums</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 取出数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> arr = data.<span class="property">list</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 清空表格</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#tbody&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 填充表格</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 已经拿到了数据，他们封装在一个数组里面，这里我是JSP页面，所以拼接有点不一样，具体拼接请自己思考</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>; i&lt;arr.<span class="property">length</span> ;i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> html = <span class="string">&quot;&lt;tr&gt;&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;td&gt;&quot;</span> + arr[i].<span class="property">id</span> +<span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;td&gt;&quot;</span> + arr[i].<span class="property">name</span> +<span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;td&gt;&quot;</span> + arr[i].<span class="property">age</span> +<span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;td&gt;&quot;</span> + arr[i].<span class="property">sex</span> +<span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;td&gt;&quot;</span> + arr[i].<span class="property">cls</span> +<span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;td&gt;&quot;</span> + arr[i].<span class="property">num</span> +<span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;td&gt;&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;&lt;a class=&quot;btn btn-primary&quot; href=&quot;&lt;c:url value=&quot;/student/edit/&#x27;</span>+ arr[i].<span class="property">id</span> +<span class="string">&#x27;&quot; /&gt;&quot; style=&quot;margin-right: 10px&quot;&gt;修改&lt;/a&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;&lt;a class=&quot;btn btn-danger&quot; href=&quot;&lt;c:url value=&quot;/student/delete/&#x27;</span>+ arr[i].<span class="property">id</span> +<span class="string">&#x27;&quot; /&gt;&quot;&gt;删除&lt;/a&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;/tr&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 追加表格体到页面上</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#tbody&quot;</span>).<span class="title function_">append</span>(html);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 清空页数导航栏</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#pageNum&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 填充页数导航栏</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;navigatepageNums.<span class="property">length</span> ;i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            nowPage = navigatepageNums[i];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> pageNum = <span class="string">&#x27;&lt;li class=&quot;page-item&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;&lt;button class=&quot;page-link&quot; onclick=&quot;getPageList($(this).text(),5)&quot;&gt;&#x27;</span> + nowPage + <span class="string">&#x27;&lt;/button&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;/li&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> pageStart = <span class="string">&#x27;&lt;li class=&quot;page-item&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;&lt;button class=&quot;page-link&quot; onclick=&quot;getPageList(navigateFirstPage,5)&quot;&gt;首页&lt;/button&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;/li&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> pageEnd = <span class="string">&#x27;&lt;li class=&quot;page-item&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;&lt;button class=&quot;page-link&quot; onclick=&quot;getPageList(nextPage,5)&quot;&gt;下一页&lt;/button&gt;&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;/li&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(i == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                pageNum = pageStart + pageNum;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(i == navigatepageNums.<span class="property">length</span> -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                pageNum = pageNum + pageEnd;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 追加导航栏到页面上</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#pageNum&quot;</span>).<span class="title function_">append</span>(pageNum);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 为当前页面添加激活样式</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;li.page-item&quot;</span>)[data.<span class="property">pageNum</span>].<span class="property">className</span> += <span class="string">&#x27; active&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;PageHelper是一款好用的开源免费的Mybatis第三方分页插件，&lt;a href=&quot;https://page</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://jcxiaozhan.gitee.io/tags/Java/"/>
    
    <category term="Mybatis" scheme="https://jcxiaozhan.gitee.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Java注解与反射</title>
    <link href="https://jcxiaozhan.gitee.io/2021/10/05/Java%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/"/>
    <id>https://jcxiaozhan.gitee.io/2021/10/05/Java%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/</id>
    <published>2021-10-04T16:00:00.000Z</published>
    <updated>2022-06-13T04:25:00.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>概念：类加载之后，在堆内存的方法区中就生产了一个Class类型的对象，<code>一个类只有一个Class对象</code>，这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构，这个对象就像是一面镜子，透过这个镜子看到类的结构，称之为反射</p><blockquote><p>正常方式：引入需要的”包类”名称 &#x3D;&#x3D;&gt; 通过new实例化 &#x3D;&#x3D;&gt;获取实例化对象<br>反射方式：实例化对象 &#x3D;&#x3D;&gt; getClass()方法 &#x3D;&#x3D;&gt; 取得完整的”包类”名称</p></blockquote><ul><li>优点：可以实现动态创建对象和编译，体现出很大的灵活性</li><li>缺点：对性能有影响。使用反射基本上是一种解释操作，我们告诉JVM要做什么，这类操作总是慢于直接执行相同的操作<br>一个类只有一个Class对象</li></ul><img src="https://img.jcxiaozhan.top/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84%E4%B8%80.jpg"><h3 id="获取Class对象的几种方式"><a href="#获取Class对象的几种方式" class="headerlink" title="获取Class对象的几种方式"></a>获取Class对象的几种方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Studnet</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式一：通过对象获取</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> student.getClass();</span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式二：forName获取</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式三：通过类名.class获取</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Student.class;</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式四：对于基本数据类型，可以使用其包装类的TYPE属性获取</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> Integer.TYPE;</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Studnet</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="所有类型的Class对象"><a href="#所有类型的Class对象" class="headerlink" title="所有类型的Class对象"></a>所有类型的Class对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有类型的Class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Object.class; <span class="comment">//类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Comparable.class; <span class="comment">//接口</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> String[].class; <span class="comment">//一维数组</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="type">int</span>[][].class; <span class="comment">//二维数组</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c5</span> <span class="operator">=</span> Override.class; <span class="comment">//注解</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c6</span> <span class="operator">=</span> ElementType.class; <span class="comment">//枚举</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c7</span> <span class="operator">=</span> Integer.class;  <span class="comment">//基本数据类型</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c8</span> <span class="operator">=</span> <span class="keyword">void</span>.class; <span class="comment">//void</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c9</span> <span class="operator">=</span> Class.class; <span class="comment">//Class</span></span><br><span class="line"></span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">        System.out.println(c6);</span><br><span class="line">        System.out.println(c7);</span><br><span class="line">        System.out.println(c8);</span><br><span class="line">        System.out.println(c9);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Class对象获取类信息"><a href="#Class对象获取类信息" class="headerlink" title="Class对象获取类信息"></a>Class对象获取类信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Class获取类的信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(c1.getName()); <span class="comment">// 获得包名 + 类名</span></span><br><span class="line">        System.out.println(c1.getSimpleName()); <span class="comment">// 获得类名</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得类的public属性</span></span><br><span class="line">        Field[] fields = c1.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取类的所有属性</span></span><br><span class="line">        fields = c1.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取类的方法：除了类自身的方法外，还会获取所继承的类中的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        Method[] methods = c1.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">        methods = c1.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> c1.getMethod(<span class="string">&quot;getName&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setName</span> <span class="operator">=</span> c1.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        System.out.println(getName);</span><br><span class="line">        System.out.println(setName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        Constructor[] constructors = c1.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        constructors = c1.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定构造器</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">declaredConstructor</span> <span class="operator">=</span> c1.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        System.out.println(declaredConstructor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h2><img src="https://img.jcxiaozhan.top/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84%E4%BA%8C.jpg"><img src="https://img.jcxiaozhan.top/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84%E4%B8%89.jpg"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试类的初始化过程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Main类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 主动引用</span></span><br><span class="line">        <span class="comment">//Son son = new Son();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射也会产生主动引用</span></span><br><span class="line">        Class.forName(<span class="string">&quot;Son&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 被动引用不会引起类的初始化</span></span><br><span class="line">        System.out.println(Son.b);</span><br><span class="line"></span><br><span class="line">        Son[] array = <span class="keyword">new</span> <span class="title class_">Son</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">        System.out.println(Son.M);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><img src="https://img.jcxiaozhan.top/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84%E5%9B%9B.jpg"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试类的初始化过程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 获取系统类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取系统类加载器的父类加载器(扩展类加载器)</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">parent</span> <span class="operator">=</span> systemClassLoader.getParent();</span><br><span class="line">        System.out.println(parent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取扩展类加载器的父类加载器(根加载器)</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">parent1</span> <span class="operator">=</span> parent.getParent();</span><br><span class="line">        System.out.println(parent1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试当前类是哪个加载器加载的</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Test02&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试JDK内置的类是哪个加载器加载的</span></span><br><span class="line">        classLoader = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><ul><li><p>描述：某个特定的类加载器在接到加载类的请求时，首先将加载任务委托给父类加载器，依次递归，如果父类加载器可以完成类加载任务，就成功返回；只有父类加载器无法完成此加载任务时，才自己去加载。</p></li><li><p>意义：防止内存中出现多份同样的字节码</p></li></ul><h2 id="反射操作对象"><a href="#反射操作对象" class="headerlink" title="反射操作对象"></a>反射操作对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过反射，动态创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="comment">// 获得Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射构建一个对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) c1.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过构造器构建对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c1.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> (Student)constructor.newInstance(<span class="string">&quot;小明&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射直接调用方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> (Student) c1.newInstance();</span><br><span class="line">        <span class="comment">// 通过反射获取一个方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">setName</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>,String.class);</span><br><span class="line">        <span class="comment">// invoke激活获取的方法</span></span><br><span class="line">        setName.invoke(student2,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(student2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射操作属性</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">// 对于私有属性，不能直接操作，需要关闭程序的安全检测,true为关闭</span></span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(student3,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(student3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射操作泛型"><a href="#反射操作泛型" class="headerlink" title="反射操作泛型"></a>反射操作泛型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反射操作泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> Test02.class.getMethod(<span class="string">&quot;test1&quot;</span>, Map.class, List.class);</span><br><span class="line">        <span class="comment">// 获得泛型参数列表</span></span><br><span class="line">        Type[] genericParameterTypes = method.getGenericParameterTypes();</span><br><span class="line">        <span class="keyword">for</span> (Type genericParameterType : genericParameterTypes) &#123;</span><br><span class="line">            System.out.println(genericParameterType);</span><br><span class="line">            <span class="keyword">if</span> (genericParameterType <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">                <span class="comment">// 遍历参数列表内的泛型信息</span></span><br><span class="line">                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();</span><br><span class="line">                <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                    System.out.println(actualTypeArgument);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        method = Test02.class.getMethod(<span class="string">&quot;test2&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 获取泛型返回值</span></span><br><span class="line">        <span class="type">Type</span> <span class="variable">genericReturnType</span> <span class="operator">=</span> method.getGenericReturnType();</span><br><span class="line">        <span class="keyword">if</span> (genericReturnType <span class="keyword">instanceof</span>  ParameterizedType) &#123;</span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments();</span><br><span class="line">            <span class="comment">// 遍历返回值内的泛型参数</span></span><br><span class="line">            <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                System.out.println(actualTypeArgument);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(Map&lt;String,String&gt; map, List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射操作注解"><a href="#反射操作注解" class="headerlink" title="反射操作注解"></a>反射操作注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反射操作泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, ClassNotFoundException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取注解</span></span><br><span class="line">        Annotation[] annotations = c1.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定的类注解的值</span></span><br><span class="line">        <span class="type">MyAnnotation</span> <span class="variable">annotation</span> <span class="operator">=</span> (MyAnnotation) c1.getAnnotation(MyAnnotation.class);</span><br><span class="line">        System.out.println(annotation.value());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定的属性注解的值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">MyAnnotation2</span> <span class="variable">annotation1</span> <span class="operator">=</span> f.getAnnotation(MyAnnotation2.class);</span><br><span class="line">        System.out.println(annotation1.columnName());</span><br><span class="line">        System.out.println(annotation1.type());</span><br><span class="line">        System.out.println(annotation1.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation(&quot;student&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="meta">@MyAnnotation2(columnName = &quot;name&quot;,type = &quot;String&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@MyAnnotation2(columnName = &quot;age&quot;,type = &quot;int&quot;,length = 4)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2 &#123;</span><br><span class="line">    String <span class="title function_">columnName</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">type</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;反射&quot;&gt;&lt;a href=&quot;#反射&quot; class=&quot;headerlink&quot; title=&quot;反射&quot;&gt;&lt;/a&gt;反射&lt;/h2&gt;&lt;p&gt;概念：类加载之后，在堆内存的方法区中就生产了一个Class类型的对象，&lt;code&gt;一个类只有一个Class对象&lt;/code&gt;，这个对象就包含</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://jcxiaozhan.gitee.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程</title>
    <link href="https://jcxiaozhan.gitee.io/2021/10/03/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://jcxiaozhan.gitee.io/2021/10/03/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-10-02T16:00:00.000Z</published>
    <updated>2022-06-13T04:24:46.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线程、进程、多线程"><a href="#线程、进程、多线程" class="headerlink" title="线程、进程、多线程"></a>线程、进程、多线程</h2><ul><li>进程：进程是程序的一次执行过程，是一个动态的概念，是系统资源分配的单位</li><li>线程：通常在一个进程中可以包含若干个线程，一个进程中至少有一个线程，不然没有存在的意义，线程是CPU调度和执行的单位</li><li>多线程：真正的多线程是有多个CUP，同时执行，如果在只有一个CPU的情况下，同一时间只能执行一个代码，因为切换速度很快，造成了同时执行的假象</li></ul><blockquote><ol><li>线程就是独立的执行路径</li><li>在程序运行时，即使没有自己创建线程，后台也会有多个线程，如主线程、gc线程</li><li>main()称为主线程，为系统入口，用于执行整个程序</li><li>在一个线程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不可人为干预的</li><li>对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制</li><li>线程会带来额外的开销，如CPU调度时间(排队时间)，并发控制开销</li><li>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致</li></ol></blockquote><h2 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h2><h3 id="方式一：继承Thread类"><a href="#方式一：继承Thread类" class="headerlink" title="方式一：继承Thread类"></a>方式一：继承Thread类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承Thread类，重写run()方法，在run()方法体内编写业务代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在吃饭-------------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="comment">// 调用start()开启线程</span></span><br><span class="line">        test.start();</span><br><span class="line">        <span class="comment">// 由执行结果可以知道，多个线程是交替执行的，具体执行先后顺序是靠调度器调度的，无法人为干预</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span> ;i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在睡觉&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式二：继承Runnable接口实现-常用"><a href="#方式二：继承Runnable接口实现-常用" class="headerlink" title="方式二：继承Runnable接口实现(常用)"></a>方式二：继承Runnable接口实现(常用)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在吃饭-------------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span> ;i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在睡觉&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式三：继承Callable接口实现"><a href="#方式三：继承Callable接口实现" class="headerlink" title="方式三：继承Callable接口实现"></a>方式三：继承Callable接口实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承Callable接口，重写call()方法，方法体里面编写业务代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Boolean&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在吃饭-------------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建服务</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">ser</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 提交执行(开启线程)</span></span><br><span class="line">        Future&lt;Boolean&gt; result = ser.submit(test);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用get获取返回值，但是get()会阻塞线程</span></span><br><span class="line">        <span class="comment">//System.out.println(result.get());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭服务</span></span><br><span class="line">        ser.shutdownNow();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span> ;i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在睡觉&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初识并发问题"><a href="#初识并发问题" class="headerlink" title="初识并发问题"></a>初识并发问题</h2><p>并发问题：多个线程操作同时操作共享数据所导致的</p><h3 id="Demo：抢票"><a href="#Demo：抢票" class="headerlink" title="Demo：抢票"></a>Demo：抢票</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">tecikNums</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tecikNums != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    tecikNums--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;==&gt;&quot;</span> + <span class="string">&quot;拿到了第&quot;</span> + tecikNums + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    <span class="comment">// 线程休眠，模拟延时</span></span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test,<span class="string">&quot;黄牛&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test,<span class="string">&quot;小明&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test,<span class="string">&quot;小红&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Demo：龟兔赛跑"><a href="#Demo：龟兔赛跑" class="headerlink" title="Demo：龟兔赛跑"></a>Demo：龟兔赛跑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String winner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (gameOver(i)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过线程名选择对应操作</span></span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;乌龟&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 乌龟每一步都比兔子慢10毫秒</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;乌龟走了第&quot;</span> + i + <span class="string">&quot;步&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;兔子&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 兔子走到第50步的时候，模拟兔子睡觉</span></span><br><span class="line">                <span class="keyword">if</span> (i==<span class="number">50</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1700</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;兔子走了第&quot;</span> + i + <span class="string">&quot;步&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启乌龟和兔子两个线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test,<span class="string">&quot;乌龟&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test,<span class="string">&quot;兔子&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断比赛是否继续</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">gameOver</span><span class="params">(<span class="type">int</span> step)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (winner != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (step == <span class="number">100</span>) &#123;</span><br><span class="line">            winner = Thread.currentThread().getName();</span><br><span class="line">            System.out.println(<span class="string">&quot;胜利者：&quot;</span> + winner);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h2><ul><li>获取当前线程名字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.currentThread().getName()</span><br></pre></td></tr></table></figure><ul><li>线程休眠</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每个对象都有一个锁，sleep不会释放锁</span></span><br><span class="line"><span class="comment">// 休眠1秒</span></span><br><span class="line">Thread.Sleep(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><ul><li>线程礼让</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 线程礼让是让当前进程暂停，转为就绪状态，让CUP重新调度，所以礼让不一定成功，主要看CPU怎么调度</span></span><br><span class="line">Thread.yield();</span><br></pre></td></tr></table></figure><ul><li>线程强制执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用join方法会让主线程处于阻塞状态，先将线程内的内容执行完毕，再次开始执行主线程</span></span><br><span class="line"><span class="type">Demo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(demo);</span><br><span class="line">thread.join();</span><br></pre></td></tr></table></figure><ul><li>线程优先级：优先级低只是意味着获得调度的概率低，并不是优先级低就不会被调用了，还是得看调度器的调度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 线程的优先级用数字表示，范围1~10</span></span><br><span class="line">Thread.MIN_PRIORITY = <span class="number">1</span>;</span><br><span class="line">Thread.MAX_PRIORITY = <span class="number">10</span>;</span><br><span class="line">Thread.NORM_PRIORITY = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 获取线程优先级</span></span><br><span class="line"><span class="type">Demo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(demo);</span><br><span class="line">thread.getPriority();</span><br><span class="line"><span class="comment">// 设置线程优先级</span></span><br><span class="line">thread.setPriority(xxx);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程优先级的实现原理，类似于买彩票，买一张中奖概率小，那就买100张，其实这里设置优先级就是增加提供给调度器的线程数量，数量越大，就越容易被调度</span></span><br></pre></td></tr></table></figure><h2 id="Lamda表达式"><a href="#Lamda表达式" class="headerlink" title="Lamda表达式"></a>Lamda表达式</h2><p>函数式接口：只包含一个方法的接口就是函数式接口，也叫功能性接口</p><p>Lamda简化了匿名内部类，方法引用简化了lamda</p><p>基本语法：<code>接口 对象 = (参数表) -&gt; &#123;代码实现&#125;;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数式接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> i)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lamda表达式用法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lamda</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 基本写法</span></span><br><span class="line">        <span class="type">Demo</span> <span class="variable">demo01</span> <span class="operator">=</span> (<span class="type">int</span> i) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello World&quot;</span> + i);</span><br><span class="line">        &#125;;</span><br><span class="line">        demo01.test(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简化一：参数类型可省略</span></span><br><span class="line">        <span class="type">Demo</span> <span class="variable">demo02</span> <span class="operator">=</span> (i) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello World&quot;</span> + i);</span><br><span class="line">        &#125;;</span><br><span class="line">        demo02.test(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简化二：括号可省略</span></span><br><span class="line">        <span class="type">Demo</span> <span class="variable">demo03</span> <span class="operator">=</span> i -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello World&quot;</span> + i);</span><br><span class="line">        &#125;;</span><br><span class="line">        demo03.test(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简化三：如果只有一行业务代码，那么花括号可省略</span></span><br><span class="line">        <span class="type">Demo</span> <span class="variable">demo04</span> <span class="operator">=</span> i -&gt; System.out.println(<span class="string">&quot;Hello World&quot;</span> + i);</span><br><span class="line">        demo04.test(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lamda表达式在多线程中的运用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 用Lamda表达式+匿名类的方式实现了Runnable接口</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我在吃饭-------------------&quot;</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 由执行结果可以知道，多个线程是交替执行的，具体是靠CUP调度，无法人为干预</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span> ;i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在睡觉&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><img src="https://img.jcxiaozhan.top/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%80.jpg"><p>线程中断后，进入死亡状态，就不可再次启动了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>); <span class="comment">//TIMED_WAITING</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;线程终止了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(test);</span><br><span class="line"></span><br><span class="line">        Thread.<span class="type">State</span> <span class="variable">state</span> <span class="operator">=</span> thread.getState();</span><br><span class="line">        System.out.println(state); <span class="comment">//NEW</span></span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state); <span class="comment">//RUNNABLE</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只要线程不终止，就一直打印线程状态</span></span><br><span class="line">        <span class="keyword">while</span> (Thread.State.TERMINATED != state) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            state = thread.getState();</span><br><span class="line">            System.out.println(state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h3><p>JDK提供了stop()和destroy()方法来停止线程，但是这两个方法都已经废除，不推荐使用</p><p>最好的做法是，自己创建一个标志位来控制线程的停止,达到某一条件，就自动停止</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在吃饭-------------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="comment">// 调用start()开启线程</span></span><br><span class="line">        test.start();</span><br><span class="line">        <span class="comment">// 由执行结果可以知道，多个线程是交替执行的，具体是靠CUP调度，无法人为干预</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span> ;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">50</span>) &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程停止了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在睡觉&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h3><ul><li>sleep时间制定当前线程阻塞的毫秒数</li><li>sleep存在异常InterruptedException</li><li>sleep时间达到后线程进入就绪状态</li><li>sleep可以模拟网络延时，倒计时等</li><li>每一个对象都有一个锁，sleep不会释放锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h3><ul><li>线程礼让，让当前正在执行的线程暂停，但不阻塞</li><li>将线程从运行状态重新转为就绪状态，等待调度器调度</li><li>礼让不一定成功，主要还是看调度器的调度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程开始执行&quot;</span>);</span><br><span class="line">        <span class="comment">// 线程礼让</span></span><br><span class="line">        Thread.yield();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程停止执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程强制执行"><a href="#线程强制执行" class="headerlink" title="线程强制执行"></a>线程强制执行</h3><p>join合并线程，待此线程执行完成后，再执行其他线程，其他线程会阻塞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">500</span>; i++) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;插队线程正在执行&quot;</span> + i);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(test);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">50</span>) &#123;</span><br><span class="line">                <span class="comment">// 主线程执行到50的时候，插队线程开始执行，因为阻塞，一直要到插队线程执行完毕，主线程才会接着执行</span></span><br><span class="line">                thread.join();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程在执行&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p>Java提供一个线程调度器来监控处于就绪状态的所有线程，线程调度器按照优先级觉得线程执行顺序的先后，优先级低也不代表一定后执行，主要还是调度器控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最小优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MIN_PRIORITY</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 默认优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">NORM_PRIORITY</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 最大优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MAX_PRIORITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>获取、设置优先级，最好在线程开启之前进行设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(test);</span><br><span class="line"><span class="comment">// 获取</span></span><br><span class="line">thread.getPriority();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置</span></span><br><span class="line">thread.setPriority(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程开启</span></span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><ul><li>线程分为用户线程和守护线程</li><li>虚拟机必须确保用户线程执行完毕</li><li>虚拟机不用等待守护线程执行完毕</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(test);</span><br><span class="line"></span><br><span class="line">thread.setDaemon(<span class="literal">true</span>); <span class="comment">//默认为false，表示用户线程，一般创建的都为用户线程，true为守护线程</span></span><br></pre></td></tr></table></figure><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><ul><li>形成条件：队列+锁</li><li>线程同步是一种等待机制，多个需要同时访问此对象的线程进入这个对象的等待池，形成队列，前面的线程使用完毕，下一个线程再使用</li><li>由于同一进程的多个线程共享同一块存储空间，为了避免访问冲突，加入了锁机制synchronized，当一个线程获得对象的排它锁，独占资源，其他线程必须等待，使用后再释放锁</li></ul><blockquote><p>使用锁存在一些问题：</p><ol><li>一个线程持有锁会导致其他所有需要此锁的线程挂起</li><li>在多线程竞争下，加锁、释放锁会导致较多的上下文切换和调度延时，引起性能问题</li><li>一个优先级高的线程等待一个优先级低的线程时，会导致优先级倒置，引起性能问题</li></ol></blockquote><h2 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h2><ul><li><p>线程同步是依靠锁实现的，锁又分为同步方法和同步代码块两种</p></li><li><p>对于普通同步方法，锁的是当前实例对象。 如果有多个实例 那么锁的对象必然不同，就无法实现同步。</p></li><li><p>对于静态同步方法，锁的是当前类的Class对象。有多个实例 但是锁对象是相同的  可以实现同步。</p></li><li><p>对于同步代码块，锁的是Synchonized括号里的对象。对象最好是线程操作的公共资源</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步方法：多个线程时，为保证一个方法被一个线程执行时不被影响，需要锁住此方法，一般对于增删改操作才上锁，默认锁住的是当前方法的所在类的实例对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步块：写在方法中，多个对象使用同一共享资源时，为了不被影响，需要锁住此资源</span></span><br><span class="line"><span class="keyword">synchronized</span>(Obj)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lock与Synchonized功能相似，显式定义了锁，配合异常使用，一般在finally里面关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lock</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticks</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">if</span> (ticks&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;拿到了第&quot;</span> + ticks + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    ticks--;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lock</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(lock,<span class="string">&quot;线程一&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(lock,<span class="string">&quot;线程二&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(lock,<span class="string">&quot;线程三&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lock与Synchonized的区别：</p><ul><li>Lock是显式锁(手动开启与关闭)，Synchonized是隐式锁，出作用域自动关闭</li><li>Lock只有代码块锁，Synchonized有代码块锁和方法锁</li><li>Lock性能好</li><li>使用顺序：Lock &gt; 同步代码块 &gt; 同步方法</li></ul><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><img src="https://img.jcxiaozhan.top/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BA%8C.jpg"><p>简单死锁现象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="comment">// 玩具刀和玩具枪都只有一份</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Knife</span> <span class="variable">knife</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Knife</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Gun</span> <span class="variable">gun</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gun</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;小明&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (knife) &#123;</span><br><span class="line">                <span class="comment">// 小明在获得玩具枪的同时，还想去获取玩具刀，但是玩具刀在小黄那里，无法获取，于是小明就等待，小黄也在等待小明使用完玩具枪这个资源，两个线程互相等待，就形成了死锁现象</span></span><br><span class="line">                System.out.println(<span class="string">&quot;小明得到了玩具枪&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (gun) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;小明得到了玩具刀&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (gun) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小黄得到了玩具刀&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (knife) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;小明得到了玩具刀&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(test,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(test,<span class="string">&quot;小黄&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刀</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Knife</span>  &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枪</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Gun</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决：在抱有资源的情况下，尽量不要去抢夺资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="comment">// 玩具刀和玩具枪都只有一份</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Knife</span> <span class="variable">knife</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Knife</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Gun</span> <span class="variable">gun</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gun</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;小明&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 这一次，小黄和小明都在资源使用完成后再访问别的资源，所以避免了死锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (knife) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小明得到了玩具枪&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (gun) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小明得到了玩具刀&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (gun) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小黄得到了玩具刀&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (knife) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小明得到了玩具刀&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(test,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(test,<span class="string">&quot;小黄&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刀</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Knife</span>  &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枪</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Gun</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程通信——生成者与消费者关系问题"><a href="#线程通信——生成者与消费者关系问题" class="headerlink" title="线程通信——生成者与消费者关系问题"></a>线程通信——生成者与消费者关系问题</h2><img src="https://img.jcxiaozhan.top/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%89.jpg"><h3 id="管程法"><a href="#管程法" class="headerlink" title="管程法"></a>管程法</h3><p>利用一个缓冲区来解决问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SynContainer</span> <span class="variable">container</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynContainer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Productor</span>(container).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Consumer</span>(container).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Productor</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="comment">// 获取容器</span></span><br><span class="line">    SynContainer container;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法传入容器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Productor</span><span class="params">(SynContainer container)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产者的线程操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;生产了第&quot;</span> + (i+<span class="number">1</span>) + <span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">                container.push(<span class="keyword">new</span> <span class="title class_">Chicken</span>(i+<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Consumer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(SynContainer container)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消费了第&quot;</span> + container.pop().getId() + <span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chicken</span> &#123;</span><br><span class="line">    <span class="comment">// 产品编号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Chicken</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓冲区</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SynContainer</span> &#123;</span><br><span class="line">    <span class="comment">// 容器大小</span></span><br><span class="line">    <span class="keyword">static</span> Chicken[] chickens = <span class="keyword">new</span> <span class="title class_">Chicken</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">// 计数器</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产者放入商品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Chicken chicken)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (count == chickens.length) &#123;</span><br><span class="line">            <span class="comment">// 容器满了，生产者停止生产，等待消费者消费</span></span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 容器没满，放入产品到容器</span></span><br><span class="line">        chickens[count] = chicken;</span><br><span class="line">        count++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以通知消费者消费</span></span><br><span class="line">        <span class="built_in">this</span>.notify();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Chicken <span class="title function_">pop</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 判断是否能消费</span></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 容器为空，停止消费，等待生产者生产</span></span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 容器不为空，从容器拿出产品</span></span><br><span class="line">        count--;</span><br><span class="line">        <span class="type">Chicken</span> <span class="variable">chicken</span> <span class="operator">=</span> chickens[count];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以通知消费者消费</span></span><br><span class="line">        <span class="built_in">this</span>.notify();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chicken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="信号灯法"><a href="#信号灯法" class="headerlink" title="信号灯法"></a>信号灯法</h3><p>利用一个标识符来解决问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Process</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Productor</span>(process).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Consumer</span>(process).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Productor</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    Process process;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法传入容器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Productor</span><span class="params">(Process process)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.process = process;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产者的线程操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.process.push(<span class="keyword">new</span> <span class="title class_">Chicken</span>(i+<span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Consumer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    Process process;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法传入容器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(Process process)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.process = process;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费者的线程操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                process.pop();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chicken</span> &#123;</span><br><span class="line">    <span class="comment">// 产品编号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Chicken</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Chicken</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;鸡，id为&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过程</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Process</span> &#123;</span><br><span class="line">    Chicken chicken;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标识符  true时消费者等待  false时生产者等待</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产过程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Chicken chicken)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;生产了&quot;</span> + chicken);</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">        <span class="built_in">this</span>.chicken = chicken;</span><br><span class="line">        <span class="built_in">this</span>.flag = !<span class="built_in">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费过程</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;消费了&quot;</span> + chicken);</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">        <span class="built_in">this</span>.flag = !<span class="built_in">this</span>.flag;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建服务，创建线程池，参数为线程池大小</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.执行</span></span><br><span class="line">service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.关闭连接</span></span><br><span class="line">service.shutdown();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;线程、进程、多线程&quot;&gt;&lt;a href=&quot;#线程、进程、多线程&quot; class=&quot;headerlink&quot; title=&quot;线程、进程、多线程&quot;&gt;&lt;/a&gt;线程、进程、多线程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;进程：进程是程序的一次执行过程，是一个动态的概念，是系统资源分配的单位&lt;</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://jcxiaozhan.gitee.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaIO流</title>
    <link href="https://jcxiaozhan.gitee.io/2021/09/26/JavaIO%E6%B5%81/"/>
    <id>https://jcxiaozhan.gitee.io/2021/09/26/JavaIO%E6%B5%81/</id>
    <published>2021-09-25T16:00:00.000Z</published>
    <updated>2022-06-13T04:24:34.011Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-x2F-O流"><a href="#I-x2F-O流" class="headerlink" title="I&#x2F;O流"></a>I&#x2F;O流</h2><p>概念：内存与存储设备之间传输数据的通道</p><img src="https://img.jcxiaozhan.top/JavaIO%E6%B5%81%E4%B8%80.jpg"><h2 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h2><h3 id="按方向"><a href="#按方向" class="headerlink" title="按方向"></a>按方向</h3><ul><li>输入流：将<code>存储设备</code>中的内容读到<code>内存</code>中</li><li>输出流：将<code>内存</code>中的内容写到<code>存储设备</code>中</li></ul><h3 id="按单位"><a href="#按单位" class="headerlink" title="按单位"></a>按单位</h3><ul><li>字节流：以字节为单位，可以读写所有数据</li><li>字符流：以字符为单位，只能读写文本数据</li></ul><h3 id="按功能"><a href="#按功能" class="headerlink" title="按功能"></a>按功能</h3><ul><li>节点流：具有实际传输数据的读写功能</li><li>过滤流：在节点流的基础之上增强功能</li></ul><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p>字节流的两个超类：<code>InputStream</code>和<code>OutputStream</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//InputStream字节输入流</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span>[] b)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OutputStream字节输出流</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> n)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="文件字节流"><a href="#文件字节流" class="headerlink" title="文件字节流"></a>文件字节流</h3><p>文件字节输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建FileInputStream</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;e:\\hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    <span class="comment">// fis.read();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单字节读取</span></span><br><span class="line">    <span class="comment">// 返回读取字节的ASCII码，读不到则返回-1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((data = fis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println((<span class="type">char</span>)data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用数组一次读取多个字节</span></span><br><span class="line">    <span class="comment">// 创建大小为3的数组，将数组传入read就会3个3个地进行读取</span></span><br><span class="line">    <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="comment">// 返回读取的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> fis.read(buf);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf));</span><br><span class="line">    System.out.println(count);</span><br><span class="line">    <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> fis.read(buf);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf));</span><br><span class="line">    System.out.println(count2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上述优化后</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((count = fis.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, count));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭流</span></span><br><span class="line">    fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件字节输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建FileOutputStream</span></span><br><span class="line">    <span class="comment">// 构造时只填写路径的话，默认每次写出都覆盖源文件(从流开启到关闭，算一次)，第二个参数添加true，表示追加输出</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:\\hello.txt&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写出文件</span></span><br><span class="line">    <span class="comment">// 单个字符的写出</span></span><br><span class="line">    fos.write(<span class="number">97</span>);</span><br><span class="line">    fos.write(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串的写出</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    fos.write(string.getBytes());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    fos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片复制Demo"><a href="#图片复制Demo" class="headerlink" title="图片复制Demo"></a>图片复制Demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建FileInputStream</span></span><br><span class="line">    <span class="comment">// 文件字节输入流</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;e://aaa.jpg&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建FileOutputStream</span></span><br><span class="line">    <span class="comment">// 文件字节输出流</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e://bbb.jpg&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 边读边写</span></span><br><span class="line">    <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((count = fis.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        fos.write(buf, <span class="number">0</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭流</span></span><br><span class="line">    fis.close();</span><br><span class="line">    fos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h3><p>字节缓冲流：<code>BufferedInputStream</code>和<code>BufferedOutputStream</code></p><ul><li>提高IO效率，减少访问磁盘次数</li><li>数据存储在缓冲区中，flush是将缓冲区的内容写出到文件中，也可以直接close</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建BufferedInputStream</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;e:\\hello.txt&quot;</span>);</span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((data = bis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println((<span class="type">char</span>)data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自己创建的缓冲区(在缓冲流里面再使用自己创建的缓冲区，会极大提升效率)</span></span><br><span class="line">    <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((count = bis.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, count));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    <span class="comment">// 缓冲流在关闭的时候会自动关闭字节流</span></span><br><span class="line">    bis.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建BufferedOutputStream</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:\\hello.txt&quot;</span>);</span><br><span class="line">    <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写出文件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">        <span class="comment">// 写入8k缓冲区</span></span><br><span class="line">        bos.write(<span class="string">&quot;hello&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">// 从缓冲区强制写出</span></span><br><span class="line">        bos.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    bos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><p>对象流：<code>ObjectOutputStream</code>和<code>ObjectInputStream</code></p><ul><li>增强了缓冲区功能</li><li>增强了读写8种基本数据类型和字符串的功能</li><li>增强了读写对象的功能</li></ul><p>使用流传输对象的过程称为序列化、反序列化</p><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><p>序列化：使用流将对象存储到硬盘上称为序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建对象流</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:\\student.bin&quot;</span>);</span><br><span class="line">    <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化（写出操作）</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">zhangsan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    oos.writeObject(zhangsan);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    oos.close();</span><br><span class="line">    System.out.println(<span class="string">&quot;序列化完成&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化：使用流将对象从硬盘上读取出来的过程称为反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建对象流</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;e:\\student.bin&quot;</span>);</span><br><span class="line">    <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件（反序列化）</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student)ois.readObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    ois.close();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;反序列化完成&quot;</span>);</span><br><span class="line">    System.out.println(s.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>某个类要想序列化必须实现Serializable接口</li><li>在将要序列化的类中通常添加<code>private static  final long serialVersionUID = 100L;</code>属性，作为序列化版本号ID，保证序列化的类和反序列化的类是同一个类</li><li>使用transient修饰属性，这个属性就不能序列化</li><li>静态属性不能序列化</li><li>序列化多个对象，可以借助集合来实现</li></ul><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>字符流的两个超类：<code>Reader</code>和<code>Writer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reader字符输入流</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">char</span>[] c)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">char</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Writer字符输出流</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> n)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String str)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">char</span>[] c)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="文件字符流"><a href="#文件字符流" class="headerlink" title="文件字符流"></a>文件字符流</h3><p>文件字符输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// 创建FileReader</span></span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;e:\\hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    <span class="comment">// 单个字符读取</span></span><br><span class="line">    <span class="comment">// 返回读取字符的ASCII码，读不到则返回-1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((data = fr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.print((<span class="type">char</span>)data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用数组一次读取多个字节</span></span><br><span class="line">    <span class="comment">// 创建大小为2的数组，将数组传入read()方法中就会2个2个地进行读取</span></span><br><span class="line">    <span class="type">char</span>[] buf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((count = fr.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, count));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 关闭流</span></span><br><span class="line">    fr.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件字符输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 创建FileWriter对象</span></span><br><span class="line">    <span class="comment">// 构造时只填写路径的话，默认每次写出都覆盖源文件(从流开启到关闭，算一次写出)，第二个参数添加true，表示追加输出</span></span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;e:\\hello.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 写出文件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">        fw.write(<span class="string">&quot;这里写一些内容进去&quot;</span>);</span><br><span class="line">        <span class="comment">// 缓存区要堆积满了才会一次性写出，在文件极小的情况下可能会存在不写出的问题，所以最好手动调用flush()方法，每次都强制写出</span></span><br><span class="line">        fw.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 关闭</span></span><br><span class="line">    fw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h3><p>字符缓冲流：<code>BufferedReade</code>r和<code>BufferedWirter</code></p><ul><li>高效读写、支持输入换行符、可一次写一行读一行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建缓冲流</span></span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;e:\\hello.txt&quot;</span>);</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取</span></span><br><span class="line">    <span class="comment">// 第一种方式</span></span><br><span class="line">    <span class="type">char</span>[] buf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((count = br.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, count));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二种方式 一行一行读取</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>((line = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    br.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建BufferedWriter</span></span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;e:\\hello.txt&quot;</span>);</span><br><span class="line">    <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fw);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写出文件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">        bw.write(<span class="string">&quot;写出的内容&quot;</span>);</span><br><span class="line">        <span class="comment">// 写一个换行符</span></span><br><span class="line">        bw.newLine();</span><br><span class="line">        <span class="comment">// 从缓冲区强制写出</span></span><br><span class="line">        bw.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    <span class="comment">// 缓冲流在关闭的时候会自动关闭字节流</span></span><br><span class="line">    bw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PrintWriter"><a href="#PrintWriter" class="headerlink" title="PrintWriter"></a>PrintWriter</h3><p>封装了print() &#x2F; println() 方法 支持写出后换行<br>支持数据原样打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    <span class="comment">// 1 创建打印流</span></span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="string">&quot;e:\\hello.txt&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2 打印</span></span><br><span class="line">    pw.println(<span class="number">12</span>);</span><br><span class="line">    pw.println(<span class="literal">true</span>);</span><br><span class="line">    pw.println(<span class="number">3.14</span>);</span><br><span class="line">    pw.println(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3 关闭</span></span><br><span class="line">    pw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="桥转换流"><a href="#桥转换流" class="headerlink" title="桥转换流"></a>桥转换流</h3><p>桥转换流：<code>InputStreamReader</code>和<code>OutputStreamWriter</code></p><ul><li>可将字节流转换为字符流</li><li>可设置字符的编码方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建InputStreamReader</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;e:\\hello.txt&quot;</span>);</span><br><span class="line">    <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis, <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((data = isr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println((<span class="type">char</span>)data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    isr.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建OutputStreamReader</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:\\hello.txt&quot;</span>);</span><br><span class="line">    <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fos,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写出文件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">        osw.write(<span class="string">&quot;所写内容&quot;</span>);</span><br><span class="line">        osw.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    osw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p>概念：代表物理盘符中的一个文件或文件夹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    separator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分隔符</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">separator</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;路径分隔符&quot;</span> + File.pathSeparator);</span><br><span class="line">    System.out.println(<span class="string">&quot;名称分隔符&quot;</span> + File.separator);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 文件操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fileOpen</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建文件</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123; <span class="comment">// 是否存在</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> file.createNewFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除文件</span></span><br><span class="line">    <span class="comment">// 直接删除</span></span><br><span class="line">    file.delete(); <span class="comment">// 成功true</span></span><br><span class="line">    <span class="comment">// 使用jvm退出时删除</span></span><br><span class="line">    file.deleteOnExit();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取文件信息</span></span><br><span class="line">    System.out.println(<span class="string">&quot;获取绝对路径&quot;</span> + file.getAbsolutePath());</span><br><span class="line">    System.out.println(<span class="string">&quot;获取路径&quot;</span> + file.getPath());</span><br><span class="line">    System.out.println(<span class="string">&quot;获取文件名称&quot;</span> + file.getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;获取夫目录&quot;</span> + file.getParent());</span><br><span class="line">    System.out.println(<span class="string">&quot;获取文件长度&quot;</span> + file.length());</span><br><span class="line">    System.out.println(<span class="string">&quot;文件创建时间&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>(file.lastModified()).toLocaleString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断</span></span><br><span class="line">    System.out.println(<span class="string">&quot;是否可写&quot;</span> + file.canWrite());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否是文件&quot;</span> + file.isFile());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否隐藏&quot;</span> + file.isHidden());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件夹操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">directoryOpe</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">// 创建文件夹</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">    System.out.println(dir.toString());</span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">        <span class="comment">//dir.mkdir(); // 只能创建单级目录</span></span><br><span class="line">        dir.mkdirs(); <span class="comment">// 创建多级目录</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除文件夹</span></span><br><span class="line">    <span class="comment">// 直接删除</span></span><br><span class="line">    dir.delete(); <span class="comment">// 只能删除最底层空目录</span></span><br><span class="line">    <span class="comment">// 使用jvm删除</span></span><br><span class="line">    dir.deleteOnExit();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取文件夹信息</span></span><br><span class="line">    System.out.println(<span class="string">&quot;获取绝对路径&quot;</span> + dir.getAbsolutePath());</span><br><span class="line">    System.out.println(<span class="string">&quot;获取路径&quot;</span> + dir.getPath());</span><br><span class="line">    System.out.println(<span class="string">&quot;获取文件名称&quot;</span> + dir.getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;获取夫目录&quot;</span> + dir.getParent());</span><br><span class="line">    System.out.println(<span class="string">&quot;获取文件长度&quot;</span> + dir.length());</span><br><span class="line">    System.out.println(<span class="string">&quot;文件夹创建时间&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>(dir.lastModified()).toLocaleString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断</span></span><br><span class="line">    System.out.println(<span class="string">&quot;是否是文件夹&quot;</span> + dir.isFile());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否隐藏&quot;</span> + dir.isHidden());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历文件夹</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">dir2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">    String[] files = dir2.list();</span><br><span class="line">    <span class="keyword">for</span>(String string : files)&#123;</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// FileFilter接口的使用</span></span><br><span class="line">    File[] files2 = dir2.listFiles(<span class="keyword">new</span> <span class="title class_">FileFilter</span>()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File pathname)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(pathname.getName().endsWith(<span class="string">&quot;.jpg&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(File file : files2)&#123;</span><br><span class="line">        System.out.println(file.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归遍历文件夹"><a href="#递归遍历文件夹" class="headerlink" title="递归遍历文件夹"></a>递归遍历文件夹</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    listDir(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\myfiles&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">listDir</span><span class="params">(File dir)</span>&#123;</span><br><span class="line">    File[] files = dir.listFiles();</span><br><span class="line">    System.out.println(dir.getAbsolutePath());</span><br><span class="line">    <span class="keyword">if</span>(files != <span class="literal">null</span> &amp;&amp; files.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(File file : files)&#123;</span><br><span class="line">            <span class="keyword">if</span>(file.isDirectory())&#123;</span><br><span class="line">                <span class="comment">// 递归</span></span><br><span class="line">                listDir(file);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(file.getAbsolutePath());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归删除文件夹"><a href="#递归删除文件夹" class="headerlink" title="递归删除文件夹"></a>递归删除文件夹</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteDir</span><span class="params">(File dir)</span>&#123;</span><br><span class="line">    File[] files = dir.listFiles();</span><br><span class="line">    <span class="keyword">if</span>(files != <span class="literal">null</span> &amp;&amp; files.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(File file : files)&#123;</span><br><span class="line">            <span class="keyword">if</span>(file.isDirectory())&#123;</span><br><span class="line">                <span class="comment">// 递归</span></span><br><span class="line">                deleteDir(file);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 删除文件</span></span><br><span class="line">                System.out.println(file.getAbsolutePath() + <span class="string">&quot;删除&quot;</span> + file.delete());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.创建</span></span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.添加数据</span></span><br><span class="line">    properties.setProperty(<span class="string">&quot;driver&quot;</span>,<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    properties.setProperty(<span class="string">&quot;url&quot;</span>,<span class="string">&quot;jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;amp;amp;useUnicode=true&amp;amp;amp;characterEncoding=utf8&quot;</span>);</span><br><span class="line">    properties.setProperty(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    properties.setProperty(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;lishuang001219&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.遍历</span></span><br><span class="line">    Set&lt;String&gt; proNames = properties.stringPropertyNames();</span><br><span class="line">    <span class="keyword">for</span> (String pro : proNames) &#123;</span><br><span class="line">        System.out.println(pro + <span class="string">&quot;=&quot;</span> + properties.getProperty(pro));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.和流相关的方法</span></span><br><span class="line">    <span class="comment">// list方法</span></span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="string">&quot;e:\\db.properties&quot;</span>);</span><br><span class="line">    properties.list(pw);</span><br><span class="line">    pw.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// store方法 保存</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:\\db.properties&quot;</span>);</span><br><span class="line">    properties.store(fos,<span class="string">&quot;注释&quot;</span>);</span><br><span class="line">    fos.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// load方法 加载</span></span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;e:\\db.properties&quot;</span>);</span><br><span class="line">    properties1.load(fis);</span><br><span class="line">    fis.close();</span><br><span class="line">    System.out.println(properties1.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流的关闭"><a href="#流的关闭" class="headerlink" title="流的关闭"></a>流的关闭</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将流定义在try括号里,它会自动关闭</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f)) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在finally里面关闭流,需要将fis定义在try外面</span></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != fis) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;I-x2F-O流&quot;&gt;&lt;a href=&quot;#I-x2F-O流&quot; class=&quot;headerlink&quot; title=&quot;I&amp;#x2F;O流&quot;&gt;&lt;/a&gt;I&amp;#x2F;O流&lt;/h2&gt;&lt;p&gt;概念：内存与存储设备之间传输数据的通道&lt;/p&gt;
&lt;img src=&quot;https://im</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://jcxiaozhan.gitee.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java集合</title>
    <link href="https://jcxiaozhan.gitee.io/2021/09/23/Java%E9%9B%86%E5%90%88/"/>
    <id>https://jcxiaozhan.gitee.io/2021/09/23/Java%E9%9B%86%E5%90%88/</id>
    <published>2021-09-22T16:00:00.000Z</published>
    <updated>2022-06-13T04:24:53.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>概念：对象的容器，定义了对多个对象进行操作的常用方法，可实现数组的功能</p><p>所有集合类都位于<code>java.util</code>包下，Java的集合类主要由两个接口派生而出，Collection和Map，Collection和Map是Java集合框架的根接口，这两个接口又包含了一些子接口或实现类。</p><p>集合与数组区别:</p><ol><li>数组长度固定，集合长度不固定</li><li>数组可以存储基本类型和引用类型，集合只能存储引用类型</li></ol><h2 id="Collection体系集合"><a href="#Collection体系集合" class="headerlink" title="Collection体系集合"></a>Collection体系集合</h2><img src="https://img.jcxiaozhan.top/Java%E9%9B%86%E5%90%88%E4%B8%80.jpg"><h2 id="Collection父接口"><a href="#Collection父接口" class="headerlink" title="Collection父接口"></a>Collection父接口</h2><p>特点：代表一组任意类型的对象，无序、无下标、不能重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建集合</span></span><br><span class="line">    <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    collection.add(<span class="string">&quot;苹果&quot;</span>);        </span><br><span class="line">    collection.add(<span class="string">&quot;香蕉&quot;</span>);        </span><br><span class="line">    collection.add(<span class="string">&quot;梨子&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除元素</span></span><br><span class="line">    collection.remove(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空集合</span></span><br><span class="line">    collection.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历(无下标，所以循环遍历时只能使用增强for循环)</span></span><br><span class="line">    <span class="keyword">for</span>(Object obj : collection) &#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用迭代器遍历   </span></span><br><span class="line">    <span class="comment">// 删除当前元素</span></span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> collection.iterator();</span><br><span class="line">    <span class="comment">// 判断有没有下一个元素</span></span><br><span class="line">    <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">        <span class="comment">// 获取元素</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> it.next();</span><br><span class="line">        <span class="comment">// 移除当前元素</span></span><br><span class="line">        <span class="comment">// 使用collection.remove()会报并发修改异常</span></span><br><span class="line">        it.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断集合是否存在指定元素</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result1</span> <span class="operator">=</span> collection.contains(<span class="string">&quot;梨子&quot;</span>);</span><br><span class="line">    <span class="comment">// 判断集合是否为空</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result2</span> <span class="operator">=</span> collection.inEmpty();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取集合元素个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> collection.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Set和List的区别"><a href="#Set和List的区别" class="headerlink" title="Set和List的区别"></a>Set和List的区别</h2><ol><li>Set接口存储的是无序、无下标、不重复的数据。List接口存储的是有序的、有下标、可以重复的元素</li><li>Set检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变，实现类有HashSet,TreeSet</li><li>List和数组类似，可以动态增长，根据实际存储的数据的长度自动增长List的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变，实现类有ArrayList,LinkedList,Vector</li></ol><h2 id="List子接口"><a href="#List子接口" class="headerlink" title="List子接口"></a>List子接口</h2><p>特点：有序、有下标、元素可重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建集合</span></span><br><span class="line">    <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    list.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;梨子&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除元素</span></span><br><span class="line">    list.remove(<span class="string">&quot;梨子&quot;</span>);</span><br><span class="line">    <span class="comment">// 使用索引删除</span></span><br><span class="line">    list.remove(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    <span class="comment">// 使用for循环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i= <span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">        System.out.println(list.get(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用增强for循环</span></span><br><span class="line">    <span class="keyword">for</span>(Object obj : list) &#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用迭代器遍历</span></span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> list.iterator();</span><br><span class="line">    <span class="comment">// 判断有没有下一个元素</span></span><br><span class="line">    <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">        <span class="comment">// 获取元素</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> it.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除当前元素</span></span><br><span class="line">        <span class="comment">// 如果使用list.remove()会报并发修改异常</span></span><br><span class="line">        it.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用列表迭代器，列表迭代器可以从前向后遍历，也可以从后向前遍历</span></span><br><span class="line">    <span class="comment">// 创建迭代器</span></span><br><span class="line">    <span class="type">ListIterator</span> <span class="variable">it1</span> <span class="operator">=</span> list.listIterator();</span><br><span class="line">    <span class="comment">// 从前向后遍历</span></span><br><span class="line">    <span class="keyword">while</span>(it1.hasNext())&#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从后向前遍历(因为是同一个迭代器，在上一次遍历之后，迭代器已经指向了集合末尾，所以这里可以直接开始向前遍历)</span></span><br><span class="line">    <span class="keyword">while</span>(it1.hasNext())&#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取元素出现位置</span></span><br><span class="line">    System.out.println(list.indexOf(<span class="string">&quot;香蕉&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// List集合添加整数元素(自动装箱)</span></span><br><span class="line">    list.add(<span class="number">10</span>);</span><br><span class="line">    list.add(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除List中的整数元素，直接传入整数，会被当做下标，所以这里通过获取下标，用下标来进行删除</span></span><br><span class="line">    list.remove(list.indexOf(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回子集合，取头不取尾</span></span><br><span class="line">    <span class="type">List</span> <span class="variable">subList</span> <span class="operator">=</span> list.subList(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 集合转换为数组</span></span><br><span class="line">    String[] array =<span class="keyword">new</span> <span class="title class_">String</span>[list.size()];</span><br><span class="line">    list.toArray(array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List实现类"><a href="#List实现类" class="headerlink" title="List实现类"></a>List实现类</h2><ol><li>ArrayList：数组结构实现，必须要连续空间，查询快，增删慢，运行效率快，线程不安全</li><li>Vector：数组结构实现，查询快，增删慢，运行效率慢，线程安全</li><li>LinkedList：双向链表结构实现，增删快，查询慢</li></ol><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>源码分析：</p><ul><li>如果没有向集合中添加任何元素时，容量0，添加一个后，容量为10</li><li>首次添加元素时，ArrayList会进行第一次扩容，之后每当判断到容量不够时，就会扩容，每次扩容是原来的1.5倍</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个空数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际元素个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 存放元素的数组</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData; </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造方法，将空数组赋值给存放元素的数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);</span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateCapacity</span><span class="params">(Object[] elementData, <span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩容</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// 复制出一个新的数组，覆盖原数组</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>添加、删除、判断都与List子接口相同，遍历使用枚举器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Vector</span> <span class="variable">vector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vector</span>();</span><br><span class="line"><span class="type">Enumeration</span> <span class="variable">en</span> <span class="operator">=</span> vector.elements();</span><br><span class="line"><span class="keyword">while</span>(en.hasMoreElements())&#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">o</span> <span class="operator">=</span> (String)en.nextElement();</span><br><span class="line">  System.out.println(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>常用方法都与List子接口相同<br>源码分析：</p><ul><li>首次添加元素之后，first以及last都会指向第一个节点</li><li>之后每次添加元素，first始终指向第一个节点，last会指向当前节点</li><li>每个节点中的next属性存储下一个节点，prev属性存储上一个节点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 集合大小，初始为0</span></span><br><span class="line"><span class="keyword">transient</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指向集合第一个元素，初始为null</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指向集合最后一个元素，初始为null</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合中的一个节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    E item;</span><br><span class="line">    <span class="comment">// 下一个节点</span></span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    <span class="comment">// 上一个节点</span></span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = element;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">        <span class="built_in">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Set子接口"><a href="#Set子接口" class="headerlink" title="Set子接口"></a>Set子接口</h2><p>特点：无序、无下标、元素不可重复<br>方法：全部继承自Collection父接口中的方法，添加、删除、遍历、判断与collection父接口中一致</p><h2 id="Set实现类"><a href="#Set实现类" class="headerlink" title="Set实现类"></a>Set实现类</h2><ol><li>HashSet：基于HashCode计算元素存放位置，当在同一个位置存入的两个元素哈希码相同时，会调用equals再次进行确认，对比两个元素的内存地址，如果也为true，则判定为同一个元素，拒绝后者存入，如果为false，说明不是同一个元素，则在此位置形成链表</li><li>TreeSet：基于排列顺序实现元素不重复，实现了SortedSet接口，对集合元素自动排序，元素对象的类型必须实现Comparable接口，指定排序规则，通过CompareTo方法确定是否为重复元素</li></ol><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>存储结构：哈希表(数组+链表+红黑树)</p><p>重写hashCode()和equals()方法，可以自定义hash的计算规则，从而改变结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) o;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (age != user.age) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> name != <span class="literal">null</span> ? name.equals(user.name) : user.name == <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> name != <span class="literal">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 使用31这个质数，减少散列冲突</span></span><br><span class="line">    result = <span class="number">31</span> * result + age;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建集合</span></span><br><span class="line">    HashSet&lt;String&gt; hashSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    hashSet.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">    hashSet.add(<span class="string">&quot;梨子&quot;</span>);</span><br><span class="line">    hashSet.add(<span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除元素</span></span><br><span class="line">    hashSet.remove(<span class="string">&quot;梨子&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    <span class="comment">// 使用增强for循环</span></span><br><span class="line">    <span class="keyword">for</span>(Object obj : hashSet) &#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用迭代器遍历</span></span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> hashSet.iterator();</span><br><span class="line">    <span class="comment">// 判断有没有下一个元素</span></span><br><span class="line">    <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">        <span class="comment">// 获取元素</span></span><br><span class="line">        System.out.println(it.next());</span><br><span class="line">        <span class="comment">// 删除当前元素</span></span><br><span class="line">        <span class="comment">// 使用hashSet.remove()会报并发修改异常</span></span><br><span class="line">        it.remove();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(hashSet.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>存储结构：红黑树<br>要求：使用TreeSet存储引用类型数据时，元素需要要实现Comparable接口，重写compareTo()方法，方法返回值为0，认为是重复元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//重写compareTo方法，这里我们的逻辑是先按照姓名比较，然后再按照年龄比较</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="built_in">this</span>.getName().compareTo(o.getName());</span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="built_in">this</span>.age - o.getAge();</span><br><span class="line">        <span class="keyword">return</span> n1==<span class="number">0</span>? n2: n1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeSet&lt;Student&gt; treeSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">        treeSet.add(stu1);</span><br><span class="line">        treeSet.add(stu2);</span><br><span class="line">        treeSet.add(stu3);</span><br><span class="line">        </span><br><span class="line">        System.out.println(treeSet.size());</span><br><span class="line">        System.out.println(treeSet.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以不继承Comparable接口，使用比较器，在创建集合的同时，指定比较规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TreeSet&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student stu1, Student stu2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> stu1.getName().compareTo(stu2.getName());</span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> stu1.getAge() - stu2.getAge();</span><br><span class="line">        <span class="type">return</span> <span class="variable">n1</span> <span class="operator">=</span>= <span class="number">0</span>? n2: n1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Map体系集合"><a href="#Map体系集合" class="headerlink" title="Map体系集合"></a>Map体系集合</h2><img src="https://img.jcxiaozhan.top/Java%E9%9B%86%E5%90%88%E4%BA%8C.jpg"><h2 id="Map父接口"><a href="#Map父接口" class="headerlink" title="Map父接口"></a>Map父接口</h2><p>特点：</p><ul><li>用于存储任意键值对(key - value)</li><li>键：无序、无下标、不允许重复(唯一)</li><li>值：无序、无下标、允许重复</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建Map集合</span></span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 添加元素</span></span><br><span class="line">    map.put(<span class="string">&quot;cn&quot;</span>, <span class="string">&quot;中国&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;uk&quot;</span>, <span class="string">&quot;英国&quot;</span>);</span><br><span class="line">    <span class="comment">// 添加重复键，值会覆盖</span></span><br><span class="line">    map.put(<span class="string">&quot;cn&quot;</span>, <span class="string">&quot;zhongguo&quot;</span>); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 删除元素</span></span><br><span class="line">    map.remove(<span class="string">&quot;uk&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 遍历</span></span><br><span class="line">    <span class="comment">//第一种：</span></span><br><span class="line">    <span class="comment">//遍历所有的key，用key查找对应value</span></span><br><span class="line">    <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;key= &quot;</span>+ key + <span class="string">&quot; and value= &quot;</span> + map.get(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二种：</span></span><br><span class="line">    <span class="comment">//通过Map.entrySet(键值对映射)使用iterator遍历key和value</span></span><br><span class="line">    Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        Map.Entry&lt;String, String&gt; entry = it.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三种：推荐，尤其是容量大时</span></span><br><span class="line">    <span class="comment">//通过Map.entrySet遍历key和value</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第四种：</span></span><br><span class="line">    <span class="comment">//通过Map.values()遍历所有的value，但不能遍历key</span></span><br><span class="line">    <span class="keyword">for</span> (String v : map.values()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;value= &quot;</span> + v);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4.判断</span></span><br><span class="line">    System.out.println(map.containsKey(<span class="string">&quot;cn&quot;</span>));</span><br><span class="line">    System.out.println(map.containsValue(<span class="string">&quot;中国&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Map实现类"><a href="#Map实现类" class="headerlink" title="Map实现类"></a>Map实现类</h2><ol><li>HashMap：线程不安全，运行效率快，允许使用null作为key或是value</li><li>Hashtable：线程安全，运行效率慢；不允许null作为key或是value</li><li>Properties：hashtable的子类，要求key和value都是string，通常用于配置文件的读取</li><li>TreeMap：实现了SortedMap接口（是map的子接口），可以对key自动排序</li></ol><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>存储结构：哈希表(数组+链表+红黑树)<br>增、删、遍历、判断与Map父接口一致</p><p>源码分析：</p><ul><li>HashMap刚创建时，table是null，节省空间，当添加第一个元素时，table容量调整为16</li><li>当元素个数大于阈值（16*0.75 &#x3D; 12）时，会进行扩容，扩容后的大小为原来的两倍，目的是减少调整元素的个数</li><li>jdk1.8 当每个链表长度 &gt;8 ，并且数组元素个数 ≥64时，会调整成红黑树，目的是提高效率</li><li>jdk1.8 当链表长度 &lt;6 时 调整成链表</li><li>jdk1.8 以前，链表时头插入，之后为尾插入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认加载因子，容量超过75%则自动扩容</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 键值对映射数组，用于存放传入的键值对，初始为null</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组大小，初始为0</span></span><br><span class="line"><span class="keyword">transient</span> <span class="type">int</span> size;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加方法</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,<span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">// 这一个if判断了table赋给tab的值是否为空，实际上进行了初始化，table的容量变为16</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 当元素个数超过阈值，进行扩容，阈值16*0.75=12，每一次扩容为原来的2倍</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><p>线程安全，运行效率慢；不允许null作为key或是value</p><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><p>Hashtable的子类，要求key和value都是string，通常用于配置文件的读取</p><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>实现了SortedMap接口（是map的子接口），可以对key自动排序<br>TreeMap存储引用类型数据的时候，也和TreeSet一样，需要实现Comparable接口，或者是在创建集合的同时，指定比较规则，具体使用，参照TreeSet</p><h2 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h2><p>集合工具类，定义了除了存取以外的集合常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="number">20</span>);</span><br><span class="line">    list.add(<span class="number">5</span>);</span><br><span class="line">    list.add(<span class="number">12</span>);</span><br><span class="line">    list.add(<span class="number">30</span>);</span><br><span class="line">    list.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sort排序(由小到大)</span></span><br><span class="line">    System.out.println(<span class="string">&quot;排序前：&quot;</span> + list.toString());</span><br><span class="line">    Collections.sort(list);</span><br><span class="line">    System.out.println(<span class="string">&quot;排序后：&quot;</span> + list.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// binarySearch二分查找</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Collections.binarySearch(list,<span class="number">12</span>);</span><br><span class="line">    System.out.println(i);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy复制</span></span><br><span class="line">    List&lt;Integer&gt; dest = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;k &lt; list.size();i++) &#123;</span><br><span class="line">        dest.add(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Collections.copy(dest,list);</span><br><span class="line">    System.out.println(dest.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reverse反转</span></span><br><span class="line">    Collections.reverse(list);</span><br><span class="line">    System.out.println(<span class="string">&quot;反转后：&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// shuffle 打乱</span></span><br><span class="line">    Collections.shuffle(list);</span><br><span class="line">    System.out.println(<span class="string">&quot;打乱后：&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// list转数组,如果数组大小小于集合大小，则会直接存入，如果数组大小大于集合大小，多余部分会用默认值填充</span></span><br><span class="line">    Integer[] arr = list.toArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">10</span>]);</span><br><span class="line">    System.out.println(arr.length);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组转集合</span></span><br><span class="line">    String[] names = &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">// 得到的是一个受限集合，不能增删</span></span><br><span class="line">    List&lt;String&gt; list2 = Arrays.asList(names);</span><br><span class="line">    System.out.println(list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;集合&quot;&gt;&lt;a href=&quot;#集合&quot; class=&quot;headerlink&quot; title=&quot;集合&quot;&gt;&lt;/a&gt;集合&lt;/h2&gt;&lt;p&gt;概念：对象的容器，定义了对多个对象进行操作的常用方法，可实现数组的功能&lt;/p&gt;
&lt;p&gt;所有集合类都位于&lt;code&gt;java.util&lt;/co</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://jcxiaozhan.gitee.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java常用类</title>
    <link href="https://jcxiaozhan.gitee.io/2021/09/20/Java%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
    <id>https://jcxiaozhan.gitee.io/2021/09/20/Java%E5%B8%B8%E7%94%A8%E7%B1%BB/</id>
    <published>2021-09-19T16:00:00.000Z</published>
    <updated>2022-06-22T08:07:52.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ul><li>概念：在一个类的内部再定义一个完整的类，当外部类与内部类的属性重名时，优先访问内部类属性</li><li>分类：成员内部类、静态内部类、局部内部类、匿名内部类</li></ul><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><ul><li>内部类在编译之后也会产生独立的字节码文件</li><li>成员内部类在类的内部定义，与外部类的变量和方法同级别的类</li><li>成员内部类可以直接拿到外部类的私有属性</li><li>如果存在同名属性，优先访问成员内部类的属性</li><li>成员内部类里不能定义静态成员变量，但是可以定义静态常量(final)，这个静态常量在不实例化外部类的情况下可以调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是外部方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">XXX</span> <span class="operator">=</span> <span class="string">&quot;这是一个静态常量&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是内部方法&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//打印李四</span></span><br><span class="line">            System.out.println(name);</span><br><span class="line">            System.out.println(<span class="built_in">this</span>.name);</span><br><span class="line">            <span class="comment">//打印张三</span></span><br><span class="line">            System.out.println(Outer.<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getID</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例化成员内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 在没有实例化外部类的情况下可调用内部类的静态常量</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">xxx</span> <span class="operator">=</span> Outer.Inner.XXX;</span><br><span class="line">        System.out.println(xxx);</span><br><span class="line"></span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.getID();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><ul><li>静态内部类不依赖外部类对象，可直接创建或通过类名访问，可以定义静态成员变量</li><li>非静态内部类需要在外部类存在一个实例时才可以调用，静态内部类可以直接调用，因为没有一个外部类的实例，所以在静态内部类里面不可以直接访问外部类的属性和方法，若想访问，需要创建外部类的对象来调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;上海&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="string">&quot;111&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line"></span><br><span class="line">            System.out.println(outer.name);</span><br><span class="line">            System.out.println(outer.age);</span><br><span class="line"></span><br><span class="line">            System.out.println(address);</span><br><span class="line">            System.out.println(phone);</span><br><span class="line"></span><br><span class="line">            System.out.println(Inner.count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><ul><li>局部内部类就是定义在外部类的方法里面的类，作用范围和创建对象范围仅限于当前方法，不能添加任何修饰符</li><li>局部内部类访问外部类当前方法中的局部变量时，因无法保障变量的生命周期与自身相同(局部变量在方法执行之后消失，而内部类不会消失)，变量必须修饰为final常量，这是JDK1.7的规定，JDK1.8以后，这个final会自动添加，不用我们考虑</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;外部类变量&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;局部变量&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="comment">//打印外部类变量</span></span><br><span class="line">                System.out.println(str1);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//打印局部变量</span></span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.in();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Outer</span>().method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><ul><li>匿名内部类也就是没有名字的局部内部类，正因为没有名字，所以匿名内部类只能使用一次，它通常用来简化代码编写，但使用匿名内部类还有个前提条件：必须继承一个父类或实现一个接口</li><li>匿名类就是在实例化类的重写方法，不使用引用保存实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Outer</span>().method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在接口上使用匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;eat something&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        p.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最常用的情况就是在多线程的实现上，因为要实现多线程必须继承Thread类或是继承Runnable接口</p><ul><li>Thread类的匿名内部类实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Runnable接口的匿名内部类实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>Object类是所有类的超类，所有类默认继承Object类</p><h3 id="getClass"><a href="#getClass" class="headerlink" title="getClass()"></a>getClass()</h3><p>返回引用中存储的实际对象类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">class</span> <span class="operator">=</span> stu.getClass();</span><br></pre></td></tr></table></figure><h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h3><p>返回对象哈希值，是一个整数，表示在哈希表中的位置</p><p>哈希值：根据对象的地址或字符串或数字使用hash算法计算出来的int类型的数值，一般情况下，相同对象返回相同哈希码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> stu.hashCode();</span><br></pre></td></tr></table></figure><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p>返回该对象的字符串表示，因为默认打印的是类的内存地址，所以通常我们都会重写这个方法，达到输出字符串的目的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot;age:&quot;</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">stuInfo</span> <span class="operator">=</span> stu.toString();</span><br></pre></td></tr></table></figure><h3 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h3><p>比较两个对象地址是否相同，这个方法在String中被重写了，重写后的方法先对比引用地址，如不相同则对比字面值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> stu1.equals(stu2);</span><br></pre></td></tr></table></figure><h3 id="finalize"><a href="#finalize" class="headerlink" title="finalize()"></a>finalize()</h3><p>垃圾回收方法，由JVM自动调用此方法</p><ul><li>垃圾对象：没有有效引用指向此对象</li><li>垃圾回收：由GC销毁垃圾对象，释放数据存储空间</li><li>自动回收机制：JVM的内存耗尽，一次性回收所有垃圾对象</li><li>手动回收机制：使用System.gc();通知JVM执行垃圾回收</li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="创建字符串的两种方式及区别"><a href="#创建字符串的两种方式及区别" class="headerlink" title="创建字符串的两种方式及区别"></a>创建字符串的两种方式及区别</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种创建方式，栈内引用直接指向方法区中的常量池中的值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;你好&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种创建，堆内新建对象，对象指向方法区中的常量池中的值栈内引用指向堆内对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="length"><a href="#length" class="headerlink" title="length()"></a>length()</h3><p>返回字符串长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">leng</span> <span class="operator">=</span> str.length();</span><br></pre></td></tr></table></figure><h3 id="charAt-int-index"><a href="#charAt-int-index" class="headerlink" title="charAt(int index)"></a>charAt(int index)</h3><p>返回某个位置的字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="contains-String-str"><a href="#contains-String-str" class="headerlink" title="contains(String str)"></a>contains(String str)</h3><p>判断是否包含某个子字符串，返回布尔值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> str.contains(<span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="toCharArray"><a href="#toCharArray" class="headerlink" title="toCharArray()"></a>toCharArray()</h3><p>将字符串转换为字符数组返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="type">char</span>[] strs = str.toCharArray();</span><br></pre></td></tr></table></figure><h3 id="indexOf-String-str"><a href="#indexOf-String-str" class="headerlink" title="indexOf(String str)"></a>indexOf(String str)</h3><p>查找str首次出现的下标，返回，如果不存在，返回-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> str.indexOf(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="comment">// 从第四位开始查找</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> str.indexOf(<span class="string">&quot;Hello&quot;</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h3 id="lastIndexOf-String-str"><a href="#lastIndexOf-String-str" class="headerlink" title="lastIndexOf(String str)"></a>lastIndexOf(String str)</h3><p>查找字符串在当前字符串中最后一次出现的下标，返回，如果不存在，返回-1;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Java Hello Java CC Java&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> str.lastIndexOf(<span class="string">&quot;Java&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h3><p>去掉字符串前后空格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;    Hello World    &quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> str.trim();</span><br></pre></td></tr></table></figure><h3 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase()"></a>toUpperCase()</h3><p>将小写转成大写</p><h3 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title="toLowerCase()"></a>toLowerCase()</h3><p>将大写转换成小写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> str.toUpperCase();</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> str.toLowerCase();</span><br></pre></td></tr></table></figure><h3 id="endsWith-String-str"><a href="#endsWith-String-str" class="headerlink" title="endsWith(String str)"></a>endsWith(String str)</h3><p>判断字符串是否以str结尾</p><h3 id="startsWith-String-str"><a href="#startsWith-String-str" class="headerlink" title="startsWith(String str)"></a>startsWith(String str)</h3><p>判断字符串是否以str开头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">r1</span> <span class="operator">=</span> str.startsWith(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">r2</span> <span class="operator">=</span> str.endsWith(<span class="string">&quot;World&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="replace-char-oldChar-char-newChar"><a href="#replace-char-oldChar-char-newChar" class="headerlink" title="replace(char oldChar,char newChar)"></a>replace(char oldChar,char newChar)</h3><p>将旧字符串替换成新字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> str.replace(<span class="string">&quot;World&quot;</span>,<span class="string">&quot;Java&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="split-String-str"><a href="#split-String-str" class="headerlink" title="split(String str)"></a>split(String str)</h3><p>根据str对字符串进行拆分，返回一个字符串数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World Java PHP C,Python|C++&quot;</span>;</span><br><span class="line"><span class="comment">// 以空格分隔字符串</span></span><br><span class="line">String[] strs = str.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="comment">// 以多个符号分隔字符串空格，逗号竖线都可分隔</span></span><br><span class="line">String[] strs = str.split(<span class="string">&quot;[ ,|]&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="可变字符串"><a href="#可变字符串" class="headerlink" title="可变字符串"></a>可变字符串</h2><ul><li><p>StringBuffer : 可变长字符串，运行效率慢、线程安全</p></li><li><p>StringBuilder : 可变长字符串、运行快、线程不安全</p></li><li><p>StringBuffer和StringBuilder的效率都高于String，都比String节省内存</p></li><li><p>StringBuffer和StringBuilder的用法是一样的，StringBuilder的效率高于StringBuffer</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="comment">// append()追加</span></span><br><span class="line">sb.append(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert()添加</span></span><br><span class="line">sb.insert(<span class="number">0</span>,<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// replace()替换:取前不取后</span></span><br><span class="line">sb.replace(<span class="number">6</span>,<span class="number">11</span>,<span class="string">&quot;Java&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete()删除</span></span><br><span class="line">sb.delete(<span class="number">6</span>,sb.length());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line">sb.toString();</span><br></pre></td></tr></table></figure><h2 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h2><ul><li>float和double类型的主要设计目标是为了科学计算和工程计算。他们执行二进制浮点运算，然而，它们没有提供完全精确的结果。但是，商业计算往往要求结果精确，这时候BigDecimal就派上大用场啦。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">bd1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.0&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">bd2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.9&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">result1</span> <span class="operator">=</span> bd1.add(bd2);</span><br><span class="line"><span class="comment">// 减</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">result2</span> <span class="operator">=</span> bd1.subtract(bd2);</span><br><span class="line"><span class="comment">// 乘</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">result3</span> <span class="operator">=</span> bd1.multiply(bd2);</span><br><span class="line"><span class="comment">// 除</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">result4</span> <span class="operator">=</span> bd1.divide(bd2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为除不尽会报错，所以这里保留两位小数四舍五入</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">result5</span> <span class="operator">=</span> bd1.divide(bd2).setScale(<span class="number">2</span>, RoundingMode.HALF_UP)</span><br></pre></td></tr></table></figure><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><ul><li>Date表示特定的瞬间，精确到毫秒。Date类中的大部分方法都已经被Calendar类中的方法所取代</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 1 创建Date对象</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    System.out.println(date1.toString()); <span class="comment">//Sun Sep 19 18:53:23 CST 2021</span></span><br><span class="line">    System.out.println(date1.toLocaleString()); <span class="comment">//2021年9月19日 下午6:53:23</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 昨天</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">date2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(date1.getTime() - (<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">1000</span>)); </span><br><span class="line">    System.out.println(date2.toLocaleString()); <span class="comment">//2021年9月18日 下午6:53:23</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 方法after before</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> date1.after(date2);</span><br><span class="line">    System.out.println(b1); <span class="comment">//true</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> date1.before(date2);</span><br><span class="line">    System.out.println(b2); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比较compareTo();</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> date1.compareTo(date1);</span><br><span class="line">    System.out.println(d); <span class="comment">// 多的为1 少的为 -1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比较是否相等 equals()</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b3</span> <span class="operator">=</span> date1.equals(date2);</span><br><span class="line">    System.out.println(b3); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h2><ul><li>Calendar提供了获取或设置各种日历字段的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 创建 Calendar 对象</span></span><br><span class="line">    <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">    System.out.println(calendar.getTime().toLocaleString());</span><br><span class="line">    <span class="comment">// 2. 获取时间信息</span></span><br><span class="line">    <span class="comment">// 获取年</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> calendar.get(Calendar.YEAR);</span><br><span class="line">    <span class="comment">// 获取月 从 0 - 11</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> calendar.get(Calendar.MONTH);</span><br><span class="line">    <span class="comment">// 日</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">    <span class="comment">// 小时</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> calendar.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">    <span class="comment">// 分钟</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">minute</span> <span class="operator">=</span> calendar.get(Calendar.MINUTE);</span><br><span class="line">    <span class="comment">// 秒</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">second</span> <span class="operator">=</span> calendar.get(Calendar.SECOND);</span><br><span class="line">    <span class="comment">// 3. 修改时间</span></span><br><span class="line">    <span class="type">Calendar</span> <span class="variable">calendar2</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">    calendar2.set(Calendar.DAY_OF_MONTH, x);</span><br><span class="line">    <span class="comment">// 4. add修改时间</span></span><br><span class="line">    calendar2.add(Calendar.HOUR, x); <span class="comment">// x为正就加 负就减</span></span><br><span class="line">    <span class="comment">// 5. 补充方法</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> calendar2.getActualMaximum(Calendar.DAY_OF_MONTH);<span class="comment">// 月数最大天数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> calendar2.getActualMinimum(Calendar.DAY_OF_MONTH);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h2><ul><li>SimpleDateFormat是一个以与语言环境有关的方式来格式化和解析日期的具体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">    <span class="comment">// 1. 创建对象</span></span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd HH-mm-ss&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 创建Date</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="comment">// 格式化date（日期→字符串）</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sdf.format(date);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    <span class="comment">// 解析（字符串→时间）</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">date2</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;1948/03/12&quot;</span>);</span><br><span class="line">    System.out.println(date2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><ul><li>主要用于获取系统的属性数据和其他操作，构造方法私有化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//arraycopy 复制</span></span><br><span class="line">    <span class="comment">//src-原数组 srcPos-从哪个位置开始复制0 dest-目标数组 destPos-目标数组的位置 length-复制的长度</span></span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">20</span>, <span class="number">18</span>, <span class="number">39</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] dest = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">4</span>];</span><br><span class="line">    <span class="comment">//System.arraycopy(src, srcPos, dest, destPos, length);</span></span><br><span class="line">    System.arraycopy(arr, <span class="number">0</span>, dest, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : dest) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回当前系统时间(毫秒)</span></span><br><span class="line">    System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Arrays.copyOf(original, newLength)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;内部类&quot;&gt;&lt;a href=&quot;#内部类&quot; class=&quot;headerlink&quot; title=&quot;内部类&quot;&gt;&lt;/a&gt;内部类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;概念：在一个类的内部再定义一个完整的类，当外部类与内部类的属性重名时，优先访问内部类属性&lt;/li&gt;
&lt;li&gt;分类：成员内</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://jcxiaozhan.gitee.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate的简单入门使用</title>
    <link href="https://jcxiaozhan.gitee.io/2021/07/07/Hibernate%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/"/>
    <id>https://jcxiaozhan.gitee.io/2021/07/07/Hibernate%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</id>
    <published>2021-07-06T16:00:00.000Z</published>
    <updated>2022-06-13T04:23:13.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Hibernate"><a href="#什么是Hibernate" class="headerlink" title="什么是Hibernate"></a>什么是Hibernate</h2><blockquote><p>Hibernate是一个开放源代码的<code>对象关系映射框架</code>，它对JDBC进行了非常轻量级的对象封装，它将POJO与数据库表建立映射关系，是一个全自动的orm框架，hibernate可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。 Hibernate可以应用在任何使用JDBC的场合，既可以在Java的客户端程序使用，也可以在Servlet&#x2F;JSP的Web应用中使用，最具革命意义的是，Hibernate可以在应用EJB的JavaEE架构中取代CMP，完成数据持久化的重任。</p></blockquote><h2 id="Hibernate的简单使用-Springboot项目"><a href="#Hibernate的简单使用-Springboot项目" class="headerlink" title="Hibernate的简单使用(Springboot项目)"></a>Hibernate的简单使用(Springboot项目)</h2><h3 id="pom文件引入jar包"><a href="#pom文件引入jar包" class="headerlink" title="pom文件引入jar包"></a>pom文件引入jar包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Springboot配置数据库信息"><a href="#Springboot配置数据库信息" class="headerlink" title="Springboot配置数据库信息"></a>Springboot配置数据库信息</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/webapp1901</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">admin</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.jpa.hibernate.naming.physical-strategy</span>=<span class="string">org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span></span><br></pre></td></tr></table></figure><h3 id="idea连接Mysql数据库"><a href="#idea连接Mysql数据库" class="headerlink" title="idea连接Mysql数据库"></a>idea连接Mysql数据库</h3><p>配置方法请参考百度教程(<a href="https://jingyan.baidu.com/article/a378c960ea8a1eb3282830c1.html">点此前往</a>)，配置成功后，可以在右侧工具栏查看自己的数据库</p><img src="https://img.jcxiaozhan.top/Hibernate%E5%85%A5%E9%97%A8%E4%B8%80.jpg" style="text-align:center;"><h3 id="配置Hibernate"><a href="#配置Hibernate" class="headerlink" title="配置Hibernate"></a>配置Hibernate</h3><p>打开idea项目结构，添加Hibernate</p><img src="https://img.jcxiaozhan.top/Hibernate%E5%85%A5%E9%97%A8%E4%BA%8C.jpg" style="text-align:center;"><p>添加xml配置文件</p><img src="https://img.jcxiaozhan.top/Hibernate%E5%85%A5%E9%97%A8%E4%B8%89.jpg" style="text-align:center;"><h3 id="生成实体类"><a href="#生成实体类" class="headerlink" title="生成实体类"></a>生成实体类</h3><p>打开工具栏配置，找到生成持久层映射这一项</p><img src="https://img.jcxiaozhan.top/Hibernate%E5%85%A5%E9%97%A8%E5%9B%9B.jpg" style="text-align:center;"><p>如图配置实体类生成规则</p><img src="https://img.jcxiaozhan.top/Hibernate%E5%85%A5%E9%97%A8%E5%85%AD.jpg" style="text-align:center;"><p>选择实体类生成位置</p><img src="https://img.jcxiaozhan.top/Hibernate%E5%85%A5%E9%97%A8%E4%B8%83.jpg" style="text-align:center;"><p><code>Hibernate为我们生成了实体类，要注意的是，你可能会碰到生成的实体类报红的问题，它将表中int(11)的字段生成为了Long类型，需要手动更正一下</code></p><img src="https://img.jcxiaozhan.top/Hibernate%E5%85%A5%E9%97%A8%E5%85%AB.jpg" style="text-align:center;"><h3 id="创建Dao文件"><a href="#创建Dao文件" class="headerlink" title="创建Dao文件"></a>创建Dao文件</h3><p>继承Hibernate提供的CrudRepository类就可实现基本的增删改查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.com.scitc.webapp3.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.com.scitc.webapp3.pojo.Manager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.CrudRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ManagerDao</span> <span class="keyword">extends</span> <span class="title class_">CrudRepository</span>&lt;Manager,Integer&gt; &#123;</span><br><span class="line"><span class="comment">// CrudRepository泛型第一个值为实体类，第二个值为你的表的主键类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.com.scitc.webapp3.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.com.scitc.webapp3.pojo.Manager;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Assertions;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ManagerDaoTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ManagerDao managerDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findById</span><span class="params">()</span> &#123;</span><br><span class="line">        Optional&lt;Manager&gt; obj = managerDao.findById(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Manager</span> <span class="variable">manager</span> <span class="operator">=</span> obj.get();</span><br><span class="line">        logger.info(manager.getLoginId());</span><br><span class="line">        Assertions.assertEquals(<span class="string">&quot;JohnCena&quot;</span>,manager.getLoginId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        Iterable&lt;Manager&gt; list = managerDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Manager manager : list) &#123;</span><br><span class="line">            System.out.println(manager.getRealName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hibernate中将insert和update合并成了一个save方法，它会根据主键自动判断是增加还是修改操作</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Manager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>();</span><br><span class="line">        manager.setId(<span class="number">2</span>);</span><br><span class="line">        manager.setLoginId(<span class="string">&quot;Admin&quot;</span>);</span><br><span class="line">        manager.setRealName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        manager.setPwd(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        manager.setLoginCount(<span class="number">88</span>);</span><br><span class="line">        manager.setLastLoginDt(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">       managerDao.save(manager);</span><br><span class="line">        <span class="type">Manager</span> <span class="variable">manager1</span> <span class="operator">=</span> managerDao.findById(<span class="number">2</span>).get();</span><br><span class="line">        logger.info(manager1.getRealName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Manager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>();</span><br><span class="line">        manager.setId(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        managerDao.delete(manager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Manager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>();</span><br><span class="line">        manager.setId(<span class="number">2</span>);</span><br><span class="line">        manager.setLoginId(<span class="string">&quot;Admin&quot;</span>);</span><br><span class="line">        manager.setRealName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        manager.setPwd(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        manager.setLoginCount(<span class="number">88</span>);</span><br><span class="line">        manager.setLastLoginDt(<span class="literal">null</span>);</span><br><span class="line">        managerDao.save(manager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; ids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ids.add(<span class="number">2</span>);</span><br><span class="line">        ids.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        managerDao.deleteAllById(ids);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByLoginId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Manager</span> <span class="variable">manager</span> <span class="operator">=</span> managerDao.findByLoginId(<span class="string">&quot;JohnCena&quot;</span>);</span><br><span class="line">        Assertions.assertEquals(<span class="string">&quot;张三&quot;</span>,manager.getRealName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是Hibernate&quot;&gt;&lt;a href=&quot;#什么是Hibernate&quot; class=&quot;headerlink&quot; title=&quot;什么是Hibernate&quot;&gt;&lt;/a&gt;什么是Hibernate&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Hibernate是一个开放源代码</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://jcxiaozhan.gitee.io/tags/Java/"/>
    
    <category term="Hibernate" scheme="https://jcxiaozhan.gitee.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis的简单入门使用</title>
    <link href="https://jcxiaozhan.gitee.io/2021/05/31/Mybatis%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/"/>
    <id>https://jcxiaozhan.gitee.io/2021/05/31/Mybatis%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</id>
    <published>2021-05-30T16:00:00.000Z</published>
    <updated>2022-06-13T04:25:21.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Mybatis"><a href="#什么是Mybatis" class="headerlink" title="什么是Mybatis"></a>什么是Mybatis</h2><blockquote><p>MyBatis 是一款优秀的<code>持久层框架</code>，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p></blockquote><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><ul><li>因为内存有断电即失的特性，所以需要进行数据持久化</li><li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li></ul><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><p>持久层，可以理解成数据保存在数据库或者硬盘一类可以保存很长时间的设备里面，不像放在内存中那样断电就消失了，也就是把数据存在持久化设备上</p><h2 id="Mybatis的简单使用-Maven项目"><a href="#Mybatis的简单使用-Maven项目" class="headerlink" title="Mybatis的简单使用(Maven项目)"></a>Mybatis的简单使用(Maven项目)</h2><h3 id="pom文件引入jar包"><a href="#pom文件引入jar包" class="headerlink" title="pom文件引入jar包"></a>pom文件引入jar包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span>-</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mysql-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- junit测试依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建工具类"><a href="#创建工具类" class="headerlink" title="创建工具类"></a>创建工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//用输入流来读取xml文件</span></span><br><span class="line">            inputStream = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建SqlSession工厂</span></span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建并返回SqlSession</span></span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建mybatis核心配置文件"><a href="#创建mybatis核心配置文件" class="headerlink" title="创建mybatis核心配置文件"></a>创建mybatis核心配置文件</h3><p><code>mybatis-config.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- JDBC配置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/student-manager?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=GMT%2B8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lishuang001219&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- resource下的Mapper资源存在单层目录结构时的写法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;StudentMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- resource下的Mapper资源存在多层目录结构时的写法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/StudentMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">    <span class="keyword">private</span> String num;</span><br><span class="line">    <span class="keyword">private</span> String grade;</span><br><span class="line">    <span class="keyword">private</span> String clazz;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建Mapper接口文件"><a href="#创建Mapper接口文件" class="headerlink" title="创建Mapper接口文件"></a>创建Mapper接口文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    List&lt;Student&gt; <span class="title function_">listStudent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建Mapper配置文件"><a href="#创建Mapper配置文件" class="headerlink" title="创建Mapper配置文件"></a>创建Mapper配置文件</h3><p><code>UserMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace命名空间：对应一个Mapper接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- sql语句 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id对应接口中定义的方法 resultType表示结果集类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建业务层"><a href="#创建业务层" class="headerlink" title="创建业务层"></a>创建业务层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> <span class="keyword">implements</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">selectAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; list;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtil.getSqlSession();</span><br><span class="line">        <span class="type">StudentMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(StudentMapper.class);</span><br><span class="line">        list = mapper.selectAll();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="type">StudentService</span> <span class="variable">studentService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentService</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(studentService.listStudent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><img src="https://img.jcxiaozhan.top/Mybatis%E5%85%A5%E9%97%A8%E4%B8%80.jpg" style="height:400px;width:300px;text-align:center;"><h2 id="mybatis-generator的简单使用"><a href="#mybatis-generator的简单使用" class="headerlink" title="mybatis-generator的简单使用"></a>mybatis-generator的简单使用</h2><div class="note warning simple"><p>注：此插件主要用于自动生成实体类、Mapper接口和Mapper配置文件，mybatis核心配置文件和业务层文件需要根据实际应用场景对照生成的文件自行编写</p></div><h3 id="编写pom文件"><a href="#编写pom文件" class="headerlink" title="编写pom文件"></a>编写pom文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加插件(注意将此行注释删除，中文会引起idea报错) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>Generate MyBatis Artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>generate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- mysql-jdbc --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 生成的文件覆盖源文件 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写mybatis-generator配置文件"><a href="#编写mybatis-generator配置文件" class="headerlink" title="编写mybatis-generator配置文件"></a>编写mybatis-generator配置文件</h3><p><code>generatorConfig.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;simple&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/student-manager&quot;</span> <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;lishuang001219&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--实体存放位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;pojo&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Mapper.xml存放位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/resources&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Mapper接口存放位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--需要生成的表--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;student&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="双击一键生成代码"><a href="#双击一键生成代码" class="headerlink" title="双击一键生成代码"></a>双击一键生成代码</h3><img src="https://img.jcxiaozhan.top/Mybatis%E5%85%A5%E9%97%A8%E4%BA%8C.jpg" style="height:300px;width:500px;text-align:center;">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是Mybatis&quot;&gt;&lt;a href=&quot;#什么是Mybatis&quot; class=&quot;headerlink&quot; title=&quot;什么是Mybatis&quot;&gt;&lt;/a&gt;什么是Mybatis&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;MyBatis 是一款优秀的&lt;code&gt;持久层框架</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://jcxiaozhan.gitee.io/tags/Java/"/>
    
    <category term="Mybatis" scheme="https://jcxiaozhan.gitee.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>稀疏数组</title>
    <link href="https://jcxiaozhan.gitee.io/2021/02/19/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/"/>
    <id>https://jcxiaozhan.gitee.io/2021/02/19/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/</id>
    <published>2021-02-18T16:00:00.000Z</published>
    <updated>2022-06-13T04:31:09.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>稀疏数组是经过特殊处理后的二维数组。</li><li>当一个二维数组中存在大量相同值的时候，可以考虑转换为稀疏数组来进行存储，从而达到节省内存空间的目的。</li><li>二维数组中存在的大量相同值我们称之为<code>无效值</code>，除开无效值，剩下的就是<code>有效值</code>。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">0 0 0 0 0 0 0 0 0 0           </span><br><span class="line">0 0 2 0 0 0 0 0 0 0</span><br><span class="line">0 0 0 0 0 0 0 0 0 0</span><br><span class="line">0 0 0 0 0 0 0 0 0 0                                             10 10 2</span><br><span class="line">0 0 0 5 0 0 0 0 0 0                 ======&gt;                     1  2  2</span><br><span class="line">0 0 0 0 0 0 0 0 0 0                                             4  3  5</span><br><span class="line">0 0 0 0 0 0 0 0 0 0</span><br><span class="line">0 0 0 0 0 0 0 0 0 0</span><br><span class="line">0 0 0 0 0 0 0 0 0 0</span><br><span class="line">0 0 0 0 0 0 0 0 0 0</span><br><span class="line"></span><br><span class="line">存有大量相同值的二维数组                                     处理后形成的稀疏数组</span><br></pre></td></tr></table></figure><h2 id="存储规则"><a href="#存储规则" class="headerlink" title="存储规则"></a>存储规则</h2><ol><li><p>稀疏数组第一行固定用于存储原数组信息，例如，我们存储的是一个3行4列，有1个有效值的数组，第一行就是<code>3 4 1</code></p></li><li><p>稀疏数组一定是一个n行3列的二维数组</p><ul><li>因为我们有多个有效值，每一个有效值，我们都需要用一行来进行存储，所以有n行</li><li>3列分别对应了有效值的行、列、值</li></ul></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个10*10的二维数组，在数组存入两个有效值</span></span><br><span class="line"><span class="type">int</span>[][] array1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">array1[<span class="number">4</span>][<span class="number">3</span>] = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们打印一下，在控制台会看到如下一个二维数组</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        0 0 0 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">        0 0 2 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">        0 0 0 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">        0 0 0 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">        0 0 0 5 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">        0 0 0 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">        0 0 0 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">        0 0 0 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">        0 0 0 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">        0 0 0 0 0 0 0 0 0 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;array1.length;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt;array1[i].length;j++)&#123;</span><br><span class="line">        System.out.print(array1[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (j == array1[i].length-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组中有效值的个数</span></span><br><span class="line"><span class="comment">// 因为当前数组中初始值全部为0，所以这里不为0的就是我们的有效值，把它们筛选出来</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; array1.length; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; array1[i].length; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(array1[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个稀疏数组</span></span><br><span class="line"><span class="comment">// 稀疏数组的第一行存放的是原数组的信息，所以稀疏数组的行数=有效值+1，列数3固定</span></span><br><span class="line"><span class="type">int</span>[][] array2 = <span class="keyword">new</span> <span class="title class_">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//用稀疏数组第一行，存放原数组的信息：行/列/有效值个数</span></span><br><span class="line">array2[<span class="number">0</span>][<span class="number">0</span>] = array1.length;</span><br><span class="line">array2[<span class="number">0</span>][<span class="number">1</span>] = array1[<span class="number">0</span>].length;</span><br><span class="line">array2[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再次遍历二维数组，将有效值存入稀疏数组中</span></span><br><span class="line"><span class="comment">// count++的使用恰好让我们在存储有效值时跳过了第一行</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; array1.length; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; array1[i].length; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(array1[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            array2[count][<span class="number">0</span>] = i;</span><br><span class="line">            array2[count][<span class="number">1</span>] = j;</span><br><span class="line">            array2[count][<span class="number">2</span>] = array1[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台打印查看一下我们转换完成的稀疏数组</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        10 10 2 </span></span><br><span class="line"><span class="comment">        1 2 2 </span></span><br><span class="line"><span class="comment">        4 3 5 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;array2.length;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt;array2[i].length;j++)&#123;</span><br><span class="line">        System.out.print(array2[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (j == array2[i].length-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复</span></span><br><span class="line"><span class="comment">//1. 用稀疏数组中第一行信息创建二维数组</span></span><br><span class="line"><span class="type">int</span>[][] array3 = <span class="keyword">new</span> <span class="title class_">int</span>[array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"><span class="comment">//2. 填充二维数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; array2.length;i++)&#123;</span><br><span class="line">    array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]] = array2[i][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;稀疏数组是经过特殊处理后的二维数组。&lt;/li&gt;
&lt;li&gt;当一个二维数组中存在大量相同值的时候，可以考虑转换为稀疏数组来进行存储，</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://jcxiaozhan.gitee.io/tags/Java/"/>
    
    <category term="算法" scheme="https://jcxiaozhan.gitee.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>2020年终总结</title>
    <link href="https://jcxiaozhan.gitee.io/2020/12/31/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://jcxiaozhan.gitee.io/2020/12/31/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2020-12-30T16:00:00.000Z</published>
    <updated>2022-07-03T03:17:31.549Z</updated>
    
    <content type="html"><![CDATA[<p>2020年已经走到尾声了，马上就要迎来崭新的2021年了，其实也没什么好期待的，要说新年的美好祝愿吧，那就是希望家人身体健康，仅此而已。想了想，还是写一篇年终总结吧，我文笔不好，但就想着给我的2020年留下个痕迹，回头还能看一看，也算是记录了我的成长吧！</p><p>2020年过得很快，像是眨了了个眼，就要说告别了。2020年也刚好是我转到软件专业的第一年，当时的我兴奋、激动、满怀憧憬，还记得我跟我原室友是这样讲的，我说：“如果没转成功，我真的没有读下去的必要了！”这一次很幸运，我成功转到了软件专业，还高兴地请我的原室友们吃了顿火锅。</p><p>在软件专业的第一个学期(也就是今年上半年)，因为突然爆发疫情的原因，只能在家中上网课，隔着屏幕与老师同学们交流学习，我很清楚自己的处境，我不过就是一个软件专业的小白，零基础，跟人家学了一个学期的根本没法比，所以我每一堂课都听得很认真，一边敲代码，一边做笔记，聚精会神，生怕遗漏了什么。对于我们班导师晖哥提出的一些专业相关的东西，让我们了解的，我都会在课下去查一查，了解一下，学习一下。每天上课老师讲的是我所感兴趣的东西，所以我充满干劲。期末成绩也算是给了自己一个满意的交代，专业排名20，虽然不算优秀，但是跟有基础的同学相比，我已经算满意了，至少证明老师讲的知识我能听明白，并且在渐渐地缩短与同学们的差距。</p><p>今年的疫情，导致我们过了一次长达半年的寒假，那是一段我不想再经历的日子，每天看见感染人数成百上千地增加，我们只能无助地在家里待着，听指挥，不乱跑成了我们为祖国出力的唯一方式。疫情的最前线，无数的医疗工作者夜以继日地战斗着，最终我们还是赢得了胜利，复工复产已经稳定。再看看美国这个资本大国，每天还处在水生火热之中，感染人数还在十几二十万地增长着，真幸运作为一个中国人，生活在社会主义国家。</p><p>从今年3月搭建了我的第一个博客开始，大部分的心思都用在自己的小网站上了，可能是因为个人网站可以花费相对较少的时间来获得极大的成就感吧。时间证明了我的这部分投入是值得的，通过交换友链，我了结识到一个又一个博主，他们和我年龄相仿，大部分都是学生，但大部分又比我优秀，成为和他们一样优秀的人渐渐成了我的目标。我自认跟以前相比，现在的我学习上已经很努力了，而且在兴趣的驱使下，我在课下做自我学习的时间占了我课余时间的大部分，可带来的效果却不尽人意，有时候会产生失落感，但是当我缓过来之后，又会开始向前奔跑。很早之前，早在中学时代，我就想学计算机，从事互联网相关工作，现在的我，刚刚踏进了这个大门，所以我绝对不会放弃，还有太多太多的东西等着我去学习。</p><p>总的来说，今年的疫情，加速了一整年的进度，一切都显得忙碌。而从自身来讲，我能力的提升可能不那么明显，倒是思想渐渐成熟起来，我不再沉迷于游戏带来的短暂快乐，我所做的努力都是在为我的将来铺路，很多事情，不再任性，对于父母、家庭，也多出一份责任感来，那个父母庇护下的孩子，这一年真正地成长了。</p><p>再见2020，你好2021</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2020年已经走到尾声了，马上就要迎来崭新的2021年了，其实也没什么好期待的，要说新年的美好祝愿吧，那就是希望家人身体健康，仅此而已。想了想，还是写一篇年终总结吧，我文笔不好，但就想着给我的2020年留下个痕迹，回头还能看一看，也算是记录了我的成长吧！&lt;/p&gt;
&lt;p&gt;20</summary>
      
    
    
    
    <category term="生活琐碎" scheme="https://jcxiaozhan.gitee.io/categories/%E7%94%9F%E6%B4%BB%E7%90%90%E7%A2%8E/"/>
    
    
    <category term="年终总结" scheme="https://jcxiaozhan.gitee.io/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>从零开始，搭建个人博客(二)</title>
    <link href="https://jcxiaozhan.gitee.io/2020/10/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%8C%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20(%E4%BA%8C)/"/>
    <id>https://jcxiaozhan.gitee.io/2020/10/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%8C%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20(%E4%BA%8C)/</id>
    <published>2020-10-04T16:00:00.000Z</published>
    <updated>2022-06-13T04:35:37.926Z</updated>
    
    <content type="html"><![CDATA[<div class="note success flat"><p>文章更新于2020年11月30日，更正了一些小问题，保证了本教程的可行性与可靠性</p></div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前写过一篇网站搭建的文章，那是我最初搭建博客的方式，很方便、快捷，但是，即便我购买的是相对较便宜的学生机，每年在服务器和域名上都要花上一百多块钱，作为没有稳定收入的学生群体，我反正是觉得不值的，所以后来用了免费的方式搭建了现在这个静态博客，当然如果你认为每年为博客投入一定钱来续费服务器和域名是值得的，也可以看看我的上一篇搭建文章，<a href="https://jcxiaozhan.gitee.io/2020/05/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%8C%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20(%E4%B8%80)/">《从零开始，搭建个人博客(一)》</a>，也许会给你带来一些帮助。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>一个码云账号，<a href="https://gitee.com/">前往注册</a></li><li>Node工具，<a href="https://nodejs.org/en/">点击下载</a></li><li>Git工具，<a href="https://git-scm.com/">点击下载</a></li></ol><h2 id="搭建教程"><a href="#搭建教程" class="headerlink" title="搭建教程"></a>搭建教程</h2><h3 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h3><p>Node在官网下载安装包手动安装即可，安装完成后，用键盘win+R，输入cmd打开终端，依次输入以下两条命令,如图显示版本号，即表示安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E4%B8%80.jpg"><h3 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h3><p>npm是一个包管理工具，由于它安装速度慢，所以我们通过cnpm来代替npm进行依赖的安装，用以下命令安装cnpm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>稍等片刻即可安装成功,然后我们输入以下命令，如图显示版本信息，即表示安装成功了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E4%BA%8C.jpg" width="80%"><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>用以下命令安装Hexo博客框架</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>同样我们使用以下命令验证一下，如图显示版本信息，即表示Hexo博客框架安装成功，之后我们就可以开始使用Hexo博客框架来部署博客了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E4%B8%89.jpg"><h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><p>首先在电脑任意地方新建一个空文件夹，作为我们博客的根目录，然后我们在新建的文件夹中右键打开Git命令行，并确保后续命令操作是在博客根目录下进行的</p><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E5%9B%9B.jpg" width="80%"><p>我们用以下命令初始化博客根目录，其实就是克隆github上的仓库到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E4%BA%94.jpg"><p style="text-align:center">终端提示初始化成功</p><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E5%85%AD.jpg"><p style="text-align:center">博客根目录自动生成了文件</p><p>用以下命令，启动本地预览,访问地址<span><a href="http://localhost:4000/">http://localhost:4000/</a></span>，即可看到一个初始化的博客页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E4%B8%83.jpg"><h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><p>当然，博客不可能是只放在自己电脑上的，所以我们要把它部署到码云上，这样别人才能访问它</p><p>登录码云，查看个人信息，保证图中两个用户名是一致的，不一致请进行更改</p><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%28%E8%A1%A5%E4%B8%83%E5%90%8E%29.jpg"><p>新建公开仓库，路径对照归属填写，必须严格按照此格式，不然会影响网站访问，其它选项默认即可</p><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E5%85%AB.jpg"><p>之后我们回到博客根目录打开Git命令行，输入以下命令，安装一个Git部署插件。如果安装过程中出现问题，导致安装失败，用我提供的这个也是可以的，将压缩包解压到博客根目录即可，<a href="https://wwa.lanzoui.com/b0eq5auwd">Git部署插件</a>，密码：a7j2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p>等待安装完成后，我们打开博客根目录下的<code>_config.yml</code>这个文件，划到文件最底部，在repo后面填写自己的码云仓库地址</p><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E4%B9%9D.jpg"><p>用以下命令将本地博客推向码云仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>在仓库开启Gitee Pages服务，要注意的是，<code>以后我们更新博客，每一次推送到远端仓库后都要手动更新一下Gitee Pages页面</code></p><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E5%8D%81.jpg"><p>至此，我们的Hexo博客就已经搭建成功了，Gitee Pages页面提供的网址就是我们的站点地址</p><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E5%8D%81%E4%B8%80.jpg"><h2 id="博客发布流程"><a href="#博客发布流程" class="headerlink" title="博客发布流程"></a>博客发布流程</h2><p>在博客根目录下<code>/source/_posts</code>路径下，存放的是我们的博客文章，都是Markdown格式的</p><ol><li><p>在本地更新博客后，先用以下命令清除一下之前生成的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure></li><li><p>再用以下命令打开本地服务器，进入<a href="http://localhost:4000/">http://localhost:4000</a><span>进行本地预览</span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li><li><p>确认无误后，用以下命令推向远端仓库，别忘记到Gitee Pages页面手动更新一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></li></ol><h2 id="博客主题"><a href="#博客主题" class="headerlink" title="博客主题"></a>博客主题</h2><p>博客系统的默认主题一般都是很丑的，Hexo的也不例外，所以难免我们要更换主题</p><p>Hexo博客的主题是放在根目录的<code>/themes</code>路径下的，你可以去网上下载喜欢的主题，然后修改博客根目录下<code>_config.yml</code>文件中theme这一项为主题名即可</p><p>本博客用的Butterfly主题，你可以按照官方文档进行下载、配置、使用，<a href="https://butterfly.js.org/posts/21cfbf15/">主题传送门</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note success flat&quot;&gt;&lt;p&gt;文章更新于2020年11月30日，更正了一些小问题，保证了本教程的可行性与可靠性&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前</summary>
      
    
    
    
    <category term="网站建设" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="网站建设" scheme="https://jcxiaozhan.gitee.io/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    <category term="Hexo" scheme="https://jcxiaozhan.gitee.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>用Markdown写出一篇漂亮的博客</title>
    <link href="https://jcxiaozhan.gitee.io/2020/07/31/%E7%94%A8Markdown%E5%86%99%E5%87%BA%E4%B8%80%E7%AF%87%E6%BC%82%E4%BA%AE%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>https://jcxiaozhan.gitee.io/2020/07/31/%E7%94%A8Markdown%E5%86%99%E5%87%BA%E4%B8%80%E7%AF%87%E6%BC%82%E4%BA%AE%E7%9A%84%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-07-30T16:00:00.000Z</published>
    <updated>2022-06-13T04:30:12.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天和一个学长聊到写博客的问题，现在主流的博客系统，都已经支持使用Markdown语法编写博客了，但是任然有一些博客系统还是传统的html编辑器，通过源代码的形式来控制博客的排版，比如博主之前用的wordpress博客系统就是如此，Markdown格式写出来的博客还要通过一些特殊的方式，来转换成html代码来编辑发表，今天我就来教一下大家如何实现。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>Visual Studio Code(VScode)编辑器，<a href="https://code.visualstudio.com/">点击下载</a></li><li>自学Markdown语法，推荐B站小马视频教学，<a href="https://www.bilibili.com/video/BV1xW411r7Nv">点击前往</a></li></ol><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><ol><li><p>在VScode的插件商店搜索Markdown Preview Enhanced进行安装即可，如下图所示。</p><img src="https://img.jcxiaozhan.top/%E5%86%99%E5%8D%9A%E5%AE%A2%E4%B8%80.jpg"></li><li><p>安装完成后在我们编写窗口的右上角会有一个点击预览markdown格式的小按钮，点击后会在右边新开一栏，实时预览我们用markdown格式编写的内容，十分方便，效果如下图所示。</p><img src="https://img.jcxiaozhan.top/%E5%86%99%E5%8D%9A%E5%AE%A2%E4%BA%8C.jpg"></li><li><p>当我们编写完成后，只需要在右边预览处点击鼠标右键，就会有另存为html格式的选项，然后我们再把html中body标签内的源码复制粘贴到博客后台，对格式微调，发表文章即可。</p><img src="https://img.jcxiaozhan.top/%E5%86%99%E5%8D%9A%E5%AE%A2%E4%B8%89.jpg"></li></ol><h2 id="多讲一句"><a href="#多讲一句" class="headerlink" title="多讲一句"></a>多讲一句</h2><p>Markdown语法，我建议大家都可以去学一学，首先它并不难，无非就是一些控制文本显示的东西，什么加粗、倾斜、下划线之类的,它整齐的排版用来记笔记、写文章都特别爽，总之，非常推荐，感兴趣的朋友可以去了解、学习下！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;昨天和一个学长聊到写博客的问题，现在主流的博客系统，都已经支持使用Markdown语法编写博客了，但是任然有一些博客系统还是传统的html编</summary>
      
    
    
    
    <category term="网站建设" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="网站建设" scheme="https://jcxiaozhan.gitee.io/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    <category term="Markdown" scheme="https://jcxiaozhan.gitee.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>从零开始，搭建个人博客(一)</title>
    <link href="https://jcxiaozhan.gitee.io/2020/05/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%8C%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20(%E4%B8%80)/"/>
    <id>https://jcxiaozhan.gitee.io/2020/05/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%8C%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20(%E4%B8%80)/</id>
    <published>2020-05-28T16:00:00.000Z</published>
    <updated>2022-06-13T04:35:33.320Z</updated>
    
    <content type="html"><![CDATA[<div class="note success flat"><p>文章更新于2020年11月30日，补充了一些细节问题，保证了本教程的可行性与可靠性</p></div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我的网站从搭建到现在，已经100来天了，一个月没发文章了，因为这个月，确实感觉没有学到什么东西，在家成天上网课，积极性也在慢慢减弱，这两天返校了，这星期没课，就想着，把之前没做的搭站教程做一做，实际上，步骤都忘得差不多了，当初搭建的时候也是跌跌撞撞，走了很多弯路，最后也不知道怎么就捣鼓出来了，这次又写教程，算是又从零开始了，各位就随便看看吧。</p><h2 id="网站搭建的三大部分"><a href="#网站搭建的三大部分" class="headerlink" title="网站搭建的三大部分"></a>网站搭建的三大部分</h2><ul><li>服务器<br>网站的搭建基于服务器，只有网站文件只有放在服务器上，才能被他人访问</li><li>域名<br>域名，也就是我们常说的网址，用于查找服务器IP来达到访问网站的目的，同时也方便我们记忆</li><li>环境配置<br>有了前两项，只有配置好服务器后台，网站才成功被搭建</li></ul><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>为什么先讲域名呢，因为大陆购买的域名都要经过备案才能使用，备案审核时间通常比较长，像博主自己的域名就用了1个月才通过备案，所以有心要搭建一个个人网站的小伙伴现在可以先去购买域名进行备案，早备案早通过。</p><p>越好的域名越贵，如果是用于个人网站的域名，其实不用买贵的，买一个经济实惠的就差不多了，这里推荐阿里云的域名，首年只要1元，<a href="https://wanwang.aliyun.com/domain/1yuan">阿里云域名购买地址</a>。</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h3><p>服务器有国外的和国内的，价格也有所不同，我们在国内搭建博客，所以一定是选择国内的服务器，这里推荐阿里云的轻量级服务器，网站搭建不需要服务器有多大的容量，所以我们买最便宜的就好，当然，如果你有钱的话，买大一点的服务器是完全没问题的。如下图，选择轻量级服务器，系统镜像ContOS，还有一点要说一下，服务器和域名最好选同一个公司的，会比较方便，比如你购买的是腾讯的服务器，那么建议你购买腾讯的域名。<a href="https://www.aliyun.com/minisite/goods?userCode=wh43ewj4">优惠券</a>，<a href="https://promotion.aliyun.com/ntms/act/campus2018.html">阿里云学生机</a>。</p><img src="https://img.jcxiaozhan.top/%E6%90%AD%E7%AB%99%E4%B8%80.jpg"><img src="https://img.jcxiaozhan.top/%E6%90%AD%E7%AB%99%E4%BA%8C.jpg"><h3 id="端口放行"><a href="#端口放行" class="headerlink" title="端口放行"></a>端口放行</h3><p>购买好服务器后，服务器防火墙，放行80、443端口，将购买的域名与服务器进行绑定解析，具体可在网上查找域名解析的教程</p><img src="https://img.jcxiaozhan.top/%E6%90%AD%E7%AB%99%28%E8%A1%A5%E4%BA%8C%E5%90%8E%29.jpg"><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h3><p>在阿里云网页上将购买的服务器进行远程连接，进入命令界面，输入如下命令，安装宝塔面板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><img src="https://img.jcxiaozhan.top/%E6%90%AD%E7%AB%99%28%E8%A1%A5%E4%B8%89%E5%89%8D%29.jpg"><p>等待几分钟后，出现如下界面，说明宝塔面板安装成功,红框部分是你的宝塔操作面板地址和默认用户名密码，用于登录宝塔面板</p><img src="https://img.jcxiaozhan.top/%E6%90%AD%E7%AB%99%E4%B8%89.jpg"><h3 id="安装集成环境"><a href="#安装集成环境" class="headerlink" title="安装集成环境"></a>安装集成环境</h3><p>登录宝塔面板，一键安装LNMP集成环境，时间较长，请耐心等待</p><img src="https://img.jcxiaozhan.top/%E6%90%AD%E7%AB%99%E5%9B%9B.jpg"><h3 id="修改宝塔账号密码"><a href="#修改宝塔账号密码" class="headerlink" title="修改宝塔账号密码"></a>修改宝塔账号密码</h3><p>为了安全，集成环境安装完成后，在面板设置里面修改一下账号密码</p><img src="https://img.jcxiaozhan.top/%E6%90%AD%E7%AB%99%E4%BA%94.jpg"><h3 id="部署wordpress博客"><a href="#部署wordpress博客" class="headerlink" title="部署wordpress博客"></a>部署wordpress博客</h3><p>在软件商店，找到wordpress一键部署，填写域名和备注即可</p><img src="https://img.jcxiaozhan.top/%E6%90%AD%E7%AB%99%E5%85%AD.jpg"><img src="https://img.jcxiaozhan.top/%E6%90%AD%E7%AB%99%E4%B8%83.jpg"><p>接下来就是对wordpress这个博客系统的操作了，合理地使用wordpress，去搭建属于你自己的博客吧！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note success flat&quot;&gt;&lt;p&gt;文章更新于2020年11月30日，补充了一些细节问题，保证了本教程的可行性与可靠性&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="网站建设" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="网站建设" scheme="https://jcxiaozhan.gitee.io/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>关于NaN的一个小问题</title>
    <link href="https://jcxiaozhan.gitee.io/2020/04/24/%E5%85%B3%E4%BA%8ENaN%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>https://jcxiaozhan.gitee.io/2020/04/24/%E5%85%B3%E4%BA%8ENaN%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98/</id>
    <published>2020-04-23T16:00:00.000Z</published>
    <updated>2022-06-13T04:47:18.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在写js代码的时候，遇到一个小问题，也在百度上找了好半天，好像没有一模一样的解答，最后在一些大佬的关于NaN详解的文章里找到了答案，所以我想记录一下这次问题</p><p>下面这段是课堂上老师写的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = input.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title class_">Number</span>(str.<span class="title function_">charAt</span>(<span class="number">0</span>)))&#123;</span><br><span class="line">    infoUserName.<span class="property">innerHTML</span> = <span class="string">&quot;不能以数字开头&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码，执行时候是完全没有问题的，输入以数字开头的字符串，就会执行代码，出现提示。后来我再来看这段代码，就发现if中的判定条件是将第一个字符转化为数值，转化不了则会返回NaN,然后我就在想，无论转化后是数字还是NaN,都if无关，那么是怎么判断是否要执行代码的，于是，我将代码改了下，改成下面这样了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = input.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title class_">Number</span>(str.<span class="title function_">charAt</span>(<span class="number">0</span>)) != <span class="title class_">NaN</span>)&#123;</span><br><span class="line">    infoUserName.<span class="property">innerHTML</span> = <span class="string">&quot;不能以数字开头&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从我认为来看，这样是完全合理的，判断转化值是否不等于NaN，这样他就会出现一个ture或者false，但是出现问题了，无论我输入是不是数字开头的字符串，都会出现提示。难道是数字、字母转化出来都为NaN？不可能吧，带着疑惑，我又写了下面这串代码来验证</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = init;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;sssssss&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="title class_">Number</span>(str.<span class="title function_">charAt</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台返回的结果为NaN,没错啊，为什么判定的时候就出问题了，我开始百度，找寻答案，最后问题解决了，从大佬们的文章中我知道了<code>NaN要严格地来说它的类型依旧是Number型，但是它跟任何数字或者字符(包括它自己)相比较得到的结果都会是false</code>，我理解为，它本身就有false的性质，所以当我输入字符时，他不会执行代码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天在写js代码的时候，遇到一个小问题，也在百度上找了好半天，好像没有一模一样的解答，最后在一些大佬的关于NaN详解的文章里找到了答案，所以</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://jcxiaozhan.gitee.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JSON基础</title>
    <link href="https://jcxiaozhan.gitee.io/2020/04/19/JSON%E5%9F%BA%E7%A1%80/"/>
    <id>https://jcxiaozhan.gitee.io/2020/04/19/JSON%E5%9F%BA%E7%A1%80/</id>
    <published>2020-04-18T16:00:00.000Z</published>
    <updated>2022-06-13T04:23:38.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天，我的JSON学习算是告一段落了，不过只是入门阶段，我只是掌握了一些基础语法，下面是我的学习笔记，有兴趣的小伙伴可以看一看，这不是一篇教程贴，但是如果你有基础的话，应该很容易看得懂，我只是想分享一下我的所学。</p><h2 id="JSON在线工具"><a href="#JSON在线工具" class="headerlink" title="JSON在线工具"></a>JSON在线工具</h2><p>一个可以在线编写JSON的网站</p><blockquote><p><a href="https://json.cn/">https://json.cn/</a></p></blockquote><h2 id="JSON是什么"><a href="#JSON是什么" class="headerlink" title="JSON是什么"></a>JSON是什么</h2><p>JSON，全称JavaScript Object Notation,即JavaScript对象标记法</p><p>JSON是存储和交换文本信息的语法，类似 XML</p><p>JSON是一种轻量级的、基于文本的、可读的格式，语法格式参考JavaScript对象，格式永不升级</p><h2 id="JSON语法规则"><a href="#JSON语法规则" class="headerlink" title="JSON语法规则"></a>JSON语法规则</h2><p>数组（Array）用方括号<code>[]</code>表示，存放值<br>对象（Object）用大括号<code>&#123;&#125;</code>表示，存放名称&#x2F;值<br>名称&#x2F;值对（name&#x2F;value）组合成数组和对象<br>名称（name）置于双引号中，值（value）有字符串、数值、布尔值、null、对象、数组。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;John&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">19</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hobby&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;Sing&quot;</span><span class="punctuation">,</span><span class="string">&quot;dance&quot;</span><span class="punctuation">,</span><span class="string">&quot;Rap&quot;</span><span class="punctuation">,</span><span class="string">&quot;basketball&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="字符串规则"><a href="#字符串规则" class="headerlink" title="字符串规则"></a>字符串规则</h2><p>用英语双引号括起来<br>字符串中不能单独出现双引号<code>&quot;</code>和反斜杠<code>\</code><br>如需输入双引号或反斜杠，需要在其前面加上一个\，如 <code>你喜欢苹果\\香蕉</code></p><h2 id="JSON的解析与生成"><a href="#JSON的解析与生成" class="headerlink" title="JSON的解析与生成"></a>JSON的解析与生成</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JSON.parse()    将符合JSON规则的字符串转换为对象</span><br><span class="line">JSON.stringify()     将Javascript值转换为字符串</span><br><span class="line">eval()     将字符串解析为代码执行</span><br></pre></td></tr></table></figure><p><code>解析</code>是指将JSON字符串转化为Javascript对象的过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JSON.parse(name,value)</span><br><span class="line"></span><br><span class="line">第一个参数为变量名，是必选参数。</span><br><span class="line">第二个参数为需要执行的函数名，如果使用两个参数的话，对象中的每一组名称/值对都会执行一次函数，用于解析过程中的赋值。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;John&quot;,&quot;age&quot;:19&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str,fun);</span><br><span class="line"><span class="comment">//var obj = eval(&quot;(&quot;+ str + &quot;)&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">name,value</span>)&#123;  </span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure><p><code>序列化</code>是指将Javascript值转化为JSON字符串的过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JSON.stringify(value,replacer,space)</span><br><span class="line"></span><br><span class="line">第一个参数为Jascript的值，一般是对象或数组，是必选参数。</span><br><span class="line">第二个参数可以是函数或者数组,如果是函数，对象中的每一组名称/值对都会执行一次函数，函数返回值将代替转化结果进行输出，如果返回undefind，则被忽略。如果是数组，则只有数组中存在的名称，才能被转化，且转化后顺序与数组中的值保持一致</span><br><span class="line">第三个参数是为了方便阅读和排版，用来添加空白或制表符等</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">19</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonstr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj,fun);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">name,value</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonstr);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">d</span>:<span class="number">4</span>   </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonstr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj,[<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;a&quot;</span>],<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonstr);</span><br></pre></td></tr></table></figure><h2 id="JSON和XML的转化"><a href="#JSON和XML的转化" class="headerlink" title="JSON和XML的转化"></a>JSON和XML的转化</h2><p>官网很慢，我们在下面这个网站下载jQuery文件</p><blockquote><p><a href="http://www.jq22.com/jquery-info122">http://www.jq22.com/jquery-info122</a></p></blockquote><p>在下面这个网站下载jquery.json2xml.js和jquery.xml2json.js两个组件</p><blockquote><p><a href="https://json.cn/component.html">https://json.cn/component.html</a></p></blockquote><p>先引入下载的三个js文件，然后就可以使用了，引入顺序很重要</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.json2xml.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.xml2json.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将XML字符串转化为JSON字符串的过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;&lt;root&gt;&quot;</span>+</span><br><span class="line">          <span class="string">&quot;&lt;name&gt;John&lt;/name&gt;&quot;</span>+</span><br><span class="line">          <span class="string">&quot;&lt;age&gt;19&lt;/age&gt;&quot;</span>+</span><br><span class="line">          <span class="string">&quot;&lt;hobby&gt;Sing&lt;/hobby&gt;&quot;</span>+</span><br><span class="line">          <span class="string">&quot;&lt;hobby&gt;dance&lt;/hobby&gt;&quot;</span>+</span><br><span class="line">          <span class="string">&quot;&lt;hobby&gt;Rap&lt;/hobby&gt;&quot;</span>+</span><br><span class="line">          <span class="string">&quot;&lt;hobby&gt;basketball&lt;/hobby&gt;&quot;</span>+</span><br><span class="line">          <span class="string">&quot;&lt;/root&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = $.<span class="title function_">xml2json</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonstr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonstr);</span><br></pre></td></tr></table></figure><p>将Javascript对象转换为XML字符串的过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">19</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xmlstr = $.<span class="title function_">json2xml</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xmlstr);</span><br></pre></td></tr></table></figure><h2 id="GeoJSON和TopoJSON"><a href="#GeoJSON和TopoJSON" class="headerlink" title="GeoJSON和TopoJSON"></a>GeoJSON和TopoJSON</h2><p>下面这个网站，可以在线在地图上表示GeoJSON信息</p><blockquote><p><a href="http://geojson.io/">http://geojson.io</a></p></blockquote><p>GeoJSON和TopoJSON是符合JSON语法规则的两种数据格式，用于表示地理信息</p><ul><li>GeoJSON<br>GeoJSON用于表示地理空间信息，它的最外层是一个对象，对象可表示几何体(Geometry)、特征(Feature)、特征集合(FeatureCollection)<br>最外层的GeoJSON里可能包含多个子对象，每一个GeoJSON对象都有一个type属性，表示对象类型，有下面这些类型<ul><li>Point 点</li><li>MultiPoint 多点</li><li>LineString 线</li><li>MultiLineString 多线</li><li>Polygon 面</li><li>MultiPolygon 多面</li><li>GeometryCollection 几何体集合</li><li>Feature 特征</li><li>FeatureCollection 特征集合</li></ul></li></ul><p>如果type值为Point、MultiPoint、LineString、MultiLineString、Polygon、MultiPolygon，对象必有变量coordinates<br>如果type值为GeometryCollection，对象必有变量geometries，其值是一个数组，数组每一项都是一个几何对象<br>如果type值为Feature，对象必有变量geometry，表示几何体其值为一个几何体对象。此特征对象还包含一个properties，表示特征，其值可以是任意JSON对象或者Null</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;GeometryCollection&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;geometries&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Point&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">50</span><span class="punctuation">,</span><span class="number">30</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LineString&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">[</span><span class="number">50</span><span class="punctuation">,</span><span class="number">30</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="punctuation">[</span><span class="number">100</span><span class="punctuation">,</span><span class="number">30</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;Feature&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;四川成都&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;geometry&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;Point&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">104.05</span><span class="punctuation">,</span><span class="number">30.68</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>TopoJSON<br>TopoJSON是GeoJSON按拓扑学编码后的扩展形式<br>TopoJSON消除了冗余，相比TopoJSON文件较小</li></ul><p>下面这个网站可以进行TopoJSON和GeoJSON格式的转换</p><blockquote><p><a href="https://mapshaper.org/">https://mapshaper.org/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天，我的JSON学习算是告一段落了，不过只是入门阶段，我只是掌握了一些基础语法，下面是我的学习笔记，有兴趣的小伙伴可以看一看，这不是一篇教</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JSON" scheme="https://jcxiaozhan.gitee.io/tags/JSON/"/>
    
    <category term="JavaScript" scheme="https://jcxiaozhan.gitee.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>聊聊PanDownload</title>
    <link href="https://jcxiaozhan.gitee.io/2020/04/17/%E8%81%8A%E8%81%8APanDownload/"/>
    <id>https://jcxiaozhan.gitee.io/2020/04/17/%E8%81%8A%E8%81%8APanDownload/</id>
    <published>2020-04-16T16:00:00.000Z</published>
    <updated>2022-07-03T03:19:25.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="这篇文章，就PanDownload开发者被抓事件，我想谈谈自己的看法"><a href="#这篇文章，就PanDownload开发者被抓事件，我想谈谈自己的看法" class="headerlink" title="这篇文章，就PanDownload开发者被抓事件，我想谈谈自己的看法"></a>这篇文章，就PanDownload开发者被抓事件，我想谈谈自己的看法</h3><p>事情是这样的，2020年4月15日下午，PanDownload开发者蔡某萌被抓，他开发的这款软件可以突破百度网盘限速从而高速下载网盘文件，软件完全免费，深受大家喜欢。今年2月，有人报案说PanDownload泄漏了自己的隐私，警方开始调查。蔡某萌被抓后，警方爆出他非法盈利30余万，给百度公司带来了上千万的损失。</p><p>事发之后，各大贴吧论坛反应还是挺大的，可见这个软件用户群数量的庞大，网上骂声一片，矛头直指百度，你可能会说，为什么盗版软件侵权，正版软件却背负骂名呢。这就要说说百度网盘恶心人的限速机制了，普通用户是完全没有体验可言的，从网盘下载文件，限速最低可以到几kb&#x2F;s，就算是你交钱开通了所谓的超级会员，好像也不尽人意，据网友反映，好像还有个下载量限制，本人也有幸借过SVIP账号对比过两款软件的下载速度，下载同样的文件包，我的百度网盘客户端总下载速度4M&#x2F;s，而PanDownload总下载速度跑到了7M&#x2F;s，可见百度网盘对于SVIP也有限速机制。对于大部分用户而言，他们交钱开会员就是为了有一个好的体验(ps:博主从来没有开过会员，穷！)，很明显，百度让大家都失望了。</p><blockquote><p>领导，我求求你们别再追查PanDownload了，行吗？263块的超级会员svip，我充了三年，房子充没了。现在好不容易有了速度快的，你们非说它是假的。那软件假不假我们能不知道吗?那软件本来就不用花钱，你说制作者能赚钱吗？谁家能不下载呢，你就能保证你这一辈子不下载吗？你把他抓走了，我们都得2kb&#x2F;s。我不想慢，我想快点。——《我不是盘神》</p></blockquote><p>上面这是B站网友们玩的一个梗，虽然是梗，但我觉得，盘神这个比喻很恰当，虽然一些人已经把这次事件上升到了阶级矛盾，说是资本主义的垄断和剥削。我不是很懂，我只能站在我所能理解的角度去看待这个问题，百度网盘现在确实属于一家独大的局面，因为好多网上流传的资源都是用的百度网盘，庞大的用户群体让它有了垄断的资本，所以，没办法，大家都得用，然后，百度就真的没把用户当人看了，十分恶心的限速机制，网友戏称“毒云”，我记得很久以前我用的时候，还是很好的，那个时候叫百度云，普通用户的下载速度也能够到500K&#x2F;s左右，会员提速也是真实有效的，那个时候，百度云的评价还是很好的，大家也没抱怨过，会员机制也可以理解，毕竟要存放那么多人的资料，服务器是需要经费的。到后来，百度干的事情就越来越流氓了，以至于到如今，发生这件事，网友们一边倒地支持PanDwonload，替百度说话的没几个。</p><p>并不是推崇盗版，我们来简单分析下这件事，PanDownload从发布到现在应该也有一两年了，而且很早之前也出现过PanDownload加速无效的情况，估计是被百度网盘官方给制裁过。为什么当时不抓，现在来抓？刘某报案称自己隐私被泄露。你要不是个技术人员，你怎么知道自己隐私被泄露了？你是在某某网站上看到了自己的视频、照片、个人信息，还是什么，又怎么知道是通过PanDownload泄漏的？这个地方我真的很困惑，我觉得就是百度安排的，目的嘛，就是PanDownload确实影响到了百度的利益，然后加速下载的渠道，百度控制不了了，就找警察了。但是你说PanDownload造成了百度上千万的损失，我还真就不相信。软件上明确表示永久免费，严禁倒卖。非法盈利30万，这30万虽然是用户对软件的捐赠，这个从法律层面来说，确实违法了，但是从道德层面来讲，这是用户自愿的，是对软件的一种认可，而不像百度网盘，真就逼迫你消费，还不给你一个好的体验。</p><p>这次的事件，无非就是百度想要杀鸡儆猴，制裁这些损害自己利益的软件，目的达到了，拿了钱，失了人心，如果不从自身改变，等到哪天有一个替代品出现，百度网盘会凉得很快很彻底。</p><p><strong>以上只是我的个人观点，也不一定是正确的，这个事情每个人都有每个人自己的理解吧。虽然这个大佬这次触碰到法律了，但是技术无罪，我们也应该感谢他曾经用爱发电。</strong></p><img src="https://img.jcxiaozhan.top/PanDownload.jpg">]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;这篇文章，就PanDownload开发者被抓事件，我想谈谈自己的看法&quot;&gt;&lt;a href=&quot;#这篇文章，就PanDownload开发者被抓事件，我想谈谈自己的看法&quot; class=&quot;headerlink&quot; title=&quot;这篇文章，就PanDownload开发者被抓事件</summary>
      
    
    
    
    <category term="生活琐碎" scheme="https://jcxiaozhan.gitee.io/categories/%E7%94%9F%E6%B4%BB%E7%90%90%E7%A2%8E/"/>
    
    
    <category term="PanDownload" scheme="https://jcxiaozhan.gitee.io/tags/PanDownload/"/>
    
    <category term="百度云" scheme="https://jcxiaozhan.gitee.io/tags/%E7%99%BE%E5%BA%A6%E4%BA%91/"/>
    
  </entry>
  
</feed>
