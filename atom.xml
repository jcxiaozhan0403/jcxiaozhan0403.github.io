<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JC小站</title>
  
  <subtitle>与你共享生活和今日份的丧</subtitle>
  <link href="https://jcxiaozhan.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://jcxiaozhan.gitee.io/"/>
  <updated>2021-11-13T16:10:25.566Z</updated>
  <id>https://jcxiaozhan.gitee.io/</id>
  
  <author>
    <name>John Cena</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>近况</title>
    <link href="https://jcxiaozhan.gitee.io/2021/11/10/%E8%BF%91%E5%86%B5/"/>
    <id>https://jcxiaozhan.gitee.io/2021/11/10/%E8%BF%91%E5%86%B5/</id>
    <published>2021-11-09T16:00:00.000Z</published>
    <updated>2021-11-13T16:10:25.566Z</updated>
    
    <content type="html"><![CDATA[<p>上个月20号那天我参加了人生的第二个面试，boos直聘上面找到的，招一个全栈开发实习生，因为在学校写过几个项目，前后端我都写得还可以，我觉得应该能够胜任。收到面试邀请之后，我就过去了，去之前还花了整整一天时间，巩固复习了我的前端技术，就是为了到时候能和面试官侃侃而谈。到之后，我人蒙了，老板下楼接的我，我们来到一个办公室，有一张办公桌上摆了文件和电脑，那是他的办公桌，除此之外，还有四张空桌子，老板拿过我的简历，简单看了不到1分钟，开始跟我聊他的宏图大志，大概意思就是，需要开发一个款软件，所以他现在要招4个员工，嗯，后面就不用多说了吧，这是一家还在创业阶段的公司。</p><p>我的第二次面试就这样草草结束了，说实话，两次面试，我认为自己没有太多的收获，但我至少清楚了一点，像软件开发这个技术性很强的岗位，只要你技术足够到位，面试就会很轻松。从20号回来之后，我开始卷起来了了，早上7点我就起床去教室，每天下课后，在教室学到8点左右才回宿舍吃饭，吃完饭又开始学，学到十一二点的样子睡觉，第二天又重复，周末也是如此。就这样卷了5天，这5天我学完了一套springboot的课程，还顺带把ssm框架的课程又复习了一遍。</p><p>25号就业部老师说我简历过了，通知26号上午去面试，我就去了，这一次是没有任何准备的，但是我面上了，公司的评价是我的沟通能力、学习态度、踏实的性格符合他们的预期，虽然这一次面试因为岗位的原因，基本上没有涉及到技术性的问答，但是这是第一次收到offer，心里还是激动的。我面试的岗位是项目实施工程师实习，说白了，就是帮人安装部署，教他们用，我觉得是个人就能做的活。其实完全不是我心中预期的职位，我的初心就是做一个技术人员，往架构师方向发展。但是这一次因为时间的关系，我还是选择了妥协，混个实习经验，正好事情少的话可以抓一抓的专升本复习。那两天为了确保1号能按时上岗，我忙着签各种协议，办理离校，同时还要抽出时间来准备30号那天的毕业答辩，属实给我人整麻了。</p><p>30号那天的毕业答辩很顺利，晖哥和刀哥都给予了我很高的评价，告诫我，只要不断学习，我是能在这个行业干出一点成绩的，他们俩都是我大学遇到的好老师，教学技能过硬，同时还时常为我们的未来出谋划策，能被他们认可，我也很高兴！</p><p>上了一个星期班了，由于没有给我分配任务，我每天就像个闲人一样，做做华迪最后安排的小组项目，本着交任务一切从简的原则，很快，这两天马上就要完工了。因为公司附近确诊了一例，前两天我黄码了，被拉去隔离了两天，还好两次检测正常，人没事，现在这几天安排居家办公，我觉得算是因祸得福吧，毕竟每天上下班，光在路上就要花3小时，属实难受。</p><p>昨晚逛B站，看见某大佬的评论，感觉说得很好，他说，现在很多人在学习的时候很浮躁，我们这些刚学完框架就急着工作的，面试自然是地狱难度的，一问三不知。何不好好跟着学习路线，稳步向前，看源码，专研底层，学优化，当你掌握的东西多了，自然就有底气了，面试自然就能够侃侃而谈。</p><p>总的来说呢，现在的每一天我都很充实，作为一个踏入但是没有完全踏入社会的小白，我是至少弄清楚了未来一到两年里我要做的事情，我的目标很清晰、很明确，首先就是我的专升本，在这剩下不到半年的复习时间里，我要沉下心来坚持复习，准备明年5月份的考试。其次就是技术上的提升，如果将大部分时间精力投入到专升本的复习中，那么之后很长一段时间里，我应该是不会学习到什么新的技术了，所以博客应该不会怎么更新了，我也愿意拿这半年的时间，来搏这一次改变命运的机会，但是如果有空闲时间，我还是会学习一点技术的，说实话，专研技术的过程我是有感受到快乐的，因为这些都是我所热爱的！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上个月20号那天我参加了人生的第二个面试，boos直聘上面找到的，招一个全栈开发实习生，因为在学校写过几个项目，前后端我都写得还可以，我觉得应该能够胜任。收到面试邀请之后，我就过去了，去之前还花了整整一天时间，巩固复习了我的前端技术，就是为了到时候能和面试官侃侃而谈。到之后</summary>
      
    
    
    
    <category term="闲谈" scheme="https://jcxiaozhan.gitee.io/categories/%E9%97%B2%E8%B0%88/"/>
    
    
    <category term="近况" scheme="https://jcxiaozhan.gitee.io/tags/%E8%BF%91%E5%86%B5/"/>
    
  </entry>
  
  <entry>
    <title>PageHelper的简单使用</title>
    <link href="https://jcxiaozhan.gitee.io/2021/10/18/PageHelper%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://jcxiaozhan.gitee.io/2021/10/18/PageHelper%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2021-10-17T16:00:00.000Z</published>
    <updated>2021-10-18T07:22:18.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>PageHelper是一款好用的开源免费的Mybatis第三方分页插件，<a href="https://pagehelper.github.io/">点击访问</a></p></blockquote><img src="https://img.jcxiaozhan.top/PageHelper%E4%B8%80.jpg"><h2 id="后端-SSM项目"><a href="#后端-SSM项目" class="headerlink" title="后端(SSM项目)"></a>后端(SSM项目)</h2><div class="note warning flat"><p>注：这里只给出了关键部分代码，分页操作是通过对获取到的List集合进行二次封装实现的，具体请注意看Service层与Contoller层代码，其他代码未变动，按照业务逻辑正常编写即可</p></div><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--分页--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--分页插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;plugins&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;helperDialect&quot;</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String cls;</span><br><span class="line">    <span class="keyword">private</span> String num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mapper接口"><a href="#mapper接口" class="headerlink" title="mapper接口"></a>mapper接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询全部Student,返回list集合</span></span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">findStudentList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询全部Student,返回list集合</span></span><br><span class="line">    <span class="function">PageInfo <span class="title">findStudentList</span><span class="params">(<span class="keyword">int</span> pageNum,<span class="keyword">int</span> pageSize)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PageInfo <span class="title">findStudentList</span><span class="params">(<span class="keyword">int</span> pageNum,<span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 分页语句之后紧跟的第一次查询才会分页，所以此结构最合理</span></span><br><span class="line">    PageHelper.startPage(pageNum,pageSize);</span><br><span class="line">    List&lt;Student&gt; list = studentMapper.findStudentList();</span><br><span class="line">    PageInfo pageInfo = <span class="keyword">new</span> PageInfo(list);</span><br><span class="line">    <span class="keyword">return</span> pageInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/list/&#123;pageNum&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">// 前台传递两个参数，第一个参数为页码，就是你要查询第几页的数据，第二个参数是，一页几条记录</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageInfo <span class="title">list</span><span class="params">(Model model, <span class="meta">@PathVariable</span> <span class="keyword">int</span> pageNum, <span class="meta">@PathVariable</span> <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">    PageInfo pageInfo = studentService.findStudentList(pageNum,pageSize);</span><br><span class="line">    <span class="comment">// 插件将处理好后的集合封装在了PageInfo对象里面，直接返回到前端即可</span></span><br><span class="line">    <span class="keyword">return</span> pageInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PageInfo类的常见属性"><a href="#PageInfo类的常见属性" class="headerlink" title="PageInfo类的常见属性"></a>PageInfo类的常见属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageInfo</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="comment">//当前页</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> pageNum;</span><br><span class="line"><span class="comment">//每页的数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> pageSize;</span><br><span class="line"><span class="comment">//当前页的数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="comment">//由于startRow 和endRow 不常用，这里说个具体的用法</span></span><br><span class="line"><span class="comment">//可以在页面中&quot;显示startRow 到endRow 共size 条数据&quot;</span></span><br><span class="line"><span class="comment">//当前页面第一个元素在数据库中的行号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> startRow;</span><br><span class="line"><span class="comment">//当前页面最后一个元素在数据库中的行号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> endRow;</span><br><span class="line"><span class="comment">//总记录数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> total;</span><br><span class="line"><span class="comment">//总页数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> pages;</span><br><span class="line"><span class="comment">//结果集</span></span><br><span class="line"><span class="keyword">private</span> List&lt;T&gt; list;</span><br><span class="line"><span class="comment">//前一页</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> prePage;</span><br><span class="line"><span class="comment">//下一页</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> nextPage;</span><br><span class="line"><span class="comment">//是否为第一页</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isFirstPage = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//是否为最后一页</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isLastPage = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//是否有前一页</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> hasPreviousPage = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//是否有下一页</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> hasNextPage = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//导航页码数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> navigatePages;</span><br><span class="line"><span class="comment">//所有导航页号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] navigatepageNums;</span><br><span class="line"><span class="comment">//导航条上的第一页</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> navigateFirstPage;</span><br><span class="line"><span class="comment">//导航条上的最后一页</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> navigateLastPage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="引入资源文件"><a href="#引入资源文件" class="headerlink" title="引入资源文件"></a>引入资源文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.usebootstrap.com/bootstrap/4.4.1/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 搭建基本表结构，固定表头 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-hover table-striped&quot;</span> <span class="attr">style</span>=<span class="string">&#x27;vertical-align: middle;text-align: center;&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>班级<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;tbody&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用nav搭建基本页码结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 offset-md-9 mt-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pageNum&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Javascript部分"><a href="#Javascript部分" class="headerlink" title="Javascript部分"></a>Javascript部分</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 页面加载时默认获取第一页数据，这里是一页5条记录的分法</span></span></span><br><span class="line">        getPageList(1,5);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 首页</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> navigateFirstPage;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 末页</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> navigateLastPage;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 当前页</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> pageNum;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 下一页</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> nextPage;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 上一页</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> prePage;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 页码集</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> navigatepageNums;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getPageList</span>(<span class="params">pageNum,pageSize</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;查询第&quot;</span> + pageNum + <span class="string">&quot;页数据，每页&quot;</span> + pageSize + <span class="string">&quot;条&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        $.get(&#123;</span></span><br><span class="line"><span class="javascript">            url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/student/list/&quot;</span> + pageNum + <span class="string">&quot;/&quot;</span> + pageSize,</span></span><br><span class="line">            data:&#123;&#125;,</span><br><span class="line"><span class="javascript">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line">                myTable(data);</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;失败&quot;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 表格渲染</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myTable</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取后台传递过来的一些重要的对象属性</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 首页</span></span></span><br><span class="line">        navigateFirstPage = data.navigateFirstPage;</span><br><span class="line"><span class="javascript">        <span class="comment">// 末页</span></span></span><br><span class="line">        navigateLastPage = data.navigateLastPage</span><br><span class="line"><span class="javascript">        <span class="comment">// 当前页</span></span></span><br><span class="line">        pageNum = data.nowPage;</span><br><span class="line"><span class="javascript">        <span class="comment">// 下一页</span></span></span><br><span class="line">        nextPage = data.nextPage;</span><br><span class="line"><span class="javascript">        <span class="comment">// 上一页</span></span></span><br><span class="line">        prePage = data.prePage;</span><br><span class="line"><span class="javascript">        <span class="comment">// 页码集</span></span></span><br><span class="line">        navigatepageNums = data.navigatepageNums;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 取出数据</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> arr = data.list;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 清空表格</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#tbody&quot;</span>).html(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 填充表格</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 已经拿到了数据，他们封装在一个数组里面，这里我是JSP页面，所以拼接有点不一样，具体拼接请自己思考</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>; i&lt;arr.length ;i++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> html = <span class="string">&quot;&lt;tr&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;&lt;td&gt;&quot;</span> + arr[i].id +<span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;&lt;td&gt;&quot;</span> + arr[i].name +<span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;&lt;td&gt;&quot;</span> + arr[i].age +<span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;&lt;td&gt;&quot;</span> + arr[i].sex +<span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;&lt;td&gt;&quot;</span> + arr[i].cls +<span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;&lt;td&gt;&quot;</span> + arr[i].num +<span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;&lt;td&gt;&quot;</span> +</span></span><br><span class="line"><span class="handlebars"><span class="xml">                &#x27;<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;c:url value=&quot;</span>/<span class="attr">student</span>/<span class="attr">edit</span>/&#x27;+ <span class="attr">arr</span>[<span class="attr">i</span>]<span class="attr">.id</span> +&#x27;&quot; /&gt;</span>&quot; style=&quot;margin-right: 10px&quot;&gt;修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#x27; +</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                &#x27;<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;c:url value=&quot;</span>/<span class="attr">student</span>/<span class="attr">delete</span>/&#x27;+ <span class="attr">arr</span>[<span class="attr">i</span>]<span class="attr">.id</span> +&#x27;&quot; /&gt;</span>&quot;&gt;删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#x27; +</span></span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;&lt;/tr&gt;&quot;</span></span></span><br><span class="line">            </span><br><span class="line"><span class="javascript">            <span class="comment">// 追加表格体到页面上</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#tbody&quot;</span>).append(html);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 清空页数导航栏</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#pageNum&quot;</span>).html(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 填充页数导航栏</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;navigatepageNums.length ;i++) &#123;</span></span><br><span class="line">            nowPage = navigatepageNums[i];</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> pageNum = <span class="string">&#x27;&lt;li class=&quot;page-item&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="handlebars"><span class="xml">                &#x27;<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;getPageList($(this).text(),5)&quot;</span>&gt;</span>&#x27; + nowPage + &#x27;<span class="tag">&lt;/<span class="name">button</span>&gt;</span>&#x27; +</span></span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;&lt;/li&gt;&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> pageStart = <span class="string">&#x27;&lt;li class=&quot;page-item&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="handlebars"><span class="xml">                &#x27;<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;getPageList(navigateFirstPage,5)&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span>&#x27; +</span></span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;&lt;/li&gt;&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> pageEnd = <span class="string">&#x27;&lt;li class=&quot;page-item&quot;&gt;&#x27;</span> +</span></span><br><span class="line"><span class="handlebars"><span class="xml">                &#x27;<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;getPageList(nextPage,5)&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span>&#x27; +</span></span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;&lt;/li&gt;&quot;</span>;</span></span><br><span class="line"></span><br><span class="line">            if(i == 0) &#123;</span><br><span class="line">                pageNum = pageStart + pageNum;</span><br><span class="line">            &#125;</span><br><span class="line">            if(i == navigatepageNums.length -1) &#123;</span><br><span class="line">                pageNum = pageNum + pageEnd;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="javascript">            <span class="comment">// 追加导航栏到页面上</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#pageNum&quot;</span>).append(pageNum);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 为当前页面添加激活样式</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;li.page-item&quot;</span>)[data.pageNum].className += <span class="string">&#x27; active&#x27;</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;PageHelper是一款好用的开源免费的Mybatis第三方分页插件，&lt;a href=&quot;https://page</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://jcxiaozhan.gitee.io/tags/Java/"/>
    
    <category term="Mybatis" scheme="https://jcxiaozhan.gitee.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Java注解与反射</title>
    <link href="https://jcxiaozhan.gitee.io/2021/10/05/Java%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/"/>
    <id>https://jcxiaozhan.gitee.io/2021/10/05/Java%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/</id>
    <published>2021-10-04T16:00:00.000Z</published>
    <updated>2021-10-05T08:40:26.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>概念：类加载之后，在堆内存的方法区中就生产了一个Class类型的对象，<code>一个类只有一个Class对象</code>，这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构，这个对象就像是一面镜子，透过这个镜子看到类的结构，称之为反射</p><blockquote><p>正常方式：引入需要的”包类”名称 ==&gt; 通过new实例化 ==&gt;获取实例化对象<br>反射方式：实例化对象 ==&gt; getClass()方法 ==&gt; 取得完整的”包类”名称</p></blockquote><ul><li>优点：可以实现动态创建对象和编译，体现出很大的灵活性</li><li>缺点：对性能有影响。使用反射基本上是一种解释操作，我们告诉JVM要做什么，这类操作总是慢于直接执行相同的操作<br>一个类只有一个Class对象</li></ul><img src="https://img.jcxiaozhan.top/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84%E4%B8%80.jpg"><h3 id="获取Class对象的几种方式"><a href="#获取Class对象的几种方式" class="headerlink" title="获取Class对象的几种方式"></a>获取Class对象的几种方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Person student = <span class="keyword">new</span> Studnet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式一：通过对象获取</span></span><br><span class="line">        Class c1 = student.getClass();</span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式二：forName获取</span></span><br><span class="line">        Class c2 = Class.forName(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式三：通过类名.class获取</span></span><br><span class="line">        Class c3 = Student.class;</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式四：对于基本数据类型，可以使用其包装类的TYPE属性获取</span></span><br><span class="line">        Class c4 = Integer.TYPE;</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Studnet</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="所有类型的Class对象"><a href="#所有类型的Class对象" class="headerlink" title="所有类型的Class对象"></a>所有类型的Class对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有类型的Class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class c1 = Object.class; <span class="comment">//类</span></span><br><span class="line">        Class c2 = Comparable.class; <span class="comment">//接口</span></span><br><span class="line">        Class c3 = String[].class; <span class="comment">//一维数组</span></span><br><span class="line">        Class c4 = <span class="keyword">int</span>[][].class; <span class="comment">//二维数组</span></span><br><span class="line">        Class c5 = Override.class; <span class="comment">//注解</span></span><br><span class="line">        Class c6 = ElementType.class; <span class="comment">//枚举</span></span><br><span class="line">        Class c7 = Integer.class;  <span class="comment">//基本数据类型</span></span><br><span class="line">        Class c8 = <span class="keyword">void</span>.class; <span class="comment">//void</span></span><br><span class="line">        Class c9 = Class.class; <span class="comment">//Class</span></span><br><span class="line"></span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">        System.out.println(c6);</span><br><span class="line">        System.out.println(c7);</span><br><span class="line">        System.out.println(c8);</span><br><span class="line">        System.out.println(c9);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Class对象获取类信息"><a href="#Class对象获取类信息" class="headerlink" title="Class对象获取类信息"></a>Class对象获取类信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Class获取类的信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException </span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(c1.getName()); <span class="comment">// 获得包名 + 类名</span></span><br><span class="line">        System.out.println(c1.getSimpleName()); <span class="comment">// 获得类名</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得类的public属性</span></span><br><span class="line">        Field[] fields = c1.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取类的所有属性</span></span><br><span class="line">        fields = c1.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定属性</span></span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取类的方法：除了类自身的方法外，还会获取所继承的类中的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        Method[] methods = c1.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">        methods = c1.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定方法</span></span><br><span class="line">        Method getName = c1.getMethod(<span class="string">&quot;getName&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        Method setName = c1.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        System.out.println(getName);</span><br><span class="line">        System.out.println(setName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        Constructor[] constructors = c1.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        constructors = c1.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定构造器</span></span><br><span class="line">        Constructor declaredConstructor = c1.getDeclaredConstructor(String.class,<span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(declaredConstructor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h2><img src="https://img.jcxiaozhan.top/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84%E4%BA%8C.jpg"><img src="https://img.jcxiaozhan.top/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84%E4%B8%89.jpg"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试类的初始化过程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Main类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 主动引用</span></span><br><span class="line">        <span class="comment">//Son son = new Son();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射也会产生主动引用</span></span><br><span class="line">        Class.forName(<span class="string">&quot;Son&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 被动引用不会引起类的初始化</span></span><br><span class="line">        System.out.println(Son.b);</span><br><span class="line"></span><br><span class="line">        Son[] array = <span class="keyword">new</span> Son[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">        System.out.println(Son.M);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> M = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><img src="https://img.jcxiaozhan.top/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84%E5%9B%9B.jpg"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试类的初始化过程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取系统类加载器</span></span><br><span class="line">        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取系统类加载器的父类加载器(扩展类加载器)</span></span><br><span class="line">        ClassLoader parent = systemClassLoader.getParent();</span><br><span class="line">        System.out.println(parent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取扩展类加载器的父类加载器(根加载器)</span></span><br><span class="line">        ClassLoader parent1 = parent.getParent();</span><br><span class="line">        System.out.println(parent1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试当前类是哪个加载器加载的</span></span><br><span class="line">        ClassLoader classLoader = Class.forName(<span class="string">&quot;Test02&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试JDK内置的类是哪个加载器加载的</span></span><br><span class="line">        classLoader = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><ul><li><p>描述：某个特定的类加载器在接到加载类的请求时，首先将加载任务委托给父类加载器，依次递归，如果父类加载器可以完成类加载任务，就成功返回；只有父类加载器无法完成此加载任务时，才自己去加载。</p></li><li><p>意义：防止内存中出现多份同样的字节码</p></li></ul><h2 id="反射操作对象"><a href="#反射操作对象" class="headerlink" title="反射操作对象"></a>反射操作对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过反射，动态创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException </span>&#123;</span><br><span class="line">        <span class="comment">// 获得Class对象</span></span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射构建一个对象</span></span><br><span class="line">        Student student = (Student) c1.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过构造器构建对象</span></span><br><span class="line">        Constructor constructor = c1.getDeclaredConstructor(String.class,<span class="keyword">int</span>.class);</span><br><span class="line">        Student student1 = (Student)constructor.newInstance(<span class="string">&quot;小明&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射直接调用方法</span></span><br><span class="line">        Student student2 = (Student) c1.newInstance();</span><br><span class="line">        <span class="comment">// 通过反射获取一个方法</span></span><br><span class="line">        Method setName = c1.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>,String.class);</span><br><span class="line">        <span class="comment">// invoke激活获取的方法</span></span><br><span class="line">        setName.invoke(student2,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(student2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射操作属性</span></span><br><span class="line">        Student student3 = <span class="keyword">new</span> Student();</span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">// 对于私有属性，不能直接操作，需要关闭程序的安全检测,true为关闭</span></span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        name.set(student3,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(student3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射操作泛型"><a href="#反射操作泛型" class="headerlink" title="反射操作泛型"></a>反射操作泛型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反射操作泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">        Method method = Test02.class.getMethod(<span class="string">&quot;test1&quot;</span>, Map.class, List.class);</span><br><span class="line">        <span class="comment">// 获得泛型参数列表</span></span><br><span class="line">        Type[] genericParameterTypes = method.getGenericParameterTypes();</span><br><span class="line">        <span class="keyword">for</span> (Type genericParameterType : genericParameterTypes) &#123;</span><br><span class="line">            System.out.println(genericParameterType);</span><br><span class="line">            <span class="keyword">if</span> (genericParameterType <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">                <span class="comment">// 遍历参数列表内的泛型信息</span></span><br><span class="line">                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();</span><br><span class="line">                <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                    System.out.println(actualTypeArgument);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        method = Test02.class.getMethod(<span class="string">&quot;test2&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 获取泛型返回值</span></span><br><span class="line">        Type genericReturnType = method.getGenericReturnType();</span><br><span class="line">        <span class="keyword">if</span> (genericReturnType <span class="keyword">instanceof</span>  ParameterizedType) &#123;</span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments();</span><br><span class="line">            <span class="comment">// 遍历返回值内的泛型参数</span></span><br><span class="line">            <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                System.out.println(actualTypeArgument);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(Map&lt;String,String&gt; map, List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射操作注解"><a href="#反射操作注解" class="headerlink" title="反射操作注解"></a>反射操作注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反射操作泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, ClassNotFoundException, NoSuchFieldException </span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取注解</span></span><br><span class="line">        Annotation[] annotations = c1.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定的类注解的值</span></span><br><span class="line">        MyAnnotation annotation = (MyAnnotation) c1.getAnnotation(MyAnnotation.class);</span><br><span class="line">        System.out.println(annotation.value());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定的属性注解的值</span></span><br><span class="line">        Field f = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        MyAnnotation2 annotation1 = f.getAnnotation(MyAnnotation2.class);</span><br><span class="line">        System.out.println(annotation1.columnName());</span><br><span class="line">        System.out.println(annotation1.type());</span><br><span class="line">        System.out.println(annotation1.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation(&quot;student&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="meta">@MyAnnotation2(columnName = &quot;name&quot;,type = &quot;String&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@MyAnnotation2(columnName = &quot;age&quot;,type = &quot;int&quot;,length = 4)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2 &#123;</span><br><span class="line">    <span class="function">String <span class="title">columnName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;反射&quot;&gt;&lt;a href=&quot;#反射&quot; class=&quot;headerlink&quot; title=&quot;反射&quot;&gt;&lt;/a&gt;反射&lt;/h2&gt;&lt;p&gt;概念：类加载之后，在堆内存的方法区中就生产了一个Class类型的对象，&lt;code&gt;一个类只有一个Class对象&lt;/code&gt;，这个对象就包含</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://jcxiaozhan.gitee.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程</title>
    <link href="https://jcxiaozhan.gitee.io/2021/10/03/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://jcxiaozhan.gitee.io/2021/10/03/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-10-02T16:00:00.000Z</published>
    <updated>2021-10-03T13:54:38.421Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线程、进程、多线程"><a href="#线程、进程、多线程" class="headerlink" title="线程、进程、多线程"></a>线程、进程、多线程</h2><ul><li>进程：进程是程序的一次执行过程，是一个动态的概念，是系统资源分配的单位</li><li>线程：通常在一个进程中可以包含若干个线程，一个进程中至少有一个线程，不然没有存在的意义，线程是CPU调度和执行的单位</li><li>多线程：真正的多线程是有多个CUP，同时执行，如果在只有一个CPU的情况下，同一时间只能执行一个代码，因为切换速度很快，造成了同时执行的假象</li></ul><blockquote><ol><li>线程就是独立的执行路径</li><li>在程序运行时，即使没有自己创建线程，后台也会有多个线程，如主线程、gc线程</li><li>main()称为主线程，为系统入口，用于执行整个程序</li><li>在一个线程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不可人为干预的</li><li>对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制</li><li>线程会带来额外的开销，如CPU调度时间(排队时间)，并发控制开销</li><li>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致</li></ol></blockquote><h2 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h2><h3 id="方式一：继承Thread类"><a href="#方式一：继承Thread类" class="headerlink" title="方式一：继承Thread类"></a>方式一：继承Thread类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承Thread类，重写run()方法，在run()方法体内编写业务代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在吃饭-------------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="comment">// 调用start()开启线程</span></span><br><span class="line">        test.start();</span><br><span class="line">        <span class="comment">// 由执行结果可以知道，多个线程是交替执行的，具体执行先后顺序是靠调度器调度的，无法人为干预</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span> ;i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在睡觉&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式二：继承Runnable接口实现-常用"><a href="#方式二：继承Runnable接口实现-常用" class="headerlink" title="方式二：继承Runnable接口实现(常用)"></a>方式二：继承Runnable接口实现(常用)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在吃饭-------------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(test).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span> ;i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在睡觉&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式三：继承Callable接口实现"><a href="#方式三：继承Callable接口实现" class="headerlink" title="方式三：继承Callable接口实现"></a>方式三：继承Callable接口实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承Callable接口，重写call()方法，方法体里面编写业务代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在吃饭-------------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建服务</span></span><br><span class="line">        ExecutorService ser = Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 提交执行(开启线程)</span></span><br><span class="line">        Future&lt;Boolean&gt; result = ser.submit(test);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用get获取返回值，但是get()会阻塞线程</span></span><br><span class="line">        <span class="comment">//System.out.println(result.get());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭服务</span></span><br><span class="line">        ser.shutdownNow();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span> ;i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在睡觉&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初识并发问题"><a href="#初识并发问题" class="headerlink" title="初识并发问题"></a>初识并发问题</h2><p>并发问题：多个线程操作同时操作共享数据所导致的</p><h3 id="Demo：抢票"><a href="#Demo：抢票" class="headerlink" title="Demo：抢票"></a>Demo：抢票</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tecikNums = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tecikNums != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    tecikNums--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;==&gt;&quot;</span> + <span class="string">&quot;拿到了第&quot;</span> + tecikNums + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    <span class="comment">// 线程休眠，模拟延时</span></span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(test,<span class="string">&quot;黄牛&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(test,<span class="string">&quot;小明&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(test,<span class="string">&quot;小红&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Demo：龟兔赛跑"><a href="#Demo：龟兔赛跑" class="headerlink" title="Demo：龟兔赛跑"></a>Demo：龟兔赛跑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String winner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (gameOver(i)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过线程名选择对应操作</span></span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;乌龟&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 乌龟每一步都比兔子慢10毫秒</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;乌龟走了第&quot;</span> + i + <span class="string">&quot;步&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;兔子&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 兔子走到第50步的时候，模拟兔子睡觉</span></span><br><span class="line">                <span class="keyword">if</span> (i==<span class="number">50</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1700</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;兔子走了第&quot;</span> + i + <span class="string">&quot;步&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启乌龟和兔子两个线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(test,<span class="string">&quot;乌龟&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(test,<span class="string">&quot;兔子&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断比赛是否继续</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">gameOver</span><span class="params">(<span class="keyword">int</span> step)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (winner != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (step == <span class="number">100</span>) &#123;</span><br><span class="line">            winner = Thread.currentThread().getName();</span><br><span class="line">            System.out.println(<span class="string">&quot;胜利者：&quot;</span> + winner);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h2><ul><li>获取当前线程名字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.currentThread().getName()</span><br></pre></td></tr></table></figure><ul><li>线程休眠</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每个对象都有一个锁，sleep不会释放锁</span></span><br><span class="line"><span class="comment">// 休眠1秒</span></span><br><span class="line">Thread.Sleep(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><ul><li>线程礼让</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 线程礼让是让当前进程暂停，转为就绪状态，让CUP重新调度，所以礼让不一定成功，主要看CPU怎么调度</span></span><br><span class="line">Thread.yield();</span><br></pre></td></tr></table></figure><ul><li>线程强制执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用join方法会让主线程处于阻塞状态，先将线程内的内容执行完毕，再次开始执行主线程</span></span><br><span class="line">Demo demo = <span class="keyword">new</span> Demo();</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(demo);</span><br><span class="line">thread.join();</span><br></pre></td></tr></table></figure><ul><li>线程优先级：优先级低只是意味着获得调度的概率低，并不是优先级低就不会被调用了，还是得看调度器的调度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 线程的优先级用数字表示，范围1~10</span></span><br><span class="line">Thread.MIN_PRIORITY = <span class="number">1</span>;</span><br><span class="line">Thread.MAX_PRIORITY = <span class="number">10</span>;</span><br><span class="line">Thread.NORM_PRIORITY = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 获取线程优先级</span></span><br><span class="line">Demo demo = <span class="keyword">new</span> Demo();</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(demo);</span><br><span class="line">thread.getPriority();</span><br><span class="line"><span class="comment">// 设置线程优先级</span></span><br><span class="line">thread.setPriority(xxx);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程优先级的实现原理，类似于买彩票，买一张中奖概率小，那就买100张，其实这里设置优先级就是增加提供给调度器的线程数量，数量越大，就越容易被调度</span></span><br></pre></td></tr></table></figure><h2 id="Lamda表达式"><a href="#Lamda表达式" class="headerlink" title="Lamda表达式"></a>Lamda表达式</h2><p>函数式接口：只包含一个方法的接口就是函数式接口，也叫功能性接口</p><p>Lamda简化了匿名内部类，方法引用简化了lamda</p><p>基本语法：<code>接口 对象 = (参数表) -&gt; &#123;代码实现&#125;;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数式接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lamda表达式用法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lamda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 基本写法</span></span><br><span class="line">        Demo demo01 = (<span class="keyword">int</span> i) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello World&quot;</span> + i);</span><br><span class="line">        &#125;;</span><br><span class="line">        demo01.test(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简化一：参数类型可省略</span></span><br><span class="line">        Demo demo02 = (i) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello World&quot;</span> + i);</span><br><span class="line">        &#125;;</span><br><span class="line">        demo02.test(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简化二：括号可省略</span></span><br><span class="line">        Demo demo03 = i -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello World&quot;</span> + i);</span><br><span class="line">        &#125;;</span><br><span class="line">        demo03.test(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简化三：如果只有一行业务代码，那么花括号可省略</span></span><br><span class="line">        Demo demo04 = i -&gt; System.out.println(<span class="string">&quot;Hello World&quot;</span> + i);</span><br><span class="line">        demo04.test(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lamda表达式在多线程中的运用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 用Lamda表达式+匿名类的方式实现了Runnable接口</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我在吃饭-------------------&quot;</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 由执行结果可以知道，多个线程是交替执行的，具体是靠CUP调度，无法人为干预</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span> ;i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在睡觉&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><img src="https://img.jcxiaozhan.top/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%80.jpg"><p>线程中断后，进入死亡状态，就不可再次启动了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>); <span class="comment">//TIMED_WAITING</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;线程终止了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(test);</span><br><span class="line"></span><br><span class="line">        Thread.State state = thread.getState();</span><br><span class="line">        System.out.println(state); <span class="comment">//NEW</span></span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state); <span class="comment">//RUNNABLE</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只要线程不终止，就一直打印线程状态</span></span><br><span class="line">        <span class="keyword">while</span> (Thread.State.TERMINATED != state) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            state = thread.getState();</span><br><span class="line">            System.out.println(state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h3><p>JDK提供了stop()和destroy()方法来停止线程，但是这两个方法都已经废除，不推荐使用</p><p>最好的做法是，自己创建一个标志位来控制线程的停止,达到某一条件，就自动停止</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在吃饭-------------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="comment">// 调用start()开启线程</span></span><br><span class="line">        test.start();</span><br><span class="line">        <span class="comment">// 由执行结果可以知道，多个线程是交替执行的，具体是靠CUP调度，无法人为干预</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span> ;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">50</span>) &#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程停止了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在睡觉&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h3><ul><li>sleep时间制定当前线程阻塞的毫秒数</li><li>sleep存在异常InterruptedException</li><li>sleep时间达到后线程进入就绪状态</li><li>sleep可以模拟网络延时，倒计时等</li><li>每一个对象都有一个锁，sleep不会释放锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h3><ul><li>线程礼让，让当前正在执行的线程暂停，但不阻塞</li><li>将线程从运行状态重新转为就绪状态，等待调度器调度</li><li>礼让不一定成功，主要还是看调度器的调度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程开始执行&quot;</span>);</span><br><span class="line">        <span class="comment">// 线程礼让</span></span><br><span class="line">        Thread.yield();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程停止执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(test,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(test,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程强制执行"><a href="#线程强制执行" class="headerlink" title="线程强制执行"></a>线程强制执行</h3><p>join合并线程，待此线程执行完成后，再执行其他线程，其他线程会阻塞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">500</span>; i++) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;插队线程正在执行&quot;</span> + i);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(test);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">50</span>) &#123;</span><br><span class="line">                <span class="comment">// 主线程执行到50的时候，插队线程开始执行，因为阻塞，一直要到插队线程执行完毕，主线程才会接着执行</span></span><br><span class="line">                thread.join();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程在执行&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p>Java提供一个线程调度器来监控处于就绪状态的所有线程，线程调度器按照优先级觉得线程执行顺序的先后，优先级低也不代表一定后执行，主要还是调度器控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最小优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MIN_PRIORITY = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 默认优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NORM_PRIORITY = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 最大优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_PRIORITY = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>获取、设置优先级，最好在线程开启之前进行设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Test test = <span class="keyword">new</span> Test();</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(test);</span><br><span class="line"><span class="comment">// 获取</span></span><br><span class="line">thread.getPriority();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置</span></span><br><span class="line">thread.setPriority(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程开启</span></span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><ul><li>线程分为用户线程和守护线程</li><li>虚拟机必须确保用户线程执行完毕</li><li>虚拟机不用等待守护线程执行完毕</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test test = <span class="keyword">new</span> Test();</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(test);</span><br><span class="line"></span><br><span class="line">thread.setDaemon(<span class="keyword">true</span>); <span class="comment">//默认为false，表示用户线程，一般创建的都为用户线程，true为守护线程</span></span><br></pre></td></tr></table></figure><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><ul><li>形成条件：队列+锁</li><li>线程同步是一种等待机制，多个需要同时访问此对象的线程进入这个对象的等待池，形成队列，前面的线程使用完毕，下一个线程再使用</li><li>由于同一进程的多个线程共享同一块存储空间，为了避免访问冲突，加入了锁机制synchronized，当一个线程获得对象的排它锁，独占资源，其他线程必须等待，使用后再释放锁</li></ul><blockquote><p>使用锁存在一些问题：</p><ol><li>一个线程持有锁会导致其他所有需要此锁的线程挂起</li><li>在多线程竞争下，加锁、释放锁会导致较多的上下文切换和调度延时，引起性能问题</li><li>一个优先级高的线程等待一个优先级低的线程时，会导致优先级倒置，引起性能问题</li></ol></blockquote><h2 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h2><ul><li><p>线程同步是依靠锁实现的，锁又分为同步方法和同步代码块两种</p></li><li><p>对于普通同步方法，锁的是当前实例对象。 如果有多个实例 那么锁的对象必然不同，就无法实现同步。</p></li><li><p>对于静态同步方法，锁的是当前类的Class对象。有多个实例 但是锁对象是相同的  可以实现同步。</p></li><li><p>对于同步代码块，锁的是Synchonized括号里的对象。对象最好是线程操作的公共资源</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步方法：多个线程时，为保证一个方法被一个线程执行时不被影响，需要锁住此方法，一般对于增删改操作才上锁，默认锁住的是当前方法的所在类的实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步块：写在方法中，多个对象使用同一共享资源时，为了不被影响，需要锁住此资源</span></span><br><span class="line"><span class="keyword">synchronized</span>(Obj)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lock与Synchonized功能相似，显式定义了锁，配合异常使用，一般在finally里面关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lock</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticks = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">if</span> (ticks&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;拿到了第&quot;</span> + ticks + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    ticks--;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Lock lock = <span class="keyword">new</span> Lock();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> Thread(lock,<span class="string">&quot;线程一&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(lock,<span class="string">&quot;线程二&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(lock,<span class="string">&quot;线程三&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lock与Synchonized的区别：</p><ul><li>Lock是显式锁(手动开启与关闭)，Synchonized是隐式锁，出作用域自动关闭</li><li>Lock只有代码块锁，Synchonized有代码块锁和方法锁</li><li>Lock性能好</li><li>使用顺序：Lock &gt; 同步代码块 &gt; 同步方法</li></ul><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><img src="https://img.jcxiaozhan.top/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BA%8C.jpg"><p>简单死锁现象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">// 玩具刀和玩具枪都只有一份</span></span><br><span class="line">    <span class="keyword">static</span> Knife knife = <span class="keyword">new</span> Knife();</span><br><span class="line">    <span class="keyword">static</span> Gun gun = <span class="keyword">new</span> Gun();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;小明&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (knife) &#123;</span><br><span class="line">                <span class="comment">// 小明在获得玩具枪的同时，还想去获取玩具刀，但是玩具刀在小黄那里，无法获取，于是小明就等待，小黄也在等待小明使用完玩具枪这个资源，两个线程互相等待，就形成了死锁现象</span></span><br><span class="line">                System.out.println(<span class="string">&quot;小明得到了玩具枪&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (gun) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;小明得到了玩具刀&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (gun) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小黄得到了玩具刀&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (knife) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;小明得到了玩具刀&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(test,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(test,<span class="string">&quot;小黄&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刀</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Knife</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枪</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gun</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决：在抱有资源的情况下，尽量不要去抢夺资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">// 玩具刀和玩具枪都只有一份</span></span><br><span class="line">    <span class="keyword">static</span> Knife knife = <span class="keyword">new</span> Knife();</span><br><span class="line">    <span class="keyword">static</span> Gun gun = <span class="keyword">new</span> Gun();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;小明&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 这一次，小黄和小明都在资源使用完成后再访问别的资源，所以避免了死锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (knife) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小明得到了玩具枪&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (gun) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小明得到了玩具刀&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (gun) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小黄得到了玩具刀&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (knife) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小明得到了玩具刀&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(test,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(test,<span class="string">&quot;小黄&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刀</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Knife</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枪</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gun</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程通信——生成者与消费者关系问题"><a href="#线程通信——生成者与消费者关系问题" class="headerlink" title="线程通信——生成者与消费者关系问题"></a>线程通信——生成者与消费者关系问题</h2><img src="https://img.jcxiaozhan.top/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%89.jpg"><h3 id="管程法"><a href="#管程法" class="headerlink" title="管程法"></a>管程法</h3><p>利用一个缓冲区来解决问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynContainer container = <span class="keyword">new</span> SynContainer();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Productor(container).start();</span><br><span class="line">        <span class="keyword">new</span> Consumer(container).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Productor</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取容器</span></span><br><span class="line">    SynContainer container;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法传入容器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Productor</span><span class="params">(SynContainer container)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产者的线程操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;生产了第&quot;</span> + (i+<span class="number">1</span>) + <span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">                container.push(<span class="keyword">new</span> Chicken(i+<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(SynContainer container)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消费了第&quot;</span> + container.pop().getId() + <span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chicken</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 产品编号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chicken</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓冲区</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynContainer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 容器大小</span></span><br><span class="line">    <span class="keyword">static</span> Chicken[] chickens = <span class="keyword">new</span> Chicken[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">// 计数器</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产者放入商品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Chicken chicken)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == chickens.length) &#123;</span><br><span class="line">            <span class="comment">// 容器满了，生产者停止生产，等待消费者消费</span></span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 容器没满，放入产品到容器</span></span><br><span class="line">        chickens[count] = chicken;</span><br><span class="line">        count++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以通知消费者消费</span></span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Chicken <span class="title">pop</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否能消费</span></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 容器为空，停止消费，等待生产者生产</span></span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 容器不为空，从容器拿出产品</span></span><br><span class="line">        count--;</span><br><span class="line">        Chicken chicken = chickens[count];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以通知消费者消费</span></span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chicken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="信号灯法"><a href="#信号灯法" class="headerlink" title="信号灯法"></a>信号灯法</h3><p>利用一个标识符来解决问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Process process = <span class="keyword">new</span> Process();</span><br><span class="line">        <span class="keyword">new</span> Productor(process).start();</span><br><span class="line">        <span class="keyword">new</span> Consumer(process).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Productor</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    Process process;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法传入容器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Productor</span><span class="params">(Process process)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.process = process;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产者的线程操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.process.push(<span class="keyword">new</span> Chicken(i+<span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    Process process;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法传入容器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Process process)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.process = process;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费者的线程操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                process.pop();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chicken</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 产品编号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chicken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chicken</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;鸡，id为&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Process</span> </span>&#123;</span><br><span class="line">    Chicken chicken;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标识符  true时消费者等待  false时生产者等待</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产过程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Chicken chicken)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;生产了&quot;</span> + chicken);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">this</span>.chicken = chicken;</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费过程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;消费了&quot;</span> + chicken);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建服务，创建线程池，参数为线程池大小</span></span><br><span class="line">ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.执行</span></span><br><span class="line">service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.关闭连接</span></span><br><span class="line">service.shutdown();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;线程、进程、多线程&quot;&gt;&lt;a href=&quot;#线程、进程、多线程&quot; class=&quot;headerlink&quot; title=&quot;线程、进程、多线程&quot;&gt;&lt;/a&gt;线程、进程、多线程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;进程：进程是程序的一次执行过程，是一个动态的概念，是系统资源分配的单位&lt;</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://jcxiaozhan.gitee.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaIO流</title>
    <link href="https://jcxiaozhan.gitee.io/2021/09/26/JavaIO%E6%B5%81/"/>
    <id>https://jcxiaozhan.gitee.io/2021/09/26/JavaIO%E6%B5%81/</id>
    <published>2021-09-25T16:00:00.000Z</published>
    <updated>2021-09-26T08:58:52.480Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-O流"><a href="#I-O流" class="headerlink" title="I/O流"></a>I/O流</h2><p>概念：内存与存储设备之间传输数据的通道</p><img src="https://img.jcxiaozhan.top/JavaIO%E6%B5%81%E4%B8%80.jpg"><h2 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h2><h3 id="按方向"><a href="#按方向" class="headerlink" title="按方向"></a>按方向</h3><ul><li>输入流：将<code>存储设备</code>中的内容读到<code>内存</code>中</li><li>输出流：将<code>内存</code>中的内容写到<code>存储设备</code>中</li></ul><h3 id="按单位"><a href="#按单位" class="headerlink" title="按单位"></a>按单位</h3><ul><li>字节流：以字节为单位，可以读写所有数据</li><li>字符流：以字符为单位，只能读写文本数据</li></ul><h3 id="按功能"><a href="#按功能" class="headerlink" title="按功能"></a>按功能</h3><ul><li>节点流：具有实际传输数据的读写功能</li><li>过滤流：在节点流的基础之上增强功能</li></ul><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p>字节流的两个超类：<code>InputStream</code>和<code>OutputStream</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//InputStream字节输入流</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OutputStream字节输出流</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="文件字节流"><a href="#文件字节流" class="headerlink" title="文件字节流"></a>文件字节流</h3><p>文件字节输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建FileInputStream</span></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;e:\\hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    <span class="comment">// fis.read();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单字节读取</span></span><br><span class="line">    <span class="comment">// 返回读取字节的ASCII码，读不到则返回-1</span></span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((data = fis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println((<span class="keyword">char</span>)data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用数组一次读取多个字节</span></span><br><span class="line">    <span class="comment">// 创建大小为3的数组，将数组传入read就会3个3个地进行读取</span></span><br><span class="line">    <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="comment">// 返回读取的长度</span></span><br><span class="line">    <span class="keyword">int</span> count = fis.read(buf);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(buf));</span><br><span class="line">    System.out.println(count);</span><br><span class="line">    <span class="keyword">int</span> count2 = fis.read(buf);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(buf));</span><br><span class="line">    System.out.println(count2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上述优化后</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((count = fis.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.print(<span class="keyword">new</span> String(buf, <span class="number">0</span>, count));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭流</span></span><br><span class="line">    fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件字节输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建FileOutputStream</span></span><br><span class="line">    <span class="comment">// 构造时只填写路径的话，默认每次写出都覆盖源文件(从流开启到关闭，算一次)，第二个参数添加true，表示追加输出</span></span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;e:\\hello.txt&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写出文件</span></span><br><span class="line">    <span class="comment">// 单个字符的写出</span></span><br><span class="line">    fos.write(<span class="number">97</span>);</span><br><span class="line">    fos.write(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串的写出</span></span><br><span class="line">    String string = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    fos.write(string.getBytes());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    fos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片复制Demo"><a href="#图片复制Demo" class="headerlink" title="图片复制Demo"></a>图片复制Demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建FileInputStream</span></span><br><span class="line">    <span class="comment">// 文件字节输入流</span></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;e://aaa.jpg&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建FileOutputStream</span></span><br><span class="line">    <span class="comment">// 文件字节输出流</span></span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;e://bbb.jpg&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 边读边写</span></span><br><span class="line">    <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((count = fis.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        fos.write(buf, <span class="number">0</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭流</span></span><br><span class="line">    fis.close();</span><br><span class="line">    fos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h3><p>字节缓冲流：<code>BufferedInputStream</code>和<code>BufferedOutputStream</code></p><ul><li>提高IO效率，减少访问磁盘次数</li><li>数据存储在缓冲区中，flush是将缓冲区的内容写出到文件中，也可以直接close</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建BufferedInputStream</span></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;e:\\hello.txt&quot;</span>);</span><br><span class="line">    BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取</span></span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((data = bis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println((<span class="keyword">char</span>)data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自己创建的缓冲区(在缓冲流里面再使用自己创建的缓冲区，会极大提升效率)</span></span><br><span class="line">    <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((count = bis.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(buf, <span class="number">0</span>, count));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    <span class="comment">// 缓冲流在关闭的时候会自动关闭字节流</span></span><br><span class="line">    bis.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建BufferedOutputStream</span></span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;e:\\hello.txt&quot;</span>);</span><br><span class="line">    BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写出文件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">        <span class="comment">// 写入8k缓冲区</span></span><br><span class="line">        bos.write(<span class="string">&quot;hello&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">// 从缓冲区强制写出</span></span><br><span class="line">        bos.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    bos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><p>对象流：<code>ObjectOutputStream</code>和<code>ObjectInputStream</code></p><ul><li>增强了缓冲区功能</li><li>增强了读写8种基本数据类型和字符串的功能</li><li>增强了读写对象的功能</li></ul><p>使用流传输对象的过程称为序列化、反序列化</p><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><p>序列化：使用流将对象存储到硬盘上称为序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建对象流</span></span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;e:\\student.bin&quot;</span>);</span><br><span class="line">    ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化（写出操作）</span></span><br><span class="line">    Student zhangsan = <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    oos.writeObject(zhangsan);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    oos.close();</span><br><span class="line">    System.out.println(<span class="string">&quot;序列化完成&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化：使用流将对象从硬盘上读取出来的过程称为反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建对象流</span></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;e:\\student.bin&quot;</span>);</span><br><span class="line">    ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件（反序列化）</span></span><br><span class="line">    Student s = (Student)ois.readObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    ois.close();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;反序列化完成&quot;</span>);</span><br><span class="line">    System.out.println(s.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>某个类要想序列化必须实现Serializable接口</li><li>在将要序列化的类中通常添加<code>private static  final long serialVersionUID = 100L;</code>属性，作为序列化版本号ID，保证序列化的类和反序列化的类是同一个类</li><li>使用transient修饰属性，这个属性就不能序列化</li><li>静态属性不能序列化</li><li>序列化多个对象，可以借助集合来实现</li></ul><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>字符流的两个超类：<code>Reader</code>和<code>Writer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reader字符输入流</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>[] c)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Writer字符输出流</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String str)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] c)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="文件字符流"><a href="#文件字符流" class="headerlink" title="文件字符流"></a>文件字符流</h3><p>文件字符输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建FileReader</span></span><br><span class="line">    FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;e:\\hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    <span class="comment">// 单个字符读取</span></span><br><span class="line">    <span class="comment">// 返回读取字符的ASCII码，读不到则返回-1</span></span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((data = fr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.print((<span class="keyword">char</span>)data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用数组一次读取多个字节</span></span><br><span class="line">    <span class="comment">// 创建大小为2的数组，将数组传入read()方法中就会2个2个地进行读取</span></span><br><span class="line">    <span class="keyword">char</span>[] buf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((count = fr.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(buf, <span class="number">0</span>, count));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 关闭流</span></span><br><span class="line">    fr.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件字符输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建FileWriter对象</span></span><br><span class="line">    <span class="comment">// 构造时只填写路径的话，默认每次写出都覆盖源文件(从流开启到关闭，算一次写出)，第二个参数添加true，表示追加输出</span></span><br><span class="line">    FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;e:\\hello.txt&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 写出文件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">        fw.write(<span class="string">&quot;这里写一些内容进去&quot;</span>);</span><br><span class="line">        <span class="comment">// 缓存区要堆积满了才会一次性写出，在文件极小的情况下可能会存在不写出的问题，所以最好手动调用flush()方法，每次都强制写出</span></span><br><span class="line">        fw.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 关闭</span></span><br><span class="line">    fw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h3><p>字符缓冲流：<code>BufferedReade</code>r和<code>BufferedWirter</code></p><ul><li>高效读写、支持输入换行符、可一次写一行读一行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建缓冲流</span></span><br><span class="line">    FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;e:\\hello.txt&quot;</span>);</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(fr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取</span></span><br><span class="line">    <span class="comment">// 第一种方式</span></span><br><span class="line">    <span class="keyword">char</span>[] buf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((count = br.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(buf, <span class="number">0</span>, count));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二种方式 一行一行读取</span></span><br><span class="line">    String line = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span>((line = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    br.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建BufferedWriter</span></span><br><span class="line">    FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;e:\\hello.txt&quot;</span>);</span><br><span class="line">    BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(fw);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写出文件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">        bw.write(<span class="string">&quot;写出的内容&quot;</span>);</span><br><span class="line">        <span class="comment">// 写一个换行符</span></span><br><span class="line">        bw.newLine();</span><br><span class="line">        <span class="comment">// 从缓冲区强制写出</span></span><br><span class="line">        bw.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    <span class="comment">// 缓冲流在关闭的时候会自动关闭字节流</span></span><br><span class="line">    bw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PrintWriter"><a href="#PrintWriter" class="headerlink" title="PrintWriter"></a>PrintWriter</h3><p>封装了print() / println() 方法 支持写出后换行<br>支持数据原样打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// 1 创建打印流</span></span><br><span class="line">    PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="string">&quot;e:\\hello.txt&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2 打印</span></span><br><span class="line">    pw.println(<span class="number">12</span>);</span><br><span class="line">    pw.println(<span class="keyword">true</span>);</span><br><span class="line">    pw.println(<span class="number">3.14</span>);</span><br><span class="line">    pw.println(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3 关闭</span></span><br><span class="line">    pw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="桥转换流"><a href="#桥转换流" class="headerlink" title="桥转换流"></a>桥转换流</h3><p>桥转换流：<code>InputStreamReader</code>和<code>OutputStreamWriter</code></p><ul><li>可将字节流转换为字符流</li><li>可设置字符的编码方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建InputStreamReader</span></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;e:\\hello.txt&quot;</span>);</span><br><span class="line">    InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis, <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((data = isr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println((<span class="keyword">char</span>)data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    isr.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建OutputStreamReader</span></span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;e:\\hello.txt&quot;</span>);</span><br><span class="line">    OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写出文件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">        osw.write(<span class="string">&quot;所写内容&quot;</span>);</span><br><span class="line">        osw.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    osw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p>概念：代表物理盘符中的一个文件或文件夹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    separator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分隔符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">separator</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;路径分隔符&quot;</span> + File.pathSeparator);</span><br><span class="line">    System.out.println(<span class="string">&quot;名称分隔符&quot;</span> + File.separator);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 文件操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fileOpen</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建文件</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123; <span class="comment">// 是否存在</span></span><br><span class="line">        <span class="keyword">boolean</span> b = file.createNewFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除文件</span></span><br><span class="line">    <span class="comment">// 直接删除</span></span><br><span class="line">    file.delete(); <span class="comment">// 成功true</span></span><br><span class="line">    <span class="comment">// 使用jvm退出时删除</span></span><br><span class="line">    file.deleteOnExit();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取文件信息</span></span><br><span class="line">    System.out.println(<span class="string">&quot;获取绝对路径&quot;</span> + file.getAbsolutePath());</span><br><span class="line">    System.out.println(<span class="string">&quot;获取路径&quot;</span> + file.getPath());</span><br><span class="line">    System.out.println(<span class="string">&quot;获取文件名称&quot;</span> + file.getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;获取夫目录&quot;</span> + file.getParent());</span><br><span class="line">    System.out.println(<span class="string">&quot;获取文件长度&quot;</span> + file.length());</span><br><span class="line">    System.out.println(<span class="string">&quot;文件创建时间&quot;</span> + <span class="keyword">new</span> Date(file.lastModified()).toLocaleString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断</span></span><br><span class="line">    System.out.println(<span class="string">&quot;是否可写&quot;</span> + file.canWrite());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否是文件&quot;</span> + file.isFile());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否隐藏&quot;</span> + file.isHidden());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件夹操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">directoryOpe</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 创建文件夹</span></span><br><span class="line">    File dir = <span class="keyword">new</span> File(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">    System.out.println(dir.toString());</span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">        <span class="comment">//dir.mkdir(); // 只能创建单级目录</span></span><br><span class="line">        dir.mkdirs(); <span class="comment">// 创建多级目录</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除文件夹</span></span><br><span class="line">    <span class="comment">// 直接删除</span></span><br><span class="line">    dir.delete(); <span class="comment">// 只能删除最底层空目录</span></span><br><span class="line">    <span class="comment">// 使用jvm删除</span></span><br><span class="line">    dir.deleteOnExit();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取文件夹信息</span></span><br><span class="line">    System.out.println(<span class="string">&quot;获取绝对路径&quot;</span> + dir.getAbsolutePath());</span><br><span class="line">    System.out.println(<span class="string">&quot;获取路径&quot;</span> + dir.getPath());</span><br><span class="line">    System.out.println(<span class="string">&quot;获取文件名称&quot;</span> + dir.getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;获取夫目录&quot;</span> + dir.getParent());</span><br><span class="line">    System.out.println(<span class="string">&quot;获取文件长度&quot;</span> + dir.length());</span><br><span class="line">    System.out.println(<span class="string">&quot;文件夹创建时间&quot;</span> + <span class="keyword">new</span> Date(dir.lastModified()).toLocaleString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断</span></span><br><span class="line">    System.out.println(<span class="string">&quot;是否是文件夹&quot;</span> + dir.isFile());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否隐藏&quot;</span> + dir.isHidden());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历文件夹</span></span><br><span class="line">    File dir2 = <span class="keyword">new</span> File(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">    String[] files = dir2.list();</span><br><span class="line">    <span class="keyword">for</span>(String string : files)&#123;</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// FileFilter接口的使用</span></span><br><span class="line">    File[] files2 = dir2.listFiles(<span class="keyword">new</span> FileFilter()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(pathname.getName().endsWith(<span class="string">&quot;.jpg&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(File file : files2)&#123;</span><br><span class="line">        System.out.println(file.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归遍历文件夹"><a href="#递归遍历文件夹" class="headerlink" title="递归遍历文件夹"></a>递归遍历文件夹</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    listDir(<span class="keyword">new</span> File(<span class="string">&quot;e:\\myfiles&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listDir</span><span class="params">(File dir)</span></span>&#123;</span><br><span class="line">    File[] files = dir.listFiles();</span><br><span class="line">    System.out.println(dir.getAbsolutePath());</span><br><span class="line">    <span class="keyword">if</span>(files != <span class="keyword">null</span> &amp;&amp; files.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(File file : files)&#123;</span><br><span class="line">            <span class="keyword">if</span>(file.isDirectory())&#123;</span><br><span class="line">                <span class="comment">// 递归</span></span><br><span class="line">                listDir(file);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(file.getAbsolutePath());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归删除文件夹"><a href="#递归删除文件夹" class="headerlink" title="递归删除文件夹"></a>递归删除文件夹</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteDir</span><span class="params">(File dir)</span></span>&#123;</span><br><span class="line">    File[] files = dir.listFiles();</span><br><span class="line">    <span class="keyword">if</span>(files != <span class="keyword">null</span> &amp;&amp; files.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(File file : files)&#123;</span><br><span class="line">            <span class="keyword">if</span>(file.isDirectory())&#123;</span><br><span class="line">                <span class="comment">// 递归</span></span><br><span class="line">                deleteDir(file);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 删除文件</span></span><br><span class="line">                System.out.println(file.getAbsolutePath() + <span class="string">&quot;删除&quot;</span> + file.delete());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建</span></span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.添加数据</span></span><br><span class="line">    properties.setProperty(<span class="string">&quot;driver&quot;</span>,<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    properties.setProperty(<span class="string">&quot;url&quot;</span>,<span class="string">&quot;jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;amp;amp;useUnicode=true&amp;amp;amp;characterEncoding=utf8&quot;</span>);</span><br><span class="line">    properties.setProperty(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    properties.setProperty(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;lishuang001219&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.遍历</span></span><br><span class="line">    Set&lt;String&gt; proNames = properties.stringPropertyNames();</span><br><span class="line">    <span class="keyword">for</span> (String pro : proNames) &#123;</span><br><span class="line">        System.out.println(pro + <span class="string">&quot;=&quot;</span> + properties.getProperty(pro));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.和流相关的方法</span></span><br><span class="line">    <span class="comment">// list方法</span></span><br><span class="line">    PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="string">&quot;e:\\db.properties&quot;</span>);</span><br><span class="line">    properties.list(pw);</span><br><span class="line">    pw.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// store方法 保存</span></span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;e:\\db.properties&quot;</span>);</span><br><span class="line">    properties.store(fos,<span class="string">&quot;注释&quot;</span>);</span><br><span class="line">    fos.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// load方法 加载</span></span><br><span class="line">    Properties properties1 = <span class="keyword">new</span> Properties();</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;e:\\db.properties&quot;</span>);</span><br><span class="line">    properties1.load(fis);</span><br><span class="line">    fis.close();</span><br><span class="line">    System.out.println(properties1.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流的关闭"><a href="#流的关闭" class="headerlink" title="流的关闭"></a>流的关闭</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将流定义在try括号里,它会自动关闭</span></span><br><span class="line"><span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(f)) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在finally里面关闭流,需要将fis定义在try外面</span></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != fis) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;I-O流&quot;&gt;&lt;a href=&quot;#I-O流&quot; class=&quot;headerlink&quot; title=&quot;I/O流&quot;&gt;&lt;/a&gt;I/O流&lt;/h2&gt;&lt;p&gt;概念：内存与存储设备之间传输数据的通道&lt;/p&gt;
&lt;img src=&quot;https://img.jcxiaozhan.top/J</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://jcxiaozhan.gitee.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java集合</title>
    <link href="https://jcxiaozhan.gitee.io/2021/09/23/Java%E9%9B%86%E5%90%88/"/>
    <id>https://jcxiaozhan.gitee.io/2021/09/23/Java%E9%9B%86%E5%90%88/</id>
    <published>2021-09-22T16:00:00.000Z</published>
    <updated>2021-09-23T08:21:23.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>概念：对象的容器，定义了对多个对象进行操作的常用方法，可实现数组的功能</p><p>所有集合类都位于<code>java.util</code>包下，Java的集合类主要由两个接口派生而出，Collection和Map，Collection和Map是Java集合框架的根接口，这两个接口又包含了一些子接口或实现类。</p><p>集合与数组区别:</p><ol><li>数组长度固定，集合长度不固定</li><li>数组可以存储基本类型和引用类型，集合只能存储引用类型</li></ol><h2 id="Collection体系集合"><a href="#Collection体系集合" class="headerlink" title="Collection体系集合"></a>Collection体系集合</h2><img src="https://img.jcxiaozhan.top/Java%E9%9B%86%E5%90%88%E4%B8%80.jpg"><h2 id="Collection父接口"><a href="#Collection父接口" class="headerlink" title="Collection父接口"></a>Collection父接口</h2><p>特点：代表一组任意类型的对象，无序、无下标、不能重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建集合</span></span><br><span class="line">    Collection collection = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    collection.add(<span class="string">&quot;苹果&quot;</span>);        </span><br><span class="line">    collection.add(<span class="string">&quot;香蕉&quot;</span>);        </span><br><span class="line">    collection.add(<span class="string">&quot;梨子&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除元素</span></span><br><span class="line">    collection.remove(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空集合</span></span><br><span class="line">    collection.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历(无下标，所以循环遍历时只能使用增强for循环)</span></span><br><span class="line">    <span class="keyword">for</span>(Object obj : collection) &#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用迭代器遍历   </span></span><br><span class="line">    <span class="comment">// 删除当前元素</span></span><br><span class="line">    Iterator it = collection.iterator();</span><br><span class="line">    <span class="comment">// 判断有没有下一个元素</span></span><br><span class="line">    <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">        <span class="comment">// 获取元素</span></span><br><span class="line">        Object obj = it.next();</span><br><span class="line">        <span class="comment">// 移除当前元素</span></span><br><span class="line">        <span class="comment">// 使用collection.remove()会报并发修改异常</span></span><br><span class="line">        it.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断集合是否存在指定元素</span></span><br><span class="line">    <span class="keyword">boolean</span> result1 = collection.contains(<span class="string">&quot;梨子&quot;</span>);</span><br><span class="line">    <span class="comment">// 判断集合是否为空</span></span><br><span class="line">    <span class="keyword">boolean</span> result2 = collection.inEmpty();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取集合元素个数</span></span><br><span class="line">    <span class="keyword">int</span> num = collection.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Set和List的区别"><a href="#Set和List的区别" class="headerlink" title="Set和List的区别"></a>Set和List的区别</h2><ol><li>Set接口存储的是无序、无下标、不重复的数据。List接口存储的是有序的、有下标、可以重复的元素</li><li>Set检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变，实现类有HashSet,TreeSet</li><li>List和数组类似，可以动态增长，根据实际存储的数据的长度自动增长List的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变，实现类有ArrayList,LinkedList,Vector</li></ol><h2 id="List子接口"><a href="#List子接口" class="headerlink" title="List子接口"></a>List子接口</h2><p>特点：有序、有下标、元素可重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建集合</span></span><br><span class="line">    List list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    list.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;梨子&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除元素</span></span><br><span class="line">    list.remove(<span class="string">&quot;梨子&quot;</span>);</span><br><span class="line">    <span class="comment">// 使用索引删除</span></span><br><span class="line">    list.remove(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    <span class="comment">// 使用for循环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i= <span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">        System.out.println(list.get(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用增强for循环</span></span><br><span class="line">    <span class="keyword">for</span>(Object obj : list) &#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用迭代器遍历</span></span><br><span class="line">    Iterator it = list.iterator();</span><br><span class="line">    <span class="comment">// 判断有没有下一个元素</span></span><br><span class="line">    <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">        <span class="comment">// 获取元素</span></span><br><span class="line">        Object obj = it.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除当前元素</span></span><br><span class="line">        <span class="comment">// 如果使用list.remove()会报并发修改异常</span></span><br><span class="line">        it.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用列表迭代器，列表迭代器可以从前向后遍历，也可以从后向前遍历</span></span><br><span class="line">    <span class="comment">// 创建迭代器</span></span><br><span class="line">    ListIterator it1 = list.listIterator();</span><br><span class="line">    <span class="comment">// 从前向后遍历</span></span><br><span class="line">    <span class="keyword">while</span>(it1.hasNext())&#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从后向前遍历(因为是同一个迭代器，在上一次遍历之后，迭代器已经指向了集合末尾，所以这里可以直接开始向前遍历)</span></span><br><span class="line">    <span class="keyword">while</span>(it1.hasNext())&#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取元素出现位置</span></span><br><span class="line">    System.out.println(list.indexOf(<span class="string">&quot;香蕉&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// List集合添加整数元素(自动装箱)</span></span><br><span class="line">    list.add(<span class="number">10</span>);</span><br><span class="line">    list.add(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除List中的整数元素，直接传入整数，会被当做下标，所以这里通过获取下标，用下标来进行删除</span></span><br><span class="line">    list.remove(list.indexOf(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回子集合，取头不取尾</span></span><br><span class="line">    List subList = list.subList(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 集合转换为数组</span></span><br><span class="line">    String[] array =<span class="keyword">new</span> String[list.size()];</span><br><span class="line">    list.toArray(array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List实现类"><a href="#List实现类" class="headerlink" title="List实现类"></a>List实现类</h2><ol><li>ArrayList：数组结构实现，必须要连续空间，查询快，增删慢，运行效率快，线程不安全</li><li>Vector：数组结构实现，查询快，增删慢，运行效率慢，线程安全</li><li>LinkedList：双向链表结构实现，增删快，查询慢</li></ol><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>源码分析：</p><ul><li>如果没有向集合中添加任何元素时，容量0，添加一个后，容量为10</li><li>首次添加元素时，ArrayList会进行第一次扩容，之后每当判断到容量不够时，就会扩容，每次扩容是原来的1.5倍</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个空数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际元素个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 存放元素的数组</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData; </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造方法，将空数组赋值给存放元素的数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);</span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩容</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// 复制出一个新的数组，覆盖原数组</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>添加、删除、判断都与List子接口相同，遍历使用枚举器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vector vector = <span class="keyword">new</span> Vector();</span><br><span class="line">Enumeration en = vector.elements();</span><br><span class="line"><span class="keyword">while</span>(en.hasMoreElements())&#123;</span><br><span class="line">  String o = (String)en.nextElement();</span><br><span class="line">  System.out.println(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>常用方法都与List子接口相同<br>源码分析：</p><ul><li>首次添加元素之后，first以及last都会指向第一个节点</li><li>之后每次添加元素，first始终指向第一个节点，last会指向当前节点</li><li>每个节点中的next属性存储下一个节点，prev属性存储上一个节点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 集合大小，初始为0</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指向集合第一个元素，初始为null</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指向集合最后一个元素，初始为null</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合中的一个节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    E item;</span><br><span class="line">    <span class="comment">// 下一个节点</span></span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    <span class="comment">// 上一个节点</span></span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Set子接口"><a href="#Set子接口" class="headerlink" title="Set子接口"></a>Set子接口</h2><p>特点：无序、无下标、元素不可重复<br>方法：全部继承自Collection父接口中的方法，添加、删除、遍历、判断与collection父接口中一致</p><h2 id="Set实现类"><a href="#Set实现类" class="headerlink" title="Set实现类"></a>Set实现类</h2><ol><li>HashSet：基于HashCode计算元素存放位置，当在同一个位置存入的两个元素哈希码相同时，会调用equals再次进行确认，对比两个元素的内存地址，如果也为true，则判定为同一个元素，拒绝后者存入，如果为false，说明不是同一个元素，则在此位置形成链表</li><li>TreeSet：基于排列顺序实现元素不重复，实现了SortedSet接口，对集合元素自动排序，元素对象的类型必须实现Comparable接口，指定排序规则，通过CompareTo方法确定是否为重复元素</li></ol><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>存储结构：哈希表(数组+链表+红黑树)</p><p>重写hashCode()和equals()方法，可以自定义hash的计算规则，从而改变结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    User user = (User) o;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (age != user.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(user.name) : user.name == <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 使用31这个质数，减少散列冲突</span></span><br><span class="line">    result = <span class="number">31</span> * result + age;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建集合</span></span><br><span class="line">    HashSet&lt;String&gt; hashSet = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    hashSet.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">    hashSet.add(<span class="string">&quot;梨子&quot;</span>);</span><br><span class="line">    hashSet.add(<span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除元素</span></span><br><span class="line">    hashSet.remove(<span class="string">&quot;梨子&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    <span class="comment">// 使用增强for循环</span></span><br><span class="line">    <span class="keyword">for</span>(Object obj : hashSet) &#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用迭代器遍历</span></span><br><span class="line">    Iterator it = hashSet.iterator();</span><br><span class="line">    <span class="comment">// 判断有没有下一个元素</span></span><br><span class="line">    <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">        <span class="comment">// 获取元素</span></span><br><span class="line">        System.out.println(it.next());</span><br><span class="line">        <span class="comment">// 删除当前元素</span></span><br><span class="line">        <span class="comment">// 使用hashSet.remove()会报并发修改异常</span></span><br><span class="line">        it.remove();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(hashSet.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>存储结构：红黑树<br>要求：使用TreeSet存储引用类型数据时，元素需要要实现Comparable接口，重写compareTo()方法，方法返回值为0，认为是重复元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//重写compareTo方法，这里我们的逻辑是先按照姓名比较，然后再按照年龄比较</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n1 = <span class="keyword">this</span>.getName().compareTo(o.getName());</span><br><span class="line">        <span class="keyword">int</span> n2 = <span class="keyword">this</span>.age - o.getAge();</span><br><span class="line">        <span class="keyword">return</span> n1==<span class="number">0</span>? n2: n1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeSet&lt;Student&gt; treeSet = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        Student stu2 = <span class="keyword">new</span> Student(<span class="string">&quot;李四&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        Student stu3 = <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>,<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">        treeSet.add(stu1);</span><br><span class="line">        treeSet.add(stu2);</span><br><span class="line">        treeSet.add(stu3);</span><br><span class="line">        </span><br><span class="line">        System.out.println(treeSet.size());</span><br><span class="line">        System.out.println(treeSet.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以不继承Comparable接口，使用比较器，在创建集合的同时，指定比较规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TreeSet&lt;Student&gt; students = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student stu1, Student stu2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n1 = stu1.getName().compareTo(stu2.getName());</span><br><span class="line">        <span class="keyword">int</span> n2 = stu1.getAge() - stu2.getAge();</span><br><span class="line">        <span class="keyword">return</span> n1 == <span class="number">0</span>? n2: n1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Map体系集合"><a href="#Map体系集合" class="headerlink" title="Map体系集合"></a>Map体系集合</h2><img src="https://img.jcxiaozhan.top/Java%E9%9B%86%E5%90%88%E4%BA%8C.jpg"><h2 id="Map父接口"><a href="#Map父接口" class="headerlink" title="Map父接口"></a>Map父接口</h2><p>特点：</p><ul><li>用于存储任意键值对(key - value)</li><li>键：无序、无下标、不允许重复(唯一)</li><li>值：无序、无下标、允许重复</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建Map集合</span></span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 添加元素</span></span><br><span class="line">    map.put(<span class="string">&quot;cn&quot;</span>, <span class="string">&quot;中国&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;uk&quot;</span>, <span class="string">&quot;英国&quot;</span>);</span><br><span class="line">    <span class="comment">// 添加重复键，值会覆盖</span></span><br><span class="line">    map.put(<span class="string">&quot;cn&quot;</span>, <span class="string">&quot;zhongguo&quot;</span>); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 删除元素</span></span><br><span class="line">    map.remove(<span class="string">&quot;uk&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 遍历</span></span><br><span class="line">    <span class="comment">//第一种：</span></span><br><span class="line">    <span class="comment">//遍历所有的key，用key查找对应value</span></span><br><span class="line">    <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;key= &quot;</span>+ key + <span class="string">&quot; and value= &quot;</span> + map.get(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二种：</span></span><br><span class="line">    <span class="comment">//通过Map.entrySet(键值对映射)使用iterator遍历key和value</span></span><br><span class="line">    Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        Map.Entry&lt;String, String&gt; entry = it.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三种：推荐，尤其是容量大时</span></span><br><span class="line">    <span class="comment">//通过Map.entrySet遍历key和value</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第四种：</span></span><br><span class="line">    <span class="comment">//通过Map.values()遍历所有的value，但不能遍历key</span></span><br><span class="line">    <span class="keyword">for</span> (String v : map.values()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;value= &quot;</span> + v);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4.判断</span></span><br><span class="line">    System.out.println(map.containsKey(<span class="string">&quot;cn&quot;</span>));</span><br><span class="line">    System.out.println(map.containsValue(<span class="string">&quot;中国&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Map实现类"><a href="#Map实现类" class="headerlink" title="Map实现类"></a>Map实现类</h2><ol><li>HashMap：线程不安全，运行效率快，允许使用null作为key或是value</li><li>Hashtable：线程安全，运行效率慢；不允许null作为key或是value</li><li>Properties：hashtable的子类，要求key和value都是string，通常用于配置文件的读取</li><li>TreeMap：实现了SortedMap接口（是map的子接口），可以对key自动排序</li></ol><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>存储结构：哈希表(数组+链表+红黑树)<br>增、删、遍历、判断与Map父接口一致</p><p>源码分析：</p><ul><li>HashMap刚创建时，table是null，节省空间，当添加第一个元素时，table容量调整为16</li><li>当元素个数大于阈值（16*0.75 = 12）时，会进行扩容，扩容后的大小为原来的两倍，目的是减少调整元素的个数</li><li>jdk1.8 当每个链表长度 &gt;8 ，并且数组元素个数 ≥64时，会调整成红黑树，目的是提高效率</li><li>jdk1.8 当链表长度 &lt;6 时 调整成链表</li><li>jdk1.8 以前，链表时头插入，之后为尾插入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认加载因子，容量超过75%则自动扩容</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 键值对映射数组，用于存放传入的键值对，初始为null</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组大小，初始为0</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,<span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// 这一个if判断了table赋给tab的值是否为空，实际上进行了初始化，table的容量变为16</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 当元素个数超过阈值，进行扩容，阈值16*0.75=12，每一次扩容为原来的2倍</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><p>线程安全，运行效率慢；不允许null作为key或是value</p><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><p>Hashtable的子类，要求key和value都是string，通常用于配置文件的读取</p><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>实现了SortedMap接口（是map的子接口），可以对key自动排序<br>TreeMap存储引用类型数据的时候，也和TreeSet一样，需要实现Comparable接口，或者是在创建集合的同时，指定比较规则，具体使用，参照TreeSet</p><h2 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h2><p>集合工具类，定义了除了存取以外的集合常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="number">20</span>);</span><br><span class="line">    list.add(<span class="number">5</span>);</span><br><span class="line">    list.add(<span class="number">12</span>);</span><br><span class="line">    list.add(<span class="number">30</span>);</span><br><span class="line">    list.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sort排序(由小到大)</span></span><br><span class="line">    System.out.println(<span class="string">&quot;排序前：&quot;</span> + list.toString());</span><br><span class="line">    Collections.sort(list);</span><br><span class="line">    System.out.println(<span class="string">&quot;排序后：&quot;</span> + list.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// binarySearch二分查找</span></span><br><span class="line">    <span class="keyword">int</span> i = Collections.binarySearch(list,<span class="number">12</span>);</span><br><span class="line">    System.out.println(i);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy复制</span></span><br><span class="line">    List&lt;Integer&gt; dest = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; list.size();i++) &#123;</span><br><span class="line">        dest.add(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Collections.copy(dest,list);</span><br><span class="line">    System.out.println(dest.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reverse反转</span></span><br><span class="line">    Collections.reverse(list);</span><br><span class="line">    System.out.println(<span class="string">&quot;反转后：&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// shuffle 打乱</span></span><br><span class="line">    Collections.shuffle(list);</span><br><span class="line">    System.out.println(<span class="string">&quot;打乱后：&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// list转数组,如果数组大小小于集合大小，则会直接存入，如果数组大小大于集合大小，多余部分会用默认值填充</span></span><br><span class="line">    Integer[] arr = list.toArray(<span class="keyword">new</span> Integer[<span class="number">10</span>]);</span><br><span class="line">    System.out.println(arr.length);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组转集合</span></span><br><span class="line">    String[] names = &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">// 得到的是一个受限集合，不能增删</span></span><br><span class="line">    List&lt;String&gt; list2 = Arrays.asList(names);</span><br><span class="line">    System.out.println(list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;集合&quot;&gt;&lt;a href=&quot;#集合&quot; class=&quot;headerlink&quot; title=&quot;集合&quot;&gt;&lt;/a&gt;集合&lt;/h2&gt;&lt;p&gt;概念：对象的容器，定义了对多个对象进行操作的常用方法，可实现数组的功能&lt;/p&gt;
&lt;p&gt;所有集合类都位于&lt;code&gt;java.util&lt;/co</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://jcxiaozhan.gitee.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java常用类</title>
    <link href="https://jcxiaozhan.gitee.io/2021/09/20/Java%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
    <id>https://jcxiaozhan.gitee.io/2021/09/20/Java%E5%B8%B8%E7%94%A8%E7%B1%BB/</id>
    <published>2021-09-19T16:00:00.000Z</published>
    <updated>2021-09-20T07:56:04.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ul><li>概念：在一个类的内部再定义一个完整的类，当外部类与内部类的属性重名时，优先访问内部类属性</li><li>分类：成员内部类、静态内部类、局部内部类、匿名内部类</li></ul><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><ul><li>成员内部类在类的内部定义，与外部类的变量和方法同级别的类</li><li>成员内部类可以直接拿到外部类的私有属性</li><li>成员内部类里不能定义静态成员、可以包含静态常量(final)，这个静态常量在不实例化外部类的情况下可以调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是外部方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> String XXX = <span class="string">&quot;这是一个静态常量&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是内部方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getID</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例化成员内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在没有实例化外部类的情况下可调用内部类的静态常量</span></span><br><span class="line">        String xxx = Outer.Inner.XXX;</span><br><span class="line">        System.out.println(xxx);</span><br><span class="line"></span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">        Outer.Inner inner = outer.<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line">        inner.getID();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><ul><li>局部内部类就是定义在外部类的方法里面的类，作用范围和创建对象范围仅限于当前方法，不能添加任何修饰符</li><li>局部内部类访问外部类当前方法中的局部变量时，因无法保障变量的生命周期与自身相同，变量必须修饰为final，这是JDK1.7的规定，JDK1.8以后，这个final会自动添加，不用我们考虑</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> String str = <span class="string">&quot;一个局部变量&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><ul><li>非静态内部类需要在外部类存在一个实例时才可以调用，静态内部类可以直接调用，因为没有一个外部类的实例，所以在静态内部类里面不可以直接访问外部类的属性和方法，若想访问，需要创建外部类的对象来调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String address = <span class="string">&quot;上海&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> String phone = <span class="string">&quot;111&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line"></span><br><span class="line">            System.out.println(outer.name);</span><br><span class="line">            System.out.println(outer.age);</span><br><span class="line"></span><br><span class="line">            System.out.println(address);</span><br><span class="line">            System.out.println(phone);</span><br><span class="line"></span><br><span class="line">            System.out.println(Inner.count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><ul><li>匿名内部类也就是没有名字的内部类，正因为没有名字，所以匿名内部类只能使用一次，它通常用来简化代码编写，但使用匿名内部类还有个前提条件：必须继承一个父类或实现一个接口</li><li>匿名类就是在实例化类的同时写出方法，不使用引用保存实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Outer().method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在接口上使用匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;eat something&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        p.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最常用的情况就是在多线程的实现上，因为要实现多线程必须继承Thread类或是继承Runnable接口<br>Thread类的匿名内部类实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Runnable接口的匿名内部类实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>Object类是所有类的超类，所有类默认继承Object类</p><h3 id="getClass"><a href="#getClass" class="headerlink" title="getClass()"></a>getClass()</h3><p>返回引用中存储的实际对象类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">Class <span class="class"><span class="keyword">class</span> </span>= stu.getClass();</span><br></pre></td></tr></table></figure><h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h3><p>返回对象的哈希值</p><p>哈希值：根据对象的地址或字符串或数字使用hash算法计算出来的int类型的数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="keyword">int</span> hash = stu.hashCode();</span><br></pre></td></tr></table></figure><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p>返回该对象的字符串表示，因为默认打印的是类的内存地址，所以通常我们都会重写这个方法，达到输出字符串的目的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot;age:&quot;</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student stu = <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>);</span><br><span class="line">String stuInfo = stu.toString();</span><br></pre></td></tr></table></figure><h3 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h3><p>比较两个对象地址是否相同，这个方法在String中被重写了，重写后的方法先对比引用地址，如不相同则对比字面值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">Student stu2 = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="keyword">boolean</span> result = stu1.equals(stu2);</span><br></pre></td></tr></table></figure><h3 id="finalize"><a href="#finalize" class="headerlink" title="finalize()"></a>finalize()</h3><p>垃圾回收方法，由JVM自动调用此方法</p><ul><li>垃圾对象：没有有效引用指向此对象</li><li>垃圾回收：由GC销毁垃圾对象，释放数据存储空间</li><li>自动回收机制：JVM的内存耗尽，一次性回收所有垃圾对象</li><li>手动回收机制：使用System.gc();通知JVM执行垃圾回收</li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="创建字符串的两种方式及区别"><a href="#创建字符串的两种方式及区别" class="headerlink" title="创建字符串的两种方式及区别"></a>创建字符串的两种方式及区别</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种创建方式，栈内引用直接指向方法区中的常量池中的值</span></span><br><span class="line">String str1 = <span class="string">&quot;你好&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种创建，堆内新建对象，对象指向方法区中的常量池中的值栈内引用指向堆内对象</span></span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="length"><a href="#length" class="headerlink" title="length()"></a>length()</h3><p>返回字符串长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> leng = str.length();</span><br></pre></td></tr></table></figure><h3 id="charAt-int-index"><a href="#charAt-int-index" class="headerlink" title="charAt(int index)"></a>charAt(int index)</h3><p>返回某个位置的字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> c = str.charAt(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="contains-String-str"><a href="#contains-String-str" class="headerlink" title="contains(String str)"></a>contains(String str)</h3><p>判断是否包含某个子字符串，返回布尔值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">boolean</span> result = str.contains(<span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="toCharArray"><a href="#toCharArray" class="headerlink" title="toCharArray()"></a>toCharArray()</h3><p>将字符串转换为字符数组返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>[] strs = str.toCharArray();</span><br></pre></td></tr></table></figure><h3 id="indexOf-String-str"><a href="#indexOf-String-str" class="headerlink" title="indexOf(String str)"></a>indexOf(String str)</h3><p>查找str首次出现的下标，返回，如果不存在，返回-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> index = str.indexOf(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="comment">// 从第四位开始查找</span></span><br><span class="line"><span class="keyword">int</span> index = str.indexOf(<span class="string">&quot;Hello&quot;</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h3 id="lastIndexOf-String-str"><a href="#lastIndexOf-String-str" class="headerlink" title="lastIndexOf(String str)"></a>lastIndexOf(String str)</h3><p>查找字符串在当前字符串中最后一次出现的下标，返回，如果不存在，返回-1;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;Java Hello Java CC Java&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> index = str.lastIndexOf(<span class="string">&quot;Java&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h3><p>去掉字符串前后空格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;    Hello World    &quot;</span>;</span><br><span class="line">String str2 = str.trim();</span><br></pre></td></tr></table></figure><h3 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase()"></a>toUpperCase()</h3><p>将小写转成大写</p><h3 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title="toLowerCase()"></a>toLowerCase()</h3><p>将大写转换成小写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">String str2 = str.toUpperCase();</span><br><span class="line">String str3 = str.toLowerCase();</span><br></pre></td></tr></table></figure><h3 id="endsWith-String-str"><a href="#endsWith-String-str" class="headerlink" title="endsWith(String str)"></a>endsWith(String str)</h3><p>判断字符串是否以str结尾</p><h3 id="startsWith-String-str"><a href="#startsWith-String-str" class="headerlink" title="startsWith(String str)"></a>startsWith(String str)</h3><p>判断字符串是否以str开头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">boolean</span> r1 = str.startsWith(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> r2 = str.endsWith(<span class="string">&quot;World&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="replace-char-oldChar-char-newChar"><a href="#replace-char-oldChar-char-newChar" class="headerlink" title="replace(char oldChar,char newChar)"></a>replace(char oldChar,char newChar)</h3><p>将旧字符串替换成新字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">String str2 = str.replace(<span class="string">&quot;World&quot;</span>,<span class="string">&quot;Java&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="split-String-str"><a href="#split-String-str" class="headerlink" title="split(String str)"></a>split(String str)</h3><p>根据str对字符串进行拆分，返回一个字符串数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;Hello World Java PHP C,Python|C++&quot;</span>;</span><br><span class="line"><span class="comment">// 以空格分隔字符串</span></span><br><span class="line">String[] strs = str.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="comment">// 以多个符号分隔字符串空格，逗号竖线都可分隔</span></span><br><span class="line">String[] strs = str.split(<span class="string">&quot;[ ,|]&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="可变字符串"><a href="#可变字符串" class="headerlink" title="可变字符串"></a>可变字符串</h2><ul><li><p>StringBuffer : 可变长字符串，运行效率慢、线程安全</p></li><li><p>StringBuilder : 可变长字符串、运行快、线程不安全</p></li><li><p>StringBuffer和StringBuilder的效率都高于String，都比String节省内存</p></li><li><p>StringBuffer和StringBuilder的用法是一样的，StringBuilder的效率高于StringBuffer</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="comment">// append()追加</span></span><br><span class="line">sb.append(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert()添加</span></span><br><span class="line">sb.insert(<span class="number">0</span>,<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// replace()替换:取前不取后</span></span><br><span class="line">sb.replace(<span class="number">6</span>,<span class="number">11</span>,<span class="string">&quot;Java&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete()删除</span></span><br><span class="line">sb.delete(<span class="number">6</span>,sb.length());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line">sb.toString();</span><br></pre></td></tr></table></figure><h2 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h2><ul><li>float和double类型的主要设计目标是为了科学计算和工程计算。他们执行二进制浮点运算，然而，它们没有提供完全精确的结果。但是，商业计算往往要求结果精确，这时候BigDecimal就派上大用场啦。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal bd1 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;1.0&quot;</span>);</span><br><span class="line">BigDecimal bd2 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;0.9&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加</span></span><br><span class="line">BigDecimal result1 = bd1.add(bd2);</span><br><span class="line"><span class="comment">// 减</span></span><br><span class="line">BigDecimal result2 = bd1.subtract(bd2);</span><br><span class="line"><span class="comment">// 乘</span></span><br><span class="line">BigDecimal result3 = bd1.multiply(bd2);</span><br><span class="line"><span class="comment">// 除</span></span><br><span class="line">BigDecimal result4 = bd1.divide(bd2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为除不尽会报错，所以这里保留两位小数四舍五入</span></span><br><span class="line">BigDecimal result5 = bd1.divide(bd2).setScale(<span class="number">2</span>, RoundingMode.HALF_UP)</span><br></pre></td></tr></table></figure><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><ul><li>Date表示特定的瞬间，精确到毫秒。Date类中的大部分方法都已经被Calendar类中的方法所取代</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1 创建Date对象</span></span><br><span class="line">    Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">    System.out.println(date1.toString()); <span class="comment">//Sun Sep 19 18:53:23 CST 2021</span></span><br><span class="line">    System.out.println(date1.toLocaleString()); <span class="comment">//2021年9月19日 下午6:53:23</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 昨天</span></span><br><span class="line">    Date date2 = <span class="keyword">new</span> Date(date1.getTime() - (<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">1000</span>)); </span><br><span class="line">    System.out.println(date2.toLocaleString()); <span class="comment">//2021年9月18日 下午6:53:23</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 方法after before</span></span><br><span class="line">    <span class="keyword">boolean</span> b1 = date1.after(date2);</span><br><span class="line">    System.out.println(b1); <span class="comment">//true</span></span><br><span class="line">    <span class="keyword">boolean</span> b2 = date1.before(date2);</span><br><span class="line">    System.out.println(b2); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比较compareTo();</span></span><br><span class="line">    <span class="keyword">int</span> d = date1.compareTo(date1);</span><br><span class="line">    System.out.println(d); <span class="comment">// 多的为1 少的为 -1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比较是否相等 equals()</span></span><br><span class="line">    <span class="keyword">boolean</span> b3 = date1.equals(date2);</span><br><span class="line">    System.out.println(b3); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h2><ul><li>Calendar提供了获取或设置各种日历字段的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建 Calendar 对象</span></span><br><span class="line">    Calendar calendar = Calendar.getInstance();</span><br><span class="line">    System.out.println(calendar.getTime().toLocaleString());</span><br><span class="line">    <span class="comment">// 2. 获取时间信息</span></span><br><span class="line">    <span class="comment">// 获取年</span></span><br><span class="line">    <span class="keyword">int</span> year = calendar.get(Calendar.YEAR);</span><br><span class="line">    <span class="comment">// 获取月 从 0 - 11</span></span><br><span class="line">    <span class="keyword">int</span> month = calendar.get(Calendar.MONTH);</span><br><span class="line">    <span class="comment">// 日</span></span><br><span class="line">    <span class="keyword">int</span> day = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">    <span class="comment">// 小时</span></span><br><span class="line">    <span class="keyword">int</span> hour = calendar.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">    <span class="comment">// 分钟</span></span><br><span class="line">    <span class="keyword">int</span> minute = calendar.get(Calendar.MINUTE);</span><br><span class="line">    <span class="comment">// 秒</span></span><br><span class="line">    <span class="keyword">int</span> second = calendar.get(Calendar.SECOND);</span><br><span class="line">    <span class="comment">// 3. 修改时间</span></span><br><span class="line">    Calendar calendar2 = Calendar.getInstance();</span><br><span class="line">    calendar2.set(Calendar.DAY_OF_MONTH, x);</span><br><span class="line">    <span class="comment">// 4. add修改时间</span></span><br><span class="line">    calendar2.add(Calendar.HOUR, x); <span class="comment">// x为正就加 负就减</span></span><br><span class="line">    <span class="comment">// 5. 补充方法</span></span><br><span class="line">    <span class="keyword">int</span> max = calendar2.getActualMaximum(Calendar.DAY_OF_MONTH);<span class="comment">// 月数最大天数</span></span><br><span class="line">    <span class="keyword">int</span> min = calendar2.getActualMinimum(Calendar.DAY_OF_MONTH);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h2><ul><li>SimpleDateFormat是一个以与语言环境有关的方式来格式化和解析日期的具体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建对象</span></span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy/MM/dd HH-mm-ss&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 创建Date</span></span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    <span class="comment">// 格式化date（日期→字符串）</span></span><br><span class="line">    String str = sdf.format(date);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    <span class="comment">// 解析（字符串→时间）</span></span><br><span class="line">    Date date2 = sdf.parse(<span class="string">&quot;1948/03/12&quot;</span>);</span><br><span class="line">    System.out.println(date2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><ul><li>主要用于获取系统的属性数据和其他操作，构造方法私有化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//arraycopy 复制</span></span><br><span class="line">    <span class="comment">//src-原数组 srcPos-从哪个位置开始复制0 dest-目标数组 destPos-目标数组的位置 length-复制的长度</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">20</span>, <span class="number">18</span>, <span class="number">39</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] dest = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">4</span>];</span><br><span class="line">    <span class="comment">//System.arraycopy(src, srcPos, dest, destPos, length);</span></span><br><span class="line">    System.arraycopy(arr, <span class="number">0</span>, dest, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : dest) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回当前系统时间(毫秒)</span></span><br><span class="line">    System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Arrays.copyOf(original, newLength)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;内部类&quot;&gt;&lt;a href=&quot;#内部类&quot; class=&quot;headerlink&quot; title=&quot;内部类&quot;&gt;&lt;/a&gt;内部类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;概念：在一个类的内部再定义一个完整的类，当外部类与内部类的属性重名时，优先访问内部类属性&lt;/li&gt;
&lt;li&gt;分类：成员内</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://jcxiaozhan.gitee.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate的简单入门使用</title>
    <link href="https://jcxiaozhan.gitee.io/2021/07/07/Hibernate%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/"/>
    <id>https://jcxiaozhan.gitee.io/2021/07/07/Hibernate%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</id>
    <published>2021-07-06T16:00:00.000Z</published>
    <updated>2021-08-29T18:46:22.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Hibernate"><a href="#什么是Hibernate" class="headerlink" title="什么是Hibernate"></a>什么是Hibernate</h2><blockquote><p>Hibernate是一个开放源代码的<code>对象关系映射框架</code>，它对JDBC进行了非常轻量级的对象封装，它将POJO与数据库表建立映射关系，是一个全自动的orm框架，hibernate可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。 Hibernate可以应用在任何使用JDBC的场合，既可以在Java的客户端程序使用，也可以在Servlet/JSP的Web应用中使用，最具革命意义的是，Hibernate可以在应用EJB的JavaEE架构中取代CMP，完成数据持久化的重任。</p></blockquote><h2 id="Hibernate的简单使用-Springboot项目"><a href="#Hibernate的简单使用-Springboot项目" class="headerlink" title="Hibernate的简单使用(Springboot项目)"></a>Hibernate的简单使用(Springboot项目)</h2><h3 id="pom文件引入jar包"><a href="#pom文件引入jar包" class="headerlink" title="pom文件引入jar包"></a>pom文件引入jar包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Springboot配置数据库信息"><a href="#Springboot配置数据库信息" class="headerlink" title="Springboot配置数据库信息"></a>Springboot配置数据库信息</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/webapp1901</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">admin</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.jpa.hibernate.naming.physical-strategy</span>=<span class="string">org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span></span><br></pre></td></tr></table></figure><h3 id="idea连接Mysql数据库"><a href="#idea连接Mysql数据库" class="headerlink" title="idea连接Mysql数据库"></a>idea连接Mysql数据库</h3><p>配置方法请参考百度教程(<a href="https://jingyan.baidu.com/article/a378c960ea8a1eb3282830c1.html">点此前往</a>)，配置成功后，可以在右侧工具栏查看自己的数据库</p><img src="https://img.jcxiaozhan.top/Hibernate%E5%85%A5%E9%97%A8%E4%B8%80.jpg" style="text-align:center;"><h3 id="配置Hibernate"><a href="#配置Hibernate" class="headerlink" title="配置Hibernate"></a>配置Hibernate</h3><p>打开idea项目结构，添加Hibernate</p><img src="https://img.jcxiaozhan.top/Hibernate%E5%85%A5%E9%97%A8%E4%BA%8C.jpg" style="text-align:center;"><p>添加xml配置文件</p><img src="https://img.jcxiaozhan.top/Hibernate%E5%85%A5%E9%97%A8%E4%B8%89.jpg" style="text-align:center;"><h3 id="生成实体类"><a href="#生成实体类" class="headerlink" title="生成实体类"></a>生成实体类</h3><p>打开工具栏配置，找到生成持久层映射这一项</p><img src="https://img.jcxiaozhan.top/Hibernate%E5%85%A5%E9%97%A8%E5%9B%9B.jpg" style="text-align:center;"><p>如图配置实体类生成规则</p><img src="https://img.jcxiaozhan.top/Hibernate%E5%85%A5%E9%97%A8%E5%85%AD.jpg" style="text-align:center;"><p>选择实体类生成位置</p><img src="https://img.jcxiaozhan.top/Hibernate%E5%85%A5%E9%97%A8%E4%B8%83.jpg" style="text-align:center;"><p><code>Hibernate为我们生成了实体类，要注意的是，你可能会碰到生成的实体类报红的问题，它将表中int(11)的字段生成为了Long类型，需要手动更正一下</code></p><img src="https://img.jcxiaozhan.top/Hibernate%E5%85%A5%E9%97%A8%E5%85%AB.jpg" style="text-align:center;"><h3 id="创建Dao文件"><a href="#创建Dao文件" class="headerlink" title="创建Dao文件"></a>创建Dao文件</h3><p>继承Hibernate提供的CrudRepository类就可实现基本的增删改查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.com.scitc.webapp3.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.com.scitc.webapp3.pojo.Manager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.CrudRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ManagerDao</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Manager</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">// CrudRepository泛型第一个值为实体类，第二个值为你的表的主键类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.com.scitc.webapp3.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.com.scitc.webapp3.pojo.Manager;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Assertions;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManagerDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ManagerDao managerDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Optional&lt;Manager&gt; obj = managerDao.findById(<span class="number">1</span>);</span><br><span class="line">        Manager manager = obj.get();</span><br><span class="line">        logger.info(manager.getLoginId());</span><br><span class="line">        Assertions.assertEquals(<span class="string">&quot;JohnCena&quot;</span>,manager.getLoginId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Iterable&lt;Manager&gt; list = managerDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Manager manager : list) &#123;</span><br><span class="line">            System.out.println(manager.getRealName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hibernate中将insert和update合并成了一个save方法，它会根据主键自动判断是增加还是修改操作</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Manager manager = <span class="keyword">new</span> Manager();</span><br><span class="line">        manager.setId(<span class="number">2</span>);</span><br><span class="line">        manager.setLoginId(<span class="string">&quot;Admin&quot;</span>);</span><br><span class="line">        manager.setRealName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        manager.setPwd(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        manager.setLoginCount(<span class="number">88</span>);</span><br><span class="line">        manager.setLastLoginDt(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">       managerDao.save(manager);</span><br><span class="line">        Manager manager1 = managerDao.findById(<span class="number">2</span>).get();</span><br><span class="line">        logger.info(manager1.getRealName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Manager manager = <span class="keyword">new</span> Manager();</span><br><span class="line">        manager.setId(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        managerDao.delete(manager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Manager manager = <span class="keyword">new</span> Manager();</span><br><span class="line">        manager.setId(<span class="number">2</span>);</span><br><span class="line">        manager.setLoginId(<span class="string">&quot;Admin&quot;</span>);</span><br><span class="line">        manager.setRealName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        manager.setPwd(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        manager.setLoginCount(<span class="number">88</span>);</span><br><span class="line">        manager.setLastLoginDt(<span class="keyword">null</span>);</span><br><span class="line">        managerDao.save(manager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ids.add(<span class="number">2</span>);</span><br><span class="line">        ids.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        managerDao.deleteAllById(ids);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByLoginId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Manager manager = managerDao.findByLoginId(<span class="string">&quot;JohnCena&quot;</span>);</span><br><span class="line">        Assertions.assertEquals(<span class="string">&quot;张三&quot;</span>,manager.getRealName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是Hibernate&quot;&gt;&lt;a href=&quot;#什么是Hibernate&quot; class=&quot;headerlink&quot; title=&quot;什么是Hibernate&quot;&gt;&lt;/a&gt;什么是Hibernate&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Hibernate是一个开放源代码</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://jcxiaozhan.gitee.io/tags/Java/"/>
    
    <category term="Hibernate" scheme="https://jcxiaozhan.gitee.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis的简单入门使用</title>
    <link href="https://jcxiaozhan.gitee.io/2021/05/31/Mybatis%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/"/>
    <id>https://jcxiaozhan.gitee.io/2021/05/31/Mybatis%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</id>
    <published>2021-05-30T16:00:00.000Z</published>
    <updated>2021-11-01T09:44:40.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Mybatis"><a href="#什么是Mybatis" class="headerlink" title="什么是Mybatis"></a>什么是Mybatis</h2><blockquote><p>MyBatis 是一款优秀的<code>持久层框架</code>，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p></blockquote><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><ul><li>因为内存有断电即失的特性，所以需要进行数据持久化</li><li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li></ul><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><p>持久层，可以理解成数据保存在数据库或者硬盘一类可以保存很长时间的设备里面，不像放在内存中那样断电就消失了，也就是把数据存在持久化设备上</p><h2 id="Mybatis的简单使用-Maven项目"><a href="#Mybatis的简单使用-Maven项目" class="headerlink" title="Mybatis的简单使用(Maven项目)"></a>Mybatis的简单使用(Maven项目)</h2><h3 id="pom文件引入jar包"><a href="#pom文件引入jar包" class="headerlink" title="pom文件引入jar包"></a>pom文件引入jar包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span>-</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mysql-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- junit测试依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建工具类"><a href="#创建工具类" class="headerlink" title="创建工具类"></a>创建工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//用输入流来读取xml文件</span></span><br><span class="line">            inputStream = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建SqlSession工厂</span></span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建并返回SqlSession</span></span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建mybatis核心配置文件"><a href="#创建mybatis核心配置文件" class="headerlink" title="创建mybatis核心配置文件"></a>创建mybatis核心配置文件</h3><p><code>mybatis-config.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- JDBC配置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/student-manager?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=GMT%2B8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lishuang001219&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- resource下的Mapper资源存在单层目录结构时的写法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;StudentMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- resource下的Mapper资源存在多层目录结构时的写法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/StudentMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">    <span class="keyword">private</span> String num;</span><br><span class="line">    <span class="keyword">private</span> String grade;</span><br><span class="line">    <span class="keyword">private</span> String clazz;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建Mapper接口文件"><a href="#创建Mapper接口文件" class="headerlink" title="创建Mapper接口文件"></a>创建Mapper接口文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">listStudent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建Mapper配置文件"><a href="#创建Mapper配置文件" class="headerlink" title="创建Mapper配置文件"></a>创建Mapper配置文件</h3><p><code>UserMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace命名空间：对应一个Mapper接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- sql语句 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id对应接口中定义的方法 resultType表示结果集类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建业务层"><a href="#创建业务层" class="headerlink" title="创建业务层"></a>创建业务层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentService</span> <span class="keyword">implements</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">selectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Student&gt; list;</span><br><span class="line">        SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">        StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);</span><br><span class="line">        list = mapper.selectAll();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    StudentService studentService = <span class="keyword">new</span> StudentService();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(studentService.listStudent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><img src="https://img.jcxiaozhan.top/Mybatis%E5%85%A5%E9%97%A8%E4%B8%80.jpg" style="height:400px;width:300px;text-align:center;"><h2 id="mybatis-generator的简单使用"><a href="#mybatis-generator的简单使用" class="headerlink" title="mybatis-generator的简单使用"></a>mybatis-generator的简单使用</h2><div class="note warning simple"><p>注：此插件主要用于自动生成实体类、Mapper接口和Mapper配置文件，mybatis核心配置文件和业务层文件需要根据实际应用场景对照生成的文件自行编写</p></div><h3 id="编写pom文件"><a href="#编写pom文件" class="headerlink" title="编写pom文件"></a>编写pom文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加插件(注意将此行注释删除，中文会引起idea报错) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>Generate MyBatis Artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>generate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- mysql-jdbc --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 生成的文件覆盖源文件 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写mybatis-generator配置文件"><a href="#编写mybatis-generator配置文件" class="headerlink" title="编写mybatis-generator配置文件"></a>编写mybatis-generator配置文件</h3><p><code>generatorConfig.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;simple&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/student-manager&quot;</span> <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;lishuang001219&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--实体存放位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;pojo&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Mapper.xml存放位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/resources&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Mapper接口存放位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--需要生成的表--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;student&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="双击一键生成代码"><a href="#双击一键生成代码" class="headerlink" title="双击一键生成代码"></a>双击一键生成代码</h3><img src="https://img.jcxiaozhan.top/Mybatis%E5%85%A5%E9%97%A8%E4%BA%8C.jpg" style="height:300px;width:500px;text-align:center;">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是Mybatis&quot;&gt;&lt;a href=&quot;#什么是Mybatis&quot; class=&quot;headerlink&quot; title=&quot;什么是Mybatis&quot;&gt;&lt;/a&gt;什么是Mybatis&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;MyBatis 是一款优秀的&lt;code&gt;持久层框架</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://jcxiaozhan.gitee.io/tags/Java/"/>
    
    <category term="Mybatis" scheme="https://jcxiaozhan.gitee.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>稀疏数组</title>
    <link href="https://jcxiaozhan.gitee.io/2021/02/19/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/"/>
    <id>https://jcxiaozhan.gitee.io/2021/02/19/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/</id>
    <published>2021-02-18T16:00:00.000Z</published>
    <updated>2021-02-19T08:16:55.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>稀疏数组是经过特殊处理后的二维数组。</li><li>当一个二维数组中存在大量相同值的时候，可以考虑转换为稀疏数组来进行存储，从而达到节省内存空间的目的。</li><li>二维数组中存在的大量相同值我们称之为<code>无效值</code>，除开无效值，剩下的就是<code>有效值</code>。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">0 0 0 0 0 0 0 0 0 0           </span><br><span class="line">0 0 2 0 0 0 0 0 0 0</span><br><span class="line">0 0 0 0 0 0 0 0 0 0</span><br><span class="line">0 0 0 0 0 0 0 0 0 0                                             10 10 2</span><br><span class="line">0 0 0 5 0 0 0 0 0 0                 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;                     1  2  2</span><br><span class="line">0 0 0 0 0 0 0 0 0 0                                             4  3  5</span><br><span class="line">0 0 0 0 0 0 0 0 0 0</span><br><span class="line">0 0 0 0 0 0 0 0 0 0</span><br><span class="line">0 0 0 0 0 0 0 0 0 0</span><br><span class="line">0 0 0 0 0 0 0 0 0 0</span><br><span class="line"></span><br><span class="line">存有大量相同值的二维数组                                     处理后形成的稀疏数组</span><br></pre></td></tr></table></figure><h2 id="存储规则"><a href="#存储规则" class="headerlink" title="存储规则"></a>存储规则</h2><ol><li><p>稀疏数组第一行固定用于存储原数组信息，例如，我们存储的是一个3行4列，有1个有效值的数组，第一行就是<code>3 4 1</code></p></li><li><p>稀疏数组一定是一个n行3列的二维数组</p><ul><li>因为我们有多个有效值，每一个有效值，我们都需要用一行来进行存储，所以有n行</li><li>3列分别对应了有效值的行、列、值</li></ul></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个10*10的二维数组，在数组存入两个有效值</span></span><br><span class="line"><span class="keyword">int</span>[][] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">array1[<span class="number">4</span>][<span class="number">3</span>] = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们打印一下，在控制台会看到如下一个二维数组</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        0 0 0 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">        0 0 2 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">        0 0 0 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">        0 0 0 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">        0 0 0 5 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">        0 0 0 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">        0 0 0 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">        0 0 0 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">        0 0 0 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">        0 0 0 0 0 0 0 0 0 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array1.length;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;array1[i].length;j++)&#123;</span><br><span class="line">        System.out.print(array1[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (j == array1[i].length-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组中有效值的个数</span></span><br><span class="line"><span class="comment">// 因为当前数组中初始值全部为0，所以这里不为0的就是我们的有效值，把它们筛选出来</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; array1.length; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; array1[i].length; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(array1[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个稀疏数组</span></span><br><span class="line"><span class="comment">// 稀疏数组的第一行存放的是原数组的信息，所以稀疏数组的行数=有效值+1，列数3固定</span></span><br><span class="line"><span class="keyword">int</span>[][] array2 = <span class="keyword">new</span> <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//用稀疏数组第一行，存放原数组的信息：行/列/有效值个数</span></span><br><span class="line">array2[<span class="number">0</span>][<span class="number">0</span>] = array1.length;</span><br><span class="line">array2[<span class="number">0</span>][<span class="number">1</span>] = array1[<span class="number">0</span>].length;</span><br><span class="line">array2[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再次遍历二维数组，将有效值存入稀疏数组中</span></span><br><span class="line"><span class="comment">// count++的使用恰好让我们在存储有效值时跳过了第一行</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; array1.length; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; array1[i].length; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(array1[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            array2[count][<span class="number">0</span>] = i;</span><br><span class="line">            array2[count][<span class="number">1</span>] = j;</span><br><span class="line">            array2[count][<span class="number">2</span>] = array1[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台打印查看一下我们转换完成的稀疏数组</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        10 10 2 </span></span><br><span class="line"><span class="comment">        1 2 2 </span></span><br><span class="line"><span class="comment">        4 3 5 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array2.length;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;array2[i].length;j++)&#123;</span><br><span class="line">        System.out.print(array2[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (j == array2[i].length-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复</span></span><br><span class="line"><span class="comment">//1. 用稀疏数组中第一行信息创建二维数组</span></span><br><span class="line"><span class="keyword">int</span>[][] array3 = <span class="keyword">new</span> <span class="keyword">int</span>[array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"><span class="comment">//2. 填充二维数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; array2.length;i++)&#123;</span><br><span class="line">    array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]] = array2[i][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;稀疏数组是经过特殊处理后的二维数组。&lt;/li&gt;
&lt;li&gt;当一个二维数组中存在大量相同值的时候，可以考虑转换为稀疏数组来进行存储，</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://jcxiaozhan.gitee.io/tags/Java/"/>
    
    <category term="算法" scheme="https://jcxiaozhan.gitee.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>2020年终总结</title>
    <link href="https://jcxiaozhan.gitee.io/2020/12/31/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://jcxiaozhan.gitee.io/2020/12/31/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2020-12-30T16:00:00.000Z</published>
    <updated>2020-12-31T14:08:01.456Z</updated>
    
    <content type="html"><![CDATA[<p>2020年已经走到尾声了，马上就要迎来崭新的2021年了，其实也没什么好期待的，要说新年的美好祝愿吧，那就是希望家人身体健康，仅此而已。想了想，还是写一篇年终总结吧，我文笔不好，但就想着给我的2020年留下个痕迹，回头还能看一看，也算是记录了我的成长吧！</p><p>2020年过得很快，像是眨了了个眼，就要说告别了。2020年也刚好是我转到软件专业的第一年，当时的我兴奋、激动、满怀憧憬，还记得我跟我原室友是这样讲的，我说：“如果没转成功，我真的没有读下去的必要了！”这一次很幸运，我成功转到了软件专业，还高兴地请我的原室友们吃了顿火锅。</p><p>在软件专业的第一个学期(也就是今年上半年)，因为突然爆发疫情的原因，只能在家中上网课，隔着屏幕与老师同学们交流学习，我很清楚自己的处境，我不过就是一个软件专业的小白，零基础，跟人家学了一个学期的根本没法比，所以我每一堂课都听得很认真，一边敲代码，一边做笔记，聚精会神，生怕遗漏了什么。对于我们班导师晖哥提出的一些专业相关的东西，让我们了解的，我都会在课下去查一查，了解一下，学习一下。每天上课老师讲的是我所感兴趣的东西，所以我充满干劲。期末成绩也算是给了自己一个满意的交代，专业排名20，虽然不算优秀，但是跟有基础的同学相比，我已经算满意了，至少证明老师讲的知识我能听明白，并且在渐渐地缩短与同学们的差距。</p><p>今年的疫情，导致我们过了一次长达半年的寒假，那是一段我不想再经历的日子，每天看见感染人数成百上千地增加，我们只能无助地在家里待着，听指挥，不乱跑成了我们为祖国出力的唯一方式。疫情的最前线，无数的医疗工作者夜以继日地战斗着，最终我们还是赢得了胜利，复工复产已经稳定。再看看美国这个资本大国，每天还处在水生火热之中，感染人数还在十几二十万地增长着，真幸运作为一个中国人，生活在社会主义国家。</p><p>从今年3月搭建了我的第一个博客开始，大部分的心思都用在自己的小网站上了，可能是因为个人网站可以花费相对较少的时间来获得极大的成就感吧。时间证明了我的这部分投入是值得的，通过交换友链，我了结识到一个又一个博主，他们和我年龄相仿，大部分都是学生，但大部分又比我优秀，成为和他们一样优秀的人渐渐成了我的目标。我自认跟以前相比，现在的我学习上已经很努力了，而且在兴趣的驱使下，我在课下做自我学习的时间占了我课余时间的大部分，可带来的效果却不尽人意，有时候会产生失落感，但是当我缓过来之后，又会开始向前奔跑。很早之前，早在中学时代，我就想学计算机，从事互联网相关工作，现在的我，刚刚踏进了这个大门，所以我绝对不会放弃，还有太多太多的东西等着我去学习。</p><p>总的来说，今年的疫情，加速了一整年的进度，一切都显得忙碌。而从自身来讲，我能力的提升可能不那么明显，倒是思想渐渐成熟起来，我不再沉迷于游戏带来的短暂快乐，我所做的努力都是在为我的将来铺路，很多事情，不再任性，对于父母、家庭，也多出一份责任感来，那个父母庇护下的孩子，这一年真正地成长了。</p><p>再见2020，你好2021</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2020年已经走到尾声了，马上就要迎来崭新的2021年了，其实也没什么好期待的，要说新年的美好祝愿吧，那就是希望家人身体健康，仅此而已。想了想，还是写一篇年终总结吧，我文笔不好，但就想着给我的2020年留下个痕迹，回头还能看一看，也算是记录了我的成长吧！&lt;/p&gt;
&lt;p&gt;20</summary>
      
    
    
    
    <category term="闲谈" scheme="https://jcxiaozhan.gitee.io/categories/%E9%97%B2%E8%B0%88/"/>
    
    
    <category term="年终总结" scheme="https://jcxiaozhan.gitee.io/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>从零开始，搭建个人博客(二)</title>
    <link href="https://jcxiaozhan.gitee.io/2020/10/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%8C%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20(%E4%BA%8C)/"/>
    <id>https://jcxiaozhan.gitee.io/2020/10/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%8C%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20(%E4%BA%8C)/</id>
    <published>2020-10-04T16:00:00.000Z</published>
    <updated>2021-08-29T18:37:23.375Z</updated>
    
    <content type="html"><![CDATA[<div class="note success flat"><p>文章更新于2020年11月30日，更正了一些小问题，保证了本教程的可行性与可靠性</p></div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前写过一篇网站搭建的文章，那是我最初搭建博客的方式，很方便、快捷，但是，即便我购买的是相对较便宜的学生机，每年在服务器和域名上都要花上一百多块钱，作为没有稳定收入的学生群体，我反正是觉得不值的，所以后来用了免费的方式搭建了现在这个静态博客，当然如果你认为每年为博客投入一定钱来续费服务器和域名是值得的，也可以看看我的上一篇搭建文章，<a href="https://jcxiaozhan.gitee.io/2020/05/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%8C%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20(%E4%B8%80)/">《从零开始，搭建个人博客(一)》</a>，也许会给你带来一些帮助。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>一个码云账号，<a href="https://gitee.com/">前往注册</a></li><li>Node工具，<a href="https://nodejs.org/en/">点击下载</a></li><li>Git工具，<a href="https://git-scm.com/">点击下载</a></li></ol><h2 id="搭建教程"><a href="#搭建教程" class="headerlink" title="搭建教程"></a>搭建教程</h2><h3 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h3><p>Node在官网下载安装包手动安装即可，安装完成后，用键盘win+R，输入cmd打开终端，依次输入以下两条命令,如图显示版本号，即表示安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E4%B8%80.jpg"><h3 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h3><p>npm是一个包管理工具，由于它安装速度慢，所以我们通过cnpm来代替npm进行依赖的安装，用以下命令安装cnpm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>稍等片刻即可安装成功,然后我们输入以下命令，如图显示版本信息，即表示安装成功了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E4%BA%8C.jpg" width="80%"><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>用以下命令安装Hexo博客框架</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>同样我们使用以下命令验证一下，如图显示版本信息，即表示Hexo博客框架安装成功，之后我们就可以开始使用Hexo博客框架来部署博客了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E4%B8%89.jpg"><h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><p>首先在电脑任意地方新建一个空文件夹，作为我们博客的根目录，然后我们在新建的文件夹中右键打开Git命令行，并确保后续命令操作是在博客根目录下进行的</p><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E5%9B%9B.jpg" width="80%"><p>我们用以下命令初始化博客根目录，其实就是克隆github上的仓库到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E4%BA%94.jpg"><p style="text-align:center">终端提示初始化成功</p><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E5%85%AD.jpg"><p style="text-align:center">博客根目录自动生成了文件</p><p>用以下命令，启动本地预览,访问地址<span><a href="http://localhost:4000/">http://localhost:4000/</a></span>，即可看到一个初始化的博客页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E4%B8%83.jpg"><h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><p>当然，博客不可能是只放在自己电脑上的，所以我们要把它部署到码云上，这样别人才能访问它</p><p>登录码云，查看个人信息，保证图中两个用户名是一致的，不一致请进行更改</p><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%28%E8%A1%A5%E4%B8%83%E5%90%8E%29.jpg"><p>新建公开仓库，路径对照归属填写，必须严格按照此格式，不然会影响网站访问，其它选项默认即可</p><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E5%85%AB.jpg"><p>之后我们回到博客根目录打开Git命令行，输入以下命令，安装一个Git部署插件。如果安装过程中出现问题，导致安装失败，用我提供的这个也是可以的，将压缩包解压到博客根目录即可，<a href="https://wwa.lanzoui.com/b0eq5auwd">Git部署插件</a>，密码：a7j2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p>等待安装完成后，我们打开博客根目录下的<code>_config.yml</code>这个文件，划到文件最底部，在repo后面填写自己的码云仓库地址</p><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E4%B9%9D.jpg"><p>用以下命令将本地博客推向码云仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>在仓库开启Gitee Pages服务，要注意的是，<code>以后我们更新博客，每一次推送到远端仓库后都要手动更新一下Gitee Pages页面</code></p><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E5%8D%81.jpg"><p>至此，我们的Hexo博客就已经搭建成功了，Gitee Pages页面提供的网址就是我们的站点地址</p><img src="https://img.jcxiaozhan.top/Hexo%E6%90%AD%E7%AB%99%E5%8D%81%E4%B8%80.jpg"><h2 id="博客发布流程"><a href="#博客发布流程" class="headerlink" title="博客发布流程"></a>博客发布流程</h2><p>在博客根目录下<code>/source/_posts</code>路径下，存放的是我们的博客文章，都是Markdown格式的</p><ol><li><p>在本地更新博客后，先用以下命令清除一下之前生成的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure></li><li><p>再用以下命令打开本地服务器，进入<a href="http://localhost:4000/">http://localhost:4000</a><span>进行本地预览</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li><li><p>确认无误后，用以下命令推向远端仓库，别忘记到Gitee Pages页面手动更新一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></li></ol><h2 id="博客主题"><a href="#博客主题" class="headerlink" title="博客主题"></a>博客主题</h2><p>博客系统的默认主题一般都是很丑的，Hexo的也不例外，所以难免我们要更换主题</p><p>Hexo博客的主题是放在根目录的<code>/themes</code>路径下的，你可以去网上下载喜欢的主题，然后修改博客根目录下<code>_config.yml</code>文件中theme这一项为主题名即可</p><p>本博客用的Butterfly主题，你可以按照官方文档进行下载、配置、使用，<a href="https://butterfly.js.org/posts/21cfbf15/">主题传送门</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note success flat&quot;&gt;&lt;p&gt;文章更新于2020年11月30日，更正了一些小问题，保证了本教程的可行性与可靠性&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前</summary>
      
    
    
    
    <category term="网站建设" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="网站建设" scheme="https://jcxiaozhan.gitee.io/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    <category term="Hexo" scheme="https://jcxiaozhan.gitee.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>用Markdown写出一篇漂亮的博客</title>
    <link href="https://jcxiaozhan.gitee.io/2020/07/31/%E7%94%A8Markdown%E5%86%99%E5%87%BA%E4%B8%80%E7%AF%87%E6%BC%82%E4%BA%AE%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>https://jcxiaozhan.gitee.io/2020/07/31/%E7%94%A8Markdown%E5%86%99%E5%87%BA%E4%B8%80%E7%AF%87%E6%BC%82%E4%BA%AE%E7%9A%84%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-07-30T16:00:00.000Z</published>
    <updated>2021-08-29T17:22:31.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天和一个学长聊到写博客的问题，现在主流的博客系统，都已经支持使用Markdown语法编写博客了，但是任然有一些博客系统还是传统的html编辑器，通过源代码的形式来控制博客的排版，比如博主之前用的wordpress博客系统就是如此，Markdown格式写出来的博客还要通过一些特殊的方式，来转换成html代码来编辑发表，今天我就来教一下大家如何实现。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>Visual Studio Code(VScode)编辑器，<a href="https://code.visualstudio.com/">点击下载</a></li><li>自学Markdown语法，推荐B站小马视频教学，<a href="https://www.bilibili.com/video/BV1xW411r7Nv">点击前往</a></li></ol><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><ol><li><p>在VScode的插件商店搜索Markdown Preview Enhanced进行安装即可，如下图所示。</p><img src="https://img.jcxiaozhan.top/%E5%86%99%E5%8D%9A%E5%AE%A2%E4%B8%80.jpg"></li><li><p>安装完成后在我们编写窗口的右上角会有一个点击预览markdown格式的小按钮，点击后会在右边新开一栏，实时预览我们用markdown格式编写的内容，十分方便，效果如下图所示。</p><img src="https://img.jcxiaozhan.top/%E5%86%99%E5%8D%9A%E5%AE%A2%E4%BA%8C.jpg"></li><li><p>当我们编写完成后，只需要在右边预览处点击鼠标右键，就会有另存为html格式的选项，然后我们再把html中body标签内的源码复制粘贴到博客后台，对格式微调，发表文章即可。</p><img src="https://img.jcxiaozhan.top/%E5%86%99%E5%8D%9A%E5%AE%A2%E4%B8%89.jpg"></li></ol><h2 id="多讲一句"><a href="#多讲一句" class="headerlink" title="多讲一句"></a>多讲一句</h2><p>Markdown语法，我建议大家都可以去学一学，首先它并不难，无非就是一些控制文本显示的东西，什么加粗、倾斜、下划线之类的,它整齐的排版用来记笔记、写文章都特别爽，总之，非常推荐，感兴趣的朋友可以去了解、学习下！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;昨天和一个学长聊到写博客的问题，现在主流的博客系统，都已经支持使用Markdown语法编写博客了，但是任然有一些博客系统还是传统的html编</summary>
      
    
    
    
    <category term="网站建设" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="网站建设" scheme="https://jcxiaozhan.gitee.io/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    <category term="Markdown" scheme="https://jcxiaozhan.gitee.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>从零开始，搭建个人博客(一)</title>
    <link href="https://jcxiaozhan.gitee.io/2020/05/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%8C%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20(%E4%B8%80)/"/>
    <id>https://jcxiaozhan.gitee.io/2020/05/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%8C%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20(%E4%B8%80)/</id>
    <published>2020-05-28T16:00:00.000Z</published>
    <updated>2021-08-29T18:35:50.948Z</updated>
    
    <content type="html"><![CDATA[<div class="note success flat"><p>文章更新于2020年11月30日，补充了一些细节问题，保证了本教程的可行性与可靠性</p></div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我的网站从搭建到现在，已经100来天了，一个月没发文章了，因为这个月，确实感觉没有学到什么东西，在家成天上网课，积极性也在慢慢减弱，这两天返校了，这星期没课，就想着，把之前没做的搭站教程做一做，实际上，步骤都忘得差不多了，当初搭建的时候也是跌跌撞撞，走了很多弯路，最后也不知道怎么就捣鼓出来了，这次又写教程，算是又从零开始了，各位就随便看看吧。</p><h2 id="网站搭建的三大部分"><a href="#网站搭建的三大部分" class="headerlink" title="网站搭建的三大部分"></a>网站搭建的三大部分</h2><ul><li>服务器<br>网站的搭建基于服务器，只有网站文件只有放在服务器上，才能被他人访问</li><li>域名<br>域名，也就是我们常说的网址，用于查找服务器IP来达到访问网站的目的，同时也方便我们记忆</li><li>环境配置<br>有了前两项，只有配置好服务器后台，网站才成功被搭建</li></ul><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>为什么先讲域名呢，因为大陆购买的域名都要经过备案才能使用，备案审核时间通常比较长，像博主自己的域名就用了1个月才通过备案，所以有心要搭建一个个人网站的小伙伴现在可以先去购买域名进行备案，早备案早通过。</p><p>越好的域名越贵，如果是用于个人网站的域名，其实不用买贵的，买一个经济实惠的就差不多了，这里推荐阿里云的域名，首年只要1元，<a href="https://wanwang.aliyun.com/domain/1yuan">阿里云域名购买地址</a>。</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h3><p>服务器有国外的和国内的，价格也有所不同，我们在国内搭建博客，所以一定是选择国内的服务器，这里推荐阿里云的轻量级服务器，网站搭建不需要服务器有多大的容量，所以我们买最便宜的就好，当然，如果你有钱的话，买大一点的服务器是完全没问题的。如下图，选择轻量级服务器，系统镜像ContOS，还有一点要说一下，服务器和域名最好选同一个公司的，会比较方便，比如你购买的是腾讯的服务器，那么建议你购买腾讯的域名。<a href="https://www.aliyun.com/minisite/goods?userCode=wh43ewj4">优惠券</a>，<a href="https://promotion.aliyun.com/ntms/act/campus2018.html">阿里云学生机</a>。</p><img src="https://img.jcxiaozhan.top/%E6%90%AD%E7%AB%99%E4%B8%80.jpg"><img src="https://img.jcxiaozhan.top/%E6%90%AD%E7%AB%99%E4%BA%8C.jpg"><h3 id="端口放行"><a href="#端口放行" class="headerlink" title="端口放行"></a>端口放行</h3><p>购买好服务器后，服务器防火墙，放行80、443端口，将购买的域名与服务器进行绑定解析，具体可在网上查找域名解析的教程</p><img src="https://img.jcxiaozhan.top/%E6%90%AD%E7%AB%99%28%E8%A1%A5%E4%BA%8C%E5%90%8E%29.jpg"><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h3><p>在阿里云网页上将购买的服务器进行远程连接，进入命令界面，输入如下命令，安装宝塔面板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><img src="https://img.jcxiaozhan.top/%E6%90%AD%E7%AB%99%28%E8%A1%A5%E4%B8%89%E5%89%8D%29.jpg"><p>等待几分钟后，出现如下界面，说明宝塔面板安装成功,红框部分是你的宝塔操作面板地址和默认用户名密码，用于登录宝塔面板</p><img src="https://img.jcxiaozhan.top/%E6%90%AD%E7%AB%99%E4%B8%89.jpg"><h3 id="安装集成环境"><a href="#安装集成环境" class="headerlink" title="安装集成环境"></a>安装集成环境</h3><p>登录宝塔面板，一键安装LNMP集成环境，时间较长，请耐心等待</p><img src="https://img.jcxiaozhan.top/%E6%90%AD%E7%AB%99%E5%9B%9B.jpg"><h3 id="修改宝塔账号密码"><a href="#修改宝塔账号密码" class="headerlink" title="修改宝塔账号密码"></a>修改宝塔账号密码</h3><p>为了安全，集成环境安装完成后，在面板设置里面修改一下账号密码</p><img src="https://img.jcxiaozhan.top/%E6%90%AD%E7%AB%99%E4%BA%94.jpg"><h3 id="部署wordpress博客"><a href="#部署wordpress博客" class="headerlink" title="部署wordpress博客"></a>部署wordpress博客</h3><p>在软件商店，找到wordpress一键部署，填写域名和备注即可</p><img src="https://img.jcxiaozhan.top/%E6%90%AD%E7%AB%99%E5%85%AD.jpg"><img src="https://img.jcxiaozhan.top/%E6%90%AD%E7%AB%99%E4%B8%83.jpg"><p>接下来就是对wordpress这个博客系统的操作了，合理地使用wordpress，去搭建属于你自己的博客吧！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note success flat&quot;&gt;&lt;p&gt;文章更新于2020年11月30日，补充了一些细节问题，保证了本教程的可行性与可靠性&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="网站建设" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="网站建设" scheme="https://jcxiaozhan.gitee.io/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>关于NaN的一个小问题</title>
    <link href="https://jcxiaozhan.gitee.io/2020/04/24/%E5%85%B3%E4%BA%8ENaN%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>https://jcxiaozhan.gitee.io/2020/04/24/%E5%85%B3%E4%BA%8ENaN%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98/</id>
    <published>2020-04-23T16:00:00.000Z</published>
    <updated>2021-08-29T17:01:45.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在写js代码的时候，遇到一个小问题，也在百度上找了好半天，好像没有一模一样的解答，最后在一些大佬的关于NaN详解的文章里找到了答案，所以我想记录一下这次问题</p><p>下面这段是课堂上老师写的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = input.value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Number</span>(str.charAt(<span class="number">0</span>)))&#123;</span><br><span class="line">    infoUserName.innerHTML = <span class="string">&quot;不能以数字开头&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码，执行时候是完全没有问题的，输入以数字开头的字符串，就会执行代码，出现提示。后来我再来看这段代码，就发现if中的判定条件是将第一个字符转化为数值，转化不了则会返回NaN,然后我就在想，无论转化后是数字还是NaN,都if无关，那么是怎么判断是否要执行代码的，于是，我将代码改了下，改成下面这样了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = input.value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Number</span>(str.charAt(<span class="number">0</span>)) != <span class="literal">NaN</span>)&#123;</span><br><span class="line">    infoUserName.innerHTML = <span class="string">&quot;不能以数字开头&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从我认为来看，这样是完全合理的，判断转化值是否不等于NaN，这样他就会出现一个ture或者false，但是出现问题了，无论我输入是不是数字开头的字符串，都会出现提示。难道是数字、字母转化出来都为NaN？不可能吧，带着疑惑，我又写了下面这串代码来验证</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = init;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;sssssss&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="built_in">Number</span>(str.charAt(<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台返回的结果为NaN,没错啊，为什么判定的时候就出问题了，我开始百度，找寻答案，最后问题解决了，从大佬们的文章中我知道了<code>NaN要严格地来说它的类型依旧是Number型，但是它跟任何数字或者字符(包括它自己)相比较得到的结果都会是false</code>，我理解为，它本身就有false的性质，所以当我输入字符时，他不会执行代码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天在写js代码的时候，遇到一个小问题，也在百度上找了好半天，好像没有一模一样的解答，最后在一些大佬的关于NaN详解的文章里找到了答案，所以</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://jcxiaozhan.gitee.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JSON基础</title>
    <link href="https://jcxiaozhan.gitee.io/2020/04/19/JSON%E5%9F%BA%E7%A1%80/"/>
    <id>https://jcxiaozhan.gitee.io/2020/04/19/JSON%E5%9F%BA%E7%A1%80/</id>
    <published>2020-04-18T16:00:00.000Z</published>
    <updated>2021-08-30T03:05:16.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天，我的JSON学习算是告一段落了，不过只是入门阶段，我只是掌握了一些基础语法，下面是我的学习笔记，有兴趣的小伙伴可以看一看，这不是一篇教程贴，但是如果你有基础的话，应该很容易看得懂，我只是想分享一下我的所学。</p><h2 id="JSON在线工具"><a href="#JSON在线工具" class="headerlink" title="JSON在线工具"></a>JSON在线工具</h2><p>一个可以在线编写JSON的网站</p><blockquote><p><a href="https://json.cn/">https://json.cn/</a></p></blockquote><h2 id="JSON是什么"><a href="#JSON是什么" class="headerlink" title="JSON是什么"></a>JSON是什么</h2><p>JSON，全称JavaScript Object Notation,即JavaScript对象标记法</p><p>JSON是存储和交换文本信息的语法，类似 XML</p><p>JSON是一种轻量级的、基于文本的、可读的格式，语法格式参考JavaScript对象，格式永不升级</p><h2 id="JSON语法规则"><a href="#JSON语法规则" class="headerlink" title="JSON语法规则"></a>JSON语法规则</h2><p>数组（Array）用方括号<code>[]</code>表示，存放值<br>对象（Object）用大括号<code>&#123;&#125;</code>表示，存放名称/值<br>名称/值对（name/value）组合成数组和对象<br>名称（name）置于双引号中，值（value）有字符串、数值、布尔值、null、对象、数组。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>:<span class="number">19</span>,</span><br><span class="line">    <span class="attr">&quot;hobby&quot;</span>:[<span class="string">&quot;Sing&quot;</span>,<span class="string">&quot;dance&quot;</span>,<span class="string">&quot;Rap&quot;</span>,<span class="string">&quot;basketball&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串规则"><a href="#字符串规则" class="headerlink" title="字符串规则"></a>字符串规则</h2><p>用英语双引号括起来<br>字符串中不能单独出现双引号<code>&quot;</code>和反斜杠<code>\</code><br>如需输入双引号或反斜杠，需要在其前面加上一个\，如 <code>你喜欢苹果\\香蕉</code></p><h2 id="JSON的解析与生成"><a href="#JSON的解析与生成" class="headerlink" title="JSON的解析与生成"></a>JSON的解析与生成</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JSON.parse()    将符合JSON规则的字符串转换为对象</span><br><span class="line">JSON.stringify()     将Javascript值转换为字符串</span><br><span class="line">eval()     将字符串解析为代码执行</span><br></pre></td></tr></table></figure><p><code>解析</code>是指将JSON字符串转化为Javascript对象的过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JSON.parse(name,value)</span><br><span class="line"></span><br><span class="line">第一个参数为变量名，是必选参数。</span><br><span class="line">第二个参数为需要执行的函数名，如果使用两个参数的话，对象中的每一组名称&#x2F;值对都会执行一次函数，用于解析过程中的赋值。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;John&quot;,&quot;age&quot;:19&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(str,fun);</span><br><span class="line"><span class="comment">//var obj = eval(&quot;(&quot;+ str + &quot;)&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">name,value</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><p><code>序列化</code>是指将Javascript值转化为JSON字符串的过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JSON.stringify(value,replacer,space)</span><br><span class="line"></span><br><span class="line">第一个参数为Jascript的值，一般是对象或数组，是必选参数。</span><br><span class="line">第二个参数可以是函数或者数组,如果是函数，对象中的每一组名称&#x2F;值对都会执行一次函数，函数返回值将代替转化结果进行输出，如果返回undefind，则被忽略。如果是数组，则只有数组中存在的名称，才能被转化，且转化后顺序与数组中的值保持一致</span><br><span class="line">第三个参数是为了方便阅读和排版，用来添加空白或制表符等</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&quot;John&quot;</span>,</span><br><span class="line">    age:<span class="number">19</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonstr = <span class="built_in">JSON</span>.stringify(obj,fun);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">name,value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(jsonstr);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c:<span class="number">3</span>,</span><br><span class="line">    d:<span class="number">4</span>   </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonstr = <span class="built_in">JSON</span>.stringify(obj,[<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;a&quot;</span>],<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(jsonstr);</span><br></pre></td></tr></table></figure><h2 id="JSON和XML的转化"><a href="#JSON和XML的转化" class="headerlink" title="JSON和XML的转化"></a>JSON和XML的转化</h2><p>官网很慢，我们在下面这个网站下载jQuery文件</p><blockquote><p><a href="http://www.jq22.com/jquery-info122">http://www.jq22.com/jquery-info122</a></p></blockquote><p>在下面这个网站下载jquery.json2xml.js和jquery.xml2json.js两个组件</p><blockquote><p><a href="https://json.cn/component.html">https://json.cn/component.html</a></p></blockquote><p>先引入下载的三个js文件，然后就可以使用了，引入顺序很重要</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.json2xml.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.xml2json.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将XML字符串转化为JSON字符串的过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;&lt;root&gt;&quot;</span>+</span><br><span class="line">          <span class="string">&quot;&lt;name&gt;John&lt;/name&gt;&quot;</span>+</span><br><span class="line">          <span class="string">&quot;&lt;age&gt;19&lt;/age&gt;&quot;</span>+</span><br><span class="line">          <span class="string">&quot;&lt;hobby&gt;Sing&lt;/hobby&gt;&quot;</span>+</span><br><span class="line">          <span class="string">&quot;&lt;hobby&gt;dance&lt;/hobby&gt;&quot;</span>+</span><br><span class="line">          <span class="string">&quot;&lt;hobby&gt;Rap&lt;/hobby&gt;&quot;</span>+</span><br><span class="line">          <span class="string">&quot;&lt;hobby&gt;basketball&lt;/hobby&gt;&quot;</span>+</span><br><span class="line">          <span class="string">&quot;&lt;/root&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = $.xml2json(str);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonstr = <span class="built_in">JSON</span>.stringify(obj);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(jsonstr);</span><br></pre></td></tr></table></figure><p>将Javascript对象转换为XML字符串的过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&quot;John&quot;</span>,</span><br><span class="line">    age:<span class="number">19</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xmlstr = $.json2xml(obj);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(xmlstr);</span><br></pre></td></tr></table></figure><h2 id="GeoJSON和TopoJSON"><a href="#GeoJSON和TopoJSON" class="headerlink" title="GeoJSON和TopoJSON"></a>GeoJSON和TopoJSON</h2><p>下面这个网站，可以在线在地图上表示GeoJSON信息</p><blockquote><p><a href="http://geojson.io/">http://geojson.io</a></p></blockquote><p>GeoJSON和TopoJSON是符合JSON语法规则的两种数据格式，用于表示地理信息</p><ul><li>GeoJSON<br>GeoJSON用于表示地理空间信息，它的最外层是一个对象，对象可表示几何体(Geometry)、特征(Feature)、特征集合(FeatureCollection)<br>最外层的GeoJSON里可能包含多个子对象，每一个GeoJSON对象都有一个type属性，表示对象类型，有下面这些类型<ul><li>Point 点</li><li>MultiPoint 多点</li><li>LineString 线</li><li>MultiLineString 多线</li><li>Polygon 面</li><li>MultiPolygon 多面</li><li>GeometryCollection 几何体集合</li><li>Feature 特征</li><li>FeatureCollection 特征集合</li></ul></li></ul><p>如果type值为Point、MultiPoint、LineString、MultiLineString、Polygon、MultiPolygon，对象必有变量coordinates<br>如果type值为GeometryCollection，对象必有变量geometries，其值是一个数组，数组每一项都是一个几何对象<br>如果type值为Feature，对象必有变量geometry，表示几何体其值为一个几何体对象。此特征对象还包含一个properties，表示特征，其值可以是任意JSON对象或者Null</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;GeometryCollection&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;geometries&quot;</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Point&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;coordinates&quot;</span>: [<span class="number">50</span>,<span class="number">30</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;LineString&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;coordinates&quot;</span>: [[<span class="number">50</span>,<span class="number">30</span>],[<span class="number">100</span>,<span class="number">30</span>]]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;四川成都&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;geometry&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;Point&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;coordinates&quot;</span>:[<span class="number">104.05</span>,<span class="number">30.68</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TopoJSON<br>TopoJSON是GeoJSON按拓扑学编码后的扩展形式<br>TopoJSON消除了冗余，相比TopoJSON文件较小</li></ul><p>下面这个网站可以进行TopoJSON和GeoJSON格式的转换</p><blockquote><p><a href="https://mapshaper.org/">https://mapshaper.org/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天，我的JSON学习算是告一段落了，不过只是入门阶段，我只是掌握了一些基础语法，下面是我的学习笔记，有兴趣的小伙伴可以看一看，这不是一篇教</summary>
      
    
    
    
    <category term="编程学习" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://jcxiaozhan.gitee.io/tags/JavaScript/"/>
    
    <category term="JSON" scheme="https://jcxiaozhan.gitee.io/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>聊聊PanDownload</title>
    <link href="https://jcxiaozhan.gitee.io/2020/04/17/%E8%81%8A%E8%81%8APanDownload/"/>
    <id>https://jcxiaozhan.gitee.io/2020/04/17/%E8%81%8A%E8%81%8APanDownload/</id>
    <published>2020-04-16T16:00:00.000Z</published>
    <updated>2021-08-29T16:24:37.073Z</updated>
    
    <content type="html"><![CDATA[<h3 id="这篇文章，就PanDownload开发者被抓事件，我想谈谈自己的看法"><a href="#这篇文章，就PanDownload开发者被抓事件，我想谈谈自己的看法" class="headerlink" title="这篇文章，就PanDownload开发者被抓事件，我想谈谈自己的看法"></a>这篇文章，就PanDownload开发者被抓事件，我想谈谈自己的看法</h3><p>事情是这样的，2020年4月15日下午，PanDownload开发者蔡某萌被抓，他开发的这款软件可以突破百度网盘限速从而高速下载网盘文件，软件完全免费，深受大家喜欢。今年2月，有人报案说PanDownload泄漏了自己的隐私，警方开始调查。蔡某萌被抓后，警方爆出他非法盈利30余万，给百度公司带来了上千万的损失。</p><p>事发之后，各大贴吧论坛反应还是挺大的，可见这个软件用户群数量的庞大，网上骂声一片，矛头直指百度，你可能会说，为什么盗版软件侵权，正版软件却背负骂名呢。这就要说说百度网盘恶心人的限速机制了，普通用户是完全没有体验可言的，从网盘下载文件，限速最低可以到几kb/s，就算是你交钱开通了所谓的超级会员，好像也不尽人意，据网友反映，好像还有个下载量限制，本人也有幸借过SVIP账号对比过两款软件的下载速度，下载同样的文件包，我的百度网盘客户端总下载速度4M/s，而PanDownload总下载速度跑到了7M/s，可见百度网盘对于SVIP也有限速机制。对于大部分用户而言，他们交钱开会员就是为了有一个好的体验(ps:博主从来没有开过会员，穷！)，很明显，百度让大家都失望了。</p><blockquote><p>领导，我求求你们别再追查PanDownload了，行吗？263块的超级会员svip，我充了三年，房子充没了。现在好不容易有了速度快的，你们非说它是假的。那软件假不假我们能不知道吗?那软件本来就不用花钱，你说制作者能赚钱吗？谁家能不下载呢，你就能保证你这一辈子不下载吗？你把他抓走了，我们都得2kb/s。我不想慢，我想快点。——《我不是盘神》</p></blockquote><p>上面这是B站网友们玩的一个梗，虽然是梗，但我觉得，盘神这个比喻很恰当，虽然一些人已经把这次事件上升到了阶级矛盾，说是资本主义的垄断和剥削。我不是很懂，我只能站在我所能理解的角度去看待这个问题，百度网盘现在确实属于一家独大的局面，因为好多网上流传的资源都是用的百度网盘，庞大的用户群体让它有了垄断的资本，所以，没办法，大家都得用，然后，百度就真的没把用户当人看了，十分恶心的限速机制，网友戏称“毒云”，我记得很久以前我用的时候，还是很好的，那个时候叫百度云，普通用户的下载速度也能够到500K/s左右，会员提速也是真实有效的，那个时候，百度云的评价还是很好的，大家也没抱怨过，会员机制也可以理解，毕竟要存放那么多人的资料，服务器是需要经费的。到后来，百度干的事情就越来越流氓了，以至于到如今，发生这件事，网友们一边倒地支持PanDwonload，替百度说话的没几个。</p><p>并不是推崇盗版，我们来简单分析下这件事，PanDownload从发布到现在应该也有一两年了，而且很早之前也出现过PanDownload加速无效的情况，估计是被百度网盘官方给制裁过。为什么当时不抓，现在来抓？刘某报案称自己隐私被泄露。你要不是个技术人员，你怎么知道自己隐私被泄露了？你是在某某网站上看到了自己的视频、照片、个人信息，还是什么，又怎么知道是通过PanDownload泄漏的？这个地方我真的很困惑，我觉得就是百度安排的，目的嘛，就是PanDownload确实影响到了百度的利益，然后加速下载的渠道，百度控制不了了，就找警察了。但是你说PanDownload造成了百度上千万的损失，我还真就不相信。软件上明确表示永久免费，严禁倒卖。非法盈利30万，这30万虽然是用户对软件的捐赠，这个从法律层面来说，确实违法了，但是从道德层面来讲，这是用户自愿的，是对软件的一种认可，而不像百度网盘，真就逼迫你消费，还不给你一个好的体验。</p><p>这次的事件，无非就是百度想要杀鸡儆猴，制裁这些损害自己利益的软件，目的达到了，拿了钱，失了人心，如果不从自身改变，等到哪天有一个替代品出现，百度网盘会凉得很快很彻底。</p><p><strong>以上只是我的个人观点，也不一定是正确的，这个事情每个人都有每个人自己的理解吧。虽然这个大佬这次触碰到法律了，但是技术无罪，我们也应该感谢他曾经用爱发电。</strong></p><img src="https://img.jcxiaozhan.top/PanDownload.jpg">]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;这篇文章，就PanDownload开发者被抓事件，我想谈谈自己的看法&quot;&gt;&lt;a href=&quot;#这篇文章，就PanDownload开发者被抓事件，我想谈谈自己的看法&quot; class=&quot;headerlink&quot; title=&quot;这篇文章，就PanDownload开发者被抓事件</summary>
      
    
    
    
    <category term="闲谈" scheme="https://jcxiaozhan.gitee.io/categories/%E9%97%B2%E8%B0%88/"/>
    
    
    <category term="百度云" scheme="https://jcxiaozhan.gitee.io/tags/%E7%99%BE%E5%BA%A6%E4%BA%91/"/>
    
    <category term="PanDownload" scheme="https://jcxiaozhan.gitee.io/tags/PanDownload/"/>
    
  </entry>
  
  <entry>
    <title>简约背景图</title>
    <link href="https://jcxiaozhan.gitee.io/2020/04/09/%E7%AE%80%E7%BA%A6%E8%83%8C%E6%99%AF%E5%9B%BE/"/>
    <id>https://jcxiaozhan.gitee.io/2020/04/09/%E7%AE%80%E7%BA%A6%E8%83%8C%E6%99%AF%E5%9B%BE/</id>
    <published>2020-04-08T16:00:00.000Z</published>
    <updated>2021-06-25T05:50:33.386Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger flat"><p>由于推荐网站无法访问，本篇博客已失效！</p></div><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>今天给大家分享的是一个背景图网站，里面全都是一些简约风格的图片，平铺拉伸都好看，很适合拿来当做背景图，点击图片还可以在线预览效果，下载也简单，本网站的之前的背景图就是在里面找到，喜欢简约风格的小伙伴一定不要错过！<br>废话不多说，上链接，<a href="www.toptal.com/designers/subtlepatterns/">https://www.toptal.com/designers/subtlepatterns/</a></p><img src="https://img.jcxiaozhan.top/%E7%BD%91%E9%A1%B5%E8%83%8C%E6%99%AF%E5%9B%BE%E5%88%86%E4%BA%AB.jpg">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note danger flat&quot;&gt;&lt;p&gt;由于推荐网站无法访问，本篇博客已失效！&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;今天给大家分</summary>
      
    
    
    
    <category term="网站建设" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>百度云限速破解(PC)</title>
    <link href="https://jcxiaozhan.gitee.io/2020/03/28/%E7%99%BE%E5%BA%A6%E4%BA%91%E9%99%90%E9%80%9F%E7%A0%B4%E8%A7%A3(PC)/"/>
    <id>https://jcxiaozhan.gitee.io/2020/03/28/%E7%99%BE%E5%BA%A6%E4%BA%91%E9%99%90%E9%80%9F%E7%A0%B4%E8%A7%A3(PC)/</id>
    <published>2020-03-27T16:00:00.000Z</published>
    <updated>2021-08-29T18:31:00.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>百度云限速机制大家都了解，不开会员下载东西会限速几十k每秒，然而，作为多年白嫖党，开会员是不可能的，这辈子都不可能，下面就教大家我现在在使用的一种PC端破解百度云限速的方法，你甚至都不需要下载百度云客户端，就可以高速下载网盘资源</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>一个浏览器，什么浏览器都可以，只要能安装扩展插件就行，当然，IE就算了，太过时了</li><li>谷歌访问助手，<a href="https://www.lanzoui.com/b0epia9uh">点击下载</a>，密码:5ane</li><li>油猴插件，这个插件强力推荐，功能太强大了，具体多强大，自己研究吧，<a href="https://wwa.lanzoui.com/b0epiaaoh">点击下载</a>,密码：9irj</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装浏览器插件"><a href="#安装浏览器插件" class="headerlink" title="安装浏览器插件"></a>安装浏览器插件</h3><p>这里以Chrome浏览器为例，下载谷歌访问助手和油猴插件，在浏览器设置里，找到扩展程序页面，将油猴插件直接拖入浏览器即可完成安装，而谷歌访问助手则需要解压后点击如图位置选择解压文件夹进行安装</p><img src="https://img.jcxiaozhan.top/%E7%99%BE%E5%BA%A6%E4%BA%91%E4%B8%80.jpg"><h3 id="安装下载器"><a href="#安装下载器" class="headerlink" title="安装下载器"></a>安装下载器</h3><p>安装完谷歌访问助手后，就可以访问谷歌商店了，点击访问我们在谷歌商店搜索 Neat Download，找到如下图所示第一个插件，进行添加</p><img src="https://img.jcxiaozhan.top/%E7%99%BE%E5%BA%A6%E4%BA%91%E4%BA%8C.jpg"><h3 id="设置下载器"><a href="#设置下载器" class="headerlink" title="设置下载器"></a>设置下载器</h3><p>如下图，在设置中将下载最大线程改为32，保存并退出</p><img src="https://img.jcxiaozhan.top/%E7%99%BE%E5%BA%A6%E4%BA%91%E4%B8%89.jpg"><h3 id="下载脚本"><a href="#下载脚本" class="headerlink" title="下载脚本"></a>下载脚本</h3><p>现在我们到脚本网下一个百度云直链生成工具，<a href="https://greasyfork.org/zh-CN/">点击前往</a>，如图点击，即可在线安装</p><img src="https://img.jcxiaozhan.top/%E7%99%BE%E5%BA%A6%E4%BA%91%E5%9B%9B.jpg"><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>如下图所示，在配置好的浏览器，登录网页版百度云，选中自己要下载的文件（不能直接下载文件夹），点击生成链接，在弹出的对话框中鼠标右箭点击链接，选择下载器下载即可</p><img src="https://img.jcxiaozhan.top/%E7%99%BE%E5%BA%A6%E4%BA%91%E4%BA%94.jpg"></li><li><p>我们来看看下载速度，2.8MB/s，已经很不错了，其实网速好的时候可以飙到6~7MB/s</p><img src="https://img.jcxiaozhan.top/%E7%99%BE%E5%BA%A6%E4%BA%91%E5%85%AD.jpg"></li><li><p>如果速度慢或是下载报错的情况，可以尝试更换应用ID，250528（官方）、265486、309847；266719、778750</p><img src="https://img.jcxiaozhan.top/%E7%99%BE%E5%BA%A6%E4%BA%91%E4%B8%83.jpg"></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;百度云限速机制大家都了解，不开会员下载东西会限速几十k每秒，然而，作为多年白嫖党，开会员是不可能的，这辈子都不可能，下面就教大家我现在在使用</summary>
      
    
    
    
    <category term="网络技术" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="百度云" scheme="https://jcxiaozhan.gitee.io/tags/%E7%99%BE%E5%BA%A6%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>GitHub仓库高速克隆</title>
    <link href="https://jcxiaozhan.gitee.io/2020/03/18/GitHub%E4%BB%93%E5%BA%93%E9%AB%98%E9%80%9F%E5%85%8B%E9%9A%86/"/>
    <id>https://jcxiaozhan.gitee.io/2020/03/18/GitHub%E4%BB%93%E5%BA%93%E9%AB%98%E9%80%9F%E5%85%8B%E9%9A%86/</id>
    <published>2020-03-17T16:00:00.000Z</published>
    <updated>2021-08-29T18:28:52.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信用过Github的小伙伴都知道，当我们用Git克隆GitHub仓库时，速度是非常慢的，我一个几mb大小的学习笔记克隆下来都要老半天，速度不超过10k/s，更不要说GitHub上面一些优秀的开源项目了,今天就教大家怎么高速克隆GitHub仓库。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>注册一个码云的账号，<a href="https://gitee.com/">点击前往</a></p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="在码云上面导入GitHub仓库"><a href="#在码云上面导入GitHub仓库" class="headerlink" title="在码云上面导入GitHub仓库"></a>在码云上面导入GitHub仓库</h3><p>登录码云，右上角加号，点击导入GitHub仓库<br>可以通过url导入，也可以关联GitHub账号来导入，我用的第一种</p><img src="https://img.jcxiaozhan.top/%E7%A0%81%E4%BA%91%E4%B8%80.jpg"><img src="https://img.jcxiaozhan.top/%E7%A0%81%E4%BA%91%E4%BA%8C.jpg"><h3 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h3><p>因为我们已经在码云上面导入了我们的GitHub仓库，所以我们可以用码云的仓库地址来进行克隆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https地址&#x2F;ssh地址</span><br></pre></td></tr></table></figure><h3 id="修改仓库绑定"><a href="#修改仓库绑定" class="headerlink" title="修改仓库绑定"></a>修改仓库绑定</h3><p>在克隆下来的仓库本地文件夹里，我们找到<code>.git/config</code>这个文件<br>用文本编辑器打开，做如下修改，然后我们的本地库就又跟GitHub远程库绑定上了</p><img src="https://img.jcxiaozhan.top/%E7%A0%81%E4%BA%91%E4%B8%89.jpg"><img src="https://img.jcxiaozhan.top/%E7%A0%81%E4%BA%91%E5%9B%9B.jpg">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;相信用过Github的小伙伴都知道，当我们用Git克隆GitHub仓库时，速度是非常慢的，我一个几mb大小的学习笔记克隆下来都要老半天，速度</summary>
      
    
    
    
    <category term="网络技术" scheme="https://jcxiaozhan.gitee.io/categories/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Git" scheme="https://jcxiaozhan.gitee.io/tags/Git/"/>
    
  </entry>
  
</feed>
